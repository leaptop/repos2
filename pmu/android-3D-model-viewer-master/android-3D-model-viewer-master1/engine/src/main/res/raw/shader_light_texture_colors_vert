uniform mat4 u_MVPMatrix;
attribute vec4 a_Position;
attribute vec4 a_Color;
varying vec4 v_Color;

attribute vec2 a_TexCoordinate;
varying vec2 v_TexCoordinate;

uniform mat4 u_MVMatrix;
uniform vec3 u_LightPos;
uniform vec3 u_cameraPos;
attribute vec3 a_Normal;

void main(){
    gl_Position = u_MVPMatrix * a_Position;
    vec3 modelViewVertex = normalize(vec3(-5.0, 3.0, -10.0));
    vec3 modelViewNormal = normalize(vec3(u_MVMatrix * vec4(a_Normal, 0.0)));
    vec3 lightVector = normalize(vec3(-10.0, 1.0, 1.0));

    float diffuse = max(dot(lightVector, modelViewNormal),0.0)  * 0.1;

    vec3 viewDir = ( modelViewVertex);
    vec3 reflectDir = reflect(-lightVector, modelViewNormal);
    float specular = pow(max(dot(reflectDir, viewDir),0.0),32.0);

    float distance = length(u_LightPos + modelViewVertex );

    v_Color = a_Color * min((diffuse * distance + specular + 0.2),1.0);
    v_Color[3] = a_Color[3]; // correct alpha

    v_TexCoordinate = a_TexCoordinate;
}