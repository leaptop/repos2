float *p; // указатель на вещественные числа.
p=(float *) malloc(n*sizeof(float));// Выделяемпамять под n вещественных чисел;

int c;
int *p = &c;
Вот пример простой с присвоением указателю p адреса c.

Чтобы пользоваться внешней переменной без указания звёздочки:
void f(int &c){c=10;}//C++ only?

void swap(int *x, int *y)//works in C
{
	int temp = *x;
	*x = *y;
	*y = temp;
}
swap(&a[0], &a[1]);

void iswap(int &x, int &y) {//C++ only
	int temp = x;
	x = y;
	y = temp;
}
iswap(a[0], a[1]);

Бился с передачей массива указателей на указатели. Оказалось, что звёздочки должны быть впереди при передаче
void boardGeneration(char **a)
Хотя так тоже работало void boardGeneration(char a[][9]), но выдавало предупреждение при компиляции 
 note: expected 'char (*)[9]' but argument is of type 'char **'
 или warning: passing argument 1 of 'boardRenew' from incompatible pointer type [-Wincompatible-pointer-types]
 
 Так вот, указатель — это, тупо, то самое число, тот самый адрес. Т.е. &a равно именно в точности адресу в памяти, по которому хранится значение. Чтобы избежать невнятных проблем, тип «указатель на int (или на любой другой тип) — int*» — это такой совершенно отдельный тип.

Итак есть два волшебных оператора: * и &. Второй по данной переменной узнаёт её адрес в памяти. Первый по данному адресу (который, как мы помним, хранится в переменной типа int*) возвращает собственно данные, расположенные по этому адресу.

&k can be only in parameter list?

http://www.toves.org/books/cptr/
To get the memory address of a variable, you can use the ampersand ('&') operator: For example, the value of the expression “&i” is the memory address of i. Conversely, to access the memory referenced by a pointer, you can use the asterisk ('*') operator — this is called dereferencing the pointer. Consider the following example.
int i;
int *p;
i = 4;
p = &i;
*p = 5;
printf("%d\n", i);
In this fragment, we have declared two variables: i, which holds an integer, and p, which holds the memory address of an integer. The computer first initializes i with the value 4 and p with the value &i. Then it executes “*p = 5;”, which says to alter the memory referenced by p (that is, i) to hold 5. Finally, we print the value of i, which is now 5.

ptr[x] тождественно *(ptr+x)
&ptr[x] тождественно ptr+x