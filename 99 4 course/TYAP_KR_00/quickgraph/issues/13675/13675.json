{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "",
    "ClosedDate": null,
    "CommentCount": 0,
    "Custom": null,
    "Description": "Hi Jonathan,\n \nI copy this from the discussions, together with a little cleaned up source, as it is more appropriate here.Can this be caused by some global state used by the algorithm (Dijkstra, BFS) that gets overwritten as multiple vertices are processed simultaneously (as there is no problem with the non-delegated version)?\n \nThanks,\nVlad\n--------------------------------------------------------------------------------------------------------------------------------------------\nSomething wrong goes on with the Delegate graphs. I attach an example of a very simple graph where I try to find a spanning tree. This is an F# code. I just build a delegate graph (which is a \"trunk\" chain of 99 edges with four additional \"branches\" of one edge) using a switch-case expression and there is just a single call to the spanning tree algorithm. \n \ngetMEM_filter_simple uses chains_scores_1_read_simple to generate a graph of 99 nodes, with edge i<- >i+1 of weight 0 for all i in [0..97] and 4 edges of non-zero weight. This graph has a maximum spanning tree of weight 40.\nWhen I use Kruskal (the weights are set as \"minus tag\") I get the correct result of 40. If MinimumSpanningTreeKruskal is replaced with MinimumSpanningTreePrim I get a result of 32 with edge 68-93 missing from the optimal tree. I tried to replace FibonacciHeap\nwith the BinaryQueue and got  another result for MST: 24! (Side note, I head to modify in \"class BinaryQueue<TVertex, TDistance> :     IQueue<TVertex>\" IQueue to IPriorityQueue. For some reason it was different than in FibonacciQueue).\n \n \n \nI did not have such a discrepancy between Kruskal and Prim prior to switching to the Delegate graph. Notice that Kruskal has to precompute all the edges in advance so for Kruskal the Delegates does not matter.",
    "LastUpdatedDate": "2013-02-21T17:44:43.93-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "quickgraph",
    "ReportedDate": "2009-07-19T20:00:53.53-07:00",
    "Status": {
      "Name": "Proposed",
      "Id": 1
    },
    "ReasonClosed": {
      "Name": "Unassigned"
    },
    "Summary": "Spanning tree algorithm produces wrong results when used on a simple delegate graph.",
    "Type": {
      "Name": "Issue",
      "Id": 3
    },
    "VoteCount": 1,
    "Id": 13675
  },
  "FileAttachments": [
    {
      "FileId": 2043,
      "FileName": "bug_span.fs",
      "DownloadUrl": ".\\2043"
    }
  ],
  "Comments": [
    {
      "Message": "Checked the problem with 35484 build. Using Prim on a Delegate graph still gives wrong result.\r\n",
      "PostedDate": "2009-07-23T10:01:37.37-07:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2013-02-21T17:44:43.93-08:00",
      "Id": -2147483648
    }
  ]
}