{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "",
    "ClosedDate": "2009-01-02T15:22:43.393-08:00",
    "CommentCount": 0,
    "Custom": null,
    "Description": "Hello,\n \nI tried your implementation of Prim spanning tree algorithm after your changes: I downloaded release 29565 and changed my program\naccording to MinimumSpanningTreePrim method fromAlgorithmExtensions class. You just use here yourUndirectedDijkstraShortestPathAlgorithm and then return tree that consists from edges that are included in shortest paths from some (default) vertex to all other vertices. IMHO that did not guarantee that the result is minimum spanning tree. I tested this algorithm with a graph from book \"Graph theory\" by N.Christofides, chapter 7 “Trees, paragraph 3.4 (I have Russian translation of 1975 year). The weight of minimal spanning tree is equal to 63. But your algorithm gives 88. I modified slightly MinimumSpanningTreePrim and tried it for all vertices being the root. The minimal weight is when the root is vertex 10 and it is equal to 72.  But it is greater than 63. So the minimal tree could not be founded by this way. I add an XML representation of this graph so you could check it: \n \n \n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n \n  <graph>\n \n    <node id=\"1\" />\n \n    <node id=\"2\" />\n \n    <node id=\"3\" />\n \n    <node id=\"4\" />\n \n    <node id=\"5\"  />\n \n    <node id=\"6\" />\n \n    <node id=\"7\" />\n \n    <node id=\"8\" />\n \n    <node id=\"9\" />\n \n    <node id=\"10\" />\n \n    <node id=\"11\" />\n \n    <node id=\"12\" />\n \n    <edge id=\"1_2\" source=\"1\" target=\"2\" weight=\"6\" />\n \n    <edge id=\"1_4\" source=\"1\" target=\"4\" weight=\"11\" />\n \n    <edge id=\"1_5\" source=\"1\" target=\"5\" weight=\"5\" />\n \n    <edge id=\"2_5\" source=\"2\" target=\"5\" weight=\"8\" />\n \n    <edge id=\"2_3\" source=\"2\" target=\"3\" weight=\"15\" />\n \n    <edge id=\"2_4\" source=\"2\" target=\"4\" weight=\"18\" />\n \n    <edge id=\"2_7\" source=\"2\" target=\"7\" weight=\"11\" />\n \n    <edge id=\"3_4\" source=\"3\" target=\"4\" weight=\"8\" />\n \n    <edge id=\"3_8\" source=\"3\" target=\"8\" weight=\"18\" />\n \n    <edge id=\"3_9\" source=\"3\" target=\"9\" weight=\"6\" />\n \n    <edge id=\"4_6\" source=\"4\" target=\"6\" weight=\"10\" />\n \n    <edge id=\"4_7\" source=\"4\" target=\"7\" weight=\"7\" />\n \n    <edge id=\"4_11\" source=\"4\" target=\"11\" weight=\"17\" />\n \n    <edge id=\"5_6\" source=\"5\" target=\"6\" weight=\"15\" />\n \n    <edge id=\"5_7\" source=\"5\" target=\"7\" weight=\"9\" />\n \n    <edge id=\"6_11\" source=\"6\" target=\"11\" weight=\"3\" />\n \n    <edge id=\"7_8\" source=\"7\" target=\"8\" weight=\"9\" />\n \n    <edge id=\"7_9\" source=\"7\" target=\"9\" weight=\"4\" />\n \n    <edge id=\"7_11\" source=\"7\" target=\"11\" weight=\"12\" />\n \n    <edge id=\"7_10\" source=\"7\" target=\"10\" weight=\"13\" />\n \n    <edge id=\"8_9\" source=\"8\" target=\"9\" weight=\"14\" />\n \n    <edge id=\"8_12\" source=\"8\" target=\"12\" weight=\"5\" />\n \n    <edge id=\"9_10\" source=\"9\" target=\"10\" weight=\"19\" />\n \n    <edge id=\"10_12\" source=\"10\" target=\"12\" weight=\"2\" />\n \n    <edge id=\"11_12\" source=\"11\" target=\"12\" weight=\"7\" />\n \n  </graph>",
    "LastUpdatedDate": "2013-05-16T04:59:24.453-07:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "quickgraph",
    "ReportedDate": "2009-01-02T13:55:41.367-08:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "Unassigned"
    },
    "Summary": "Question about Prim spanning tree algorithm",
    "Type": {
      "Name": "Issue",
      "Id": 3
    },
    "VoteCount": 1,
    "Id": 12273
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "Resolved with changeset 29707.",
      "PostedDate": "2009-01-02T15:22:43.393-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2013-02-21T17:44:52.743-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2013-05-16T04:59:24.453-07:00",
      "Id": -2147483648
    }
  ]
}