{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "",
    "ClosedDate": "2009-07-21T23:25:27.727-07:00",
    "CommentCount": 0,
    "Custom": null,
    "Description": "Unfortunately this is not what appears to be happening. I have the attributes of my Person class decorated with [XmlAttribute], [XmlElement], and [XmlIgnore], but none of the Person objects are being serialized correctly.  Sorry for the long reply, but I wanted you to have a proper repro. I am using Visual Studio 2008 with QuickGraph 3.2.40408.\n \nThanks,\n \nReid\n \n \n \nPerson.cs\n \n    using System;\n    using System.ComponentModel;\n    using System.Globalization;\n    using System.Text;\n    using System.Xml.Serialization;\n \n    #region Enumerations\n    /// \n    /// Enumeration of the person's gender\n    /// \n    public enum Gender\n    {\n        /// \n        /// Male gender.\n        /// \n        Male,\n \n        /// \n        /// Female gender.\n        /// \n        Female\n    }\n \n    /// \n    /// Enumeration of the person's age group\n    /// \n    public enum AgeGroup\n    {\n        /// \n        /// Unknown age group.\n        /// \n        Unknown,\n \n        /// \n        /// 0 to 20 age group.\n        /// \n        Youth,\n \n        /// \n        /// 20 to 40 age group.\n        /// \n        Adult,\n \n        /// \n        /// 40 to 65 age group.\n        /// \n        MiddleAge,\n \n        /// \n        /// Over 65 age group.\n        /// \n        Senior\n    }\n \n    #endregion\n \n    /// \n    /// Representation for a single serializable Person.\n    /// INotifyPropertyChanged allows properties of the Person class to\n    /// participate as source in data bindings.\n    /// \n    [Serializable]\n    public class Person : INotifyPropertyChanged, IEquatable, IDataErrorInfo\n    {\n        #region Fields and Constants\n \n        private const string DefaultFirstName = \"Unknown\";\n        private string id;\n        private string firstName;\n        private string lastName;\n        private string middleName;\n        private string suffix;\n        private string nickName;\n        private string maidenName;\n        private Gender gender;\n        private DateTime? birthDate;\n        private string birthPlace;\n        private DateTime? deathDate;\n        private string deathPlace;\n        private bool isLiving;\n \n        #endregion\n \n        #region Constructors\n \n        /// \n        /// Initializes a new instance of the Person class.\n        /// Each new instance will be given a unique identifier.\n        /// This parameterless constructor is also required for serialization.\n        /// \n        public Person()\n        {\n            this.id = Guid.NewGuid().ToString();\n            this.firstName = DefaultFirstName;\n            this.isLiving = true;\n        }\n \n        /// \n        /// Initializes a new instance of the person class with the firstname and the lastname.\n        /// \n        /// <param name=\"firstName\" />First name.\n        /// <param name=\"lastName\" />Last name.\n        public Person(string firstName, string lastName)\n            : this()\n        {\n            // Use the first name if specified, if not, the default first name is used.\n            if (!string.IsNullOrEmpty(firstName))\n            {\n                this.firstName = firstName;\n            }\n \n            this.lastName = lastName;\n        }\n \n        /// \n        /// Initializes a new instance of the person class with the firstname, the lastname, and gender\n        /// \n        /// <param name=\"firstName\" />First name.\n        /// <param name=\"lastName\" />Last name.\n        /// <param name=\"gender\" />Gender of the person.\n        public Person(string firstName, string lastName, Gender gender)\n            : this(firstName, lastName)\n        {\n            this.gender = gender;\n        }\n \n        #endregion\n \n        #region Properties\n \n        /// \n        /// Gets or sets the unique identifier for each person.\n        /// \n        [XmlAttribute]\n        public string Id\n        {\n            get\n            {\n                return this.id;\n            }\n \n            set\n            {\n                if (this.id != value)\n                {\n                    this.id = value;\n                    this.OnPropertyChanged(\"Id\");\n                }\n            }\n        }\n \n        /// \n        /// Gets or sets the name that occurs first in a given name\n        /// \n        [XmlElement]\n        public string FirstName\n        {\n            get\n            {\n                return this.firstName;\n            }\n \n            set\n            {\n                if (this.firstName != value)\n                {\n                    this.firstName = value;\n                    this.OnPropertyChanged(\"FirstName\");\n                    this.OnPropertyChanged(\"Name\");\n                    this.OnPropertyChanged(\"FullName\");\n                }\n            }\n        }\n \n        /// \n        /// Gets or sets the part of a given name that indicates what family the person belongs to. \n        /// \n        [XmlElement]\n        public string LastName\n        {\n            get\n            {\n                return this.lastName;\n            }\n \n            set\n            {\n                if (this.lastName != value)\n                {\n                    this.lastName = value;\n                    this.OnPropertyChanged(\"LastName\");\n                    this.OnPropertyChanged(\"Name\");\n                    this.OnPropertyChanged(\"FullName\");\n                }\n            }\n        }\n \n        /// \n        /// Gets or sets the name that occurs between the first and last name.\n        /// \n        [XmlElement]\n        public string MiddleName\n        {\n            get\n            {\n                return this.middleName;\n            }\n \n            set\n            {\n                if (this.middleName != value)\n                {\n                    this.middleName = value;\n                    this.OnPropertyChanged(\"MiddleName\");\n                    this.OnPropertyChanged(\"FullName\");\n                }\n            }\n        }\n \n        /// \n        /// Gets the person's name in the format FirstName LastName.\n        /// \n        [XmlIgnore]\n        public string Name\n        {\n            get\n            {\n                string name = String.Empty;\n                if (!string.IsNullOrEmpty(this.firstName))\n                {\n                    name += this.firstName;\n                }\n \n                if (!string.IsNullOrEmpty(this.lastName))\n                {\n                    name += \" \" + this.lastName;\n                }\n \n                return name;\n            }\n        }\n \n        /// \n        /// Gets the person's fully qualified name: Firstname MiddleName LastName Suffix\n        /// \n        [XmlIgnore]\n        public string FullName\n        {\n            get\n            {\n                string fullName = String.Empty;\n                if (!string.IsNullOrEmpty(this.firstName))\n                {\n                    fullName += this.firstName;\n                }\n \n                if (!string.IsNullOrEmpty(this.middleName))\n                {\n                    fullName += \" \" + this.middleName;\n                }\n \n                if (!string.IsNullOrEmpty(this.lastName))\n                {\n                    fullName += \" \" + this.lastName;\n                }\n \n                if (!string.IsNullOrEmpty(this.suffix))\n                {\n                    fullName += \" \" + this.suffix;\n                }\n \n                return fullName;\n            }\n        }\n \n        /// \n        /// Gets or sets the text that appear behind the last name providing additional information about the person.\n        /// \n        [XmlElement]\n        public string Suffix\n        {\n \n            get\n            {\n                return this.suffix;\n            }\n \n            set\n            {\n                if (this.suffix != value)\n                {\n                    this.suffix = value;\n                    this.OnPropertyChanged(\"Suffix\");\n                    this.OnPropertyChanged(\"FullName\");\n                }\n            }\n        }\n \n        /// \n        /// Gets or sets the person's familiar or shortened name\n        /// \n        [XmlElement]\n        public string NickName\n        {\n            get\n            {\n                return this.nickName;\n            }\n \n            set\n            {\n                if (this.nickName != value)\n                {\n                    this.nickName = value;\n                    this.OnPropertyChanged(\"NickName\");\n                }\n            }\n        }\n \n        /// \n        /// Gets or sets the person's name carried before marriage\n        /// \n        [XmlElement]\n        public string MaidenName\n        {\n            get\n            {\n                return this.maidenName;\n            }\n \n            set\n            {\n                if (this.maidenName != value)\n                {\n                    this.maidenName = value;\n                    this.OnPropertyChanged(\"MaidenName\");\n                }\n            }\n        }\n \n        /// \n        /// Gets or sets the person's gender\n        /// \n        [XmlElement]\n        public Gender Gender\n        {\n            get\n            {\n                return this.gender;\n            }\n \n            set\n            {\n                if (this.gender != value)\n                {\n                    this.gender = value;\n                    this.OnPropertyChanged(\"Gender\");\n                }\n            }\n        }\n \n        /// \n        /// Gets the age of the person.\n        /// \n        [XmlIgnore]\n        public int? Age\n        {\n            get\n            {\n                if (this.BirthDate == null)\n                {\n                    return null;\n                }\n \n                // Determine the age of the person based on just the year.\n                DateTime startDate = this.BirthDate.Value;\n                DateTime endDate = (this.IsLiving || this.DeathDate == null) ? DateTime.Now : this.DeathDate.Value;\n                int age = endDate.Year - startDate.Year;\n \n                // Compensate for the month and day of month (if they have not had a birthday this year).\n                if (endDate.Month < startDate.Month || (endDate.Month == startDate.Month && endDate.Day < startDate.Day))\n                {\n                    age--;\n                }\n \n                return Math.Max(0, age);\n            }\n        }\n \n        /// \n        /// Gets the age of the person.\n        /// \n        [XmlIgnore]\n        public AgeGroup AgeGroup\n        {\n            get\n            {\n                AgeGroup ageGroup = AgeGroup.Unknown;\n \n                if (this.Age.HasValue)\n                {\n                    // The AgeGroup enumeration is defined later in this file. It is up to the Person\n                    // class to define the ages that fall into the particular age groups\n                    if (this.Age >= 0 && this.Age < 20)\n                    {\n                        ageGroup = AgeGroup.Youth;\n                    }\n                    else if (this.Age >= 20 && this.Age < 40)\n                    {\n                        ageGroup = AgeGroup.Adult;\n                    }\n                    else if (this.Age >= 40 && this.Age < 65)\n                    {\n                        ageGroup = AgeGroup.MiddleAge;\n                    }\n                    else\n                    {\n                        ageGroup = AgeGroup.Senior;\n                    }\n                }\n \n                return ageGroup;\n            }\n        }\n \n        /// \n        /// Gets the year the person was born\n        /// \n        [XmlIgnore]\n        public string YearOfBirth\n        {\n            get\n            {\n                if (this.birthDate.HasValue)\n                {\n                    return this.birthDate.Value.Year.ToString(CultureInfo.CurrentCulture);\n                }\n                else\n                {\n                    return \"-\";\n                }\n            }\n        }\n \n        /// \n        /// Gets the year the person died\n        /// \n        [XmlIgnore]\n        public string YearOfDeath\n        {\n            get\n            {\n                if (this.deathDate.HasValue && !this.isLiving)\n                {\n                    return this.deathDate.Value.Year.ToString(CultureInfo.CurrentCulture);\n                }\n                else\n                {\n                    return \"-\";\n                }\n            }\n        }\n \n        /// \n        /// Gets or sets the person's birth date.  This property can be null.\n        /// \n        [XmlElement]\n        public DateTime? BirthDate\n        {\n            get\n            {\n                return this.birthDate;\n            }\n \n            set\n            {\n                if (this.birthDate == null || this.birthDate != value)\n                {\n                    this.birthDate = value;\n                    this.OnPropertyChanged(\"BirthDate\");\n                    this.OnPropertyChanged(\"Age\");\n                    this.OnPropertyChanged(\"AgeGroup\");\n                    this.OnPropertyChanged(\"YearOfBirth\");\n                    this.OnPropertyChanged(\"BirthMonthAndDay\");\n                    this.OnPropertyChanged(\"BirthDateAndPlace\");\n                }\n            }\n        }\n \n        /// \n        /// Gets or sets the person's place of birth\n        /// \n        [XmlElement]\n        public string BirthPlace\n        {\n            get\n            {\n                return this.birthPlace;\n            }\n \n            set\n            {\n                if (this.birthPlace != value)\n                {\n                    this.birthPlace = value;\n                    this.OnPropertyChanged(\"BirthPlace\");\n                    this.OnPropertyChanged(\"BirthDateAndPlace\");\n                }\n            }\n        }\n \n        /// \n        /// Gets the month and day the person was born in. This property can be null.\n        /// \n        [XmlIgnore]\n        public string BirthMonthAndDay\n        {\n            get\n            {\n                if (this.birthDate == null)\n                {\n                    return null;\n                }\n                else\n                {\n                    return this.birthDate.Value.ToString(\n                        DateTimeFormatInfo.CurrentInfo.MonthDayPattern,\n                        CultureInfo.CurrentCulture);\n                }\n            }\n        }\n \n        /// \n        /// Gets a friendly string for BirthDate and Place\n        /// \n        [XmlIgnore]\n        public string BirthDateAndPlace\n        {\n            get\n            {\n                if (this.birthDate == null)\n                {\n                    return null;\n                }\n                else\n                {\n                    StringBuilder returnValue = new StringBuilder();\n                    returnValue.Append(\"Born \");\n                    returnValue.Append(\n                        this.birthDate.Value.ToString(\n                            DateTimeFormatInfo.CurrentInfo.ShortDatePattern,\n                            CultureInfo.CurrentCulture));\n \n                    if (!string.IsNullOrEmpty(this.birthPlace))\n                    {\n                        returnValue.Append(\", \");\n                        returnValue.Append(this.birthPlace);\n                    }\n \n                    return returnValue.ToString();\n                }\n            }\n        }\n \n        /// \n        /// Gets or sets the person's death of death.  This property can be null.\n        /// \n        [XmlElement]\n        public DateTime? DeathDate\n        {\n            get\n            {\n                return this.deathDate;\n            }\n \n            set\n            {\n                if (this.deathDate == null || this.deathDate != value)\n                {\n                    this.IsLiving = false;\n                    this.deathDate = value;\n                    this.OnPropertyChanged(\"DeathDate\");\n                    this.OnPropertyChanged(\"Age\");\n                    this.OnPropertyChanged(\"YearOfDeath\");\n                }\n            }\n        }\n \n        /// \n        /// Gets or sets the person's place of death\n        /// \n        [XmlElement]\n        public string DeathPlace\n        {\n            get\n            {\n                return this.deathPlace;\n            }\n \n            set\n            {\n                if (this.deathPlace != value)\n                {\n                    this.IsLiving = false;\n                    this.deathPlace = value;\n                    this.OnPropertyChanged(\"DeathPlace\");\n                }\n            }\n        }\n \n        /// \n        /// Gets or sets a value indicating whether the person is still alive or deceased.\n        /// \n        [XmlElement]\n        public bool IsLiving\n        {\n            get\n            {\n                return this.isLiving;\n            }\n \n            set\n            {\n                if (this.isLiving != value)\n                {\n                    this.isLiving = value;\n                    this.OnPropertyChanged(\"IsLiving\");\n                }\n            }\n        }\n \n        /// \n        /// Gets a string that describes this person to their parents.\n        /// \n        [XmlIgnore]\n        public string ParentRelationshipText\n        {\n            get\n            {\n                if (this.gender == Gender.Male)\n                {\n                    return \"Son\";\n                }\n                else\n                {\n                    return \"Daughter\";\n                }\n            }\n        }\n \n        /// \n        /// Gets a string that describes this person to their siblings.\n        /// \n        [XmlIgnore]\n        public string SiblingRelationshipText\n        {\n            get\n            {\n                if (this.gender == Gender.Male)\n                {\n                    return \"Brother\";\n                }\n                else\n                {\n                    return \"Sister\";\n                }\n            }\n        }\n \n        /// \n        /// Gets a string that describes this person to their spouses.\n        /// \n        [XmlIgnore]\n        public string SpouseRelationshipText\n        {\n            get\n            {\n                if (this.gender == Gender.Male)\n                {\n                    return \"Husband\";\n                }\n                else\n                {\n                    return \"Wife\";\n                }\n            }\n        }\n \n        /// \n        /// Gets a string that describes this person to their children.\n        /// \n        [XmlIgnore]\n        public string ChildRelationshipText\n        {\n            get\n            {\n                if (this.gender == Gender.Male)\n                {\n                    return \"Father\";\n                }\n                else\n                {\n                    return \"Mother\";\n                }\n            }\n        }\n \n        #endregion\n \n        #region INotifyPropertyChanged Members\n \n        /// \n        /// INotifyPropertyChanged requires a property called PropertyChanged.\n        /// \n        public event PropertyChangedEventHandler PropertyChanged;\n \n        /// \n        /// Fires the event for the property when it changes.\n        /// \n        /// <param name=\"propertyName\" />Property name.\n        protected virtual void OnPropertyChanged(string propertyName)\n        {\n            if (this.PropertyChanged != null)\n            {\n                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));\n            }\n        }\n \n        #endregion\n \n        #region IEquatable Members\n \n        /// \n        /// Determine equality between two person classes\n        /// \n        /// <param name=\"other\" />An object to compare with this object.\n        /// true if the current object is equal to the other parameter; otherwise, false. \n        public bool Equals(Person other)\n        {\n            return this.Id == other.Id;\n        }\n \n        #endregion\n \n        #region Methods\n \n        /// \n        /// Returns a String that represents the current Object.\n        /// \n        /// A String that represents the current Object.\n        public override string ToString()\n        {\n            return this.Name;\n        }\n \n        #endregion\n \n        #region IDataErrorInfo Members\n \n        /// \n        /// Gets an error message indicating what is wrong with this object.\n        /// \n        public string Error\n        {\n            get { return null; }\n        }\n \n        /// \n        /// Gets the error message for the property with the given name.\n        /// \n        /// <param name=\"columnName\" />The name of the property whose error message to get.\n        /// The error message for the property. The default is an empty string (\"\").\n        public string this[string columnName]\n        {\n            get\n            {\n                string result = String.Empty;\n \n                if (columnName == \"BirthDate\")\n                {\n                    if (this.BirthDate == DateTime.MinValue)\n                    {\n                        result = \"This does not appear to be a valid date.\";\n                    }\n                }\n \n                if (columnName == \"DeathDate\")\n                {\n                    if (this.DeathDate == DateTime.MinValue)\n                    {\n                        result = \"This does not appear to be a valid date.\";\n                    }\n                }\n \n                return result;\n            }\n        }\n \n        #endregion\n    }\nProgram.cs\n        static void Main(string[] args)\n        {\n            var graph = new AdjacencyGraph<Person, TaggedEdge<Person, String>>();\n \n            Person jacob = new Person(\"Jacob\", \"Hochstetler\")\n            {\n                BirthDate = new DateTime(1712, 01, 01),\n                BirthPlace = \"Alsace, France\",\n                DeathDate = new DateTime(1776, 01, 01),\n                DeathPlace = \"Pennsylvania, USA\",\n                Gender = Gender.Male\n            };\n \n            Person john = new Person(\"John\", \"Hochstetler\")\n            {\n                BirthDate = new DateTime(1735, 01, 01),\n                BirthPlace = \"Alsace, France\",\n                DeathDate = new DateTime(1805, 04, 15),\n                DeathPlace = \"Summit Mills, PA\",\n                Gender = Gender.Male\n            };\n \n            Person jonathon = new Person(\"Jonathon\", \"Hochstetler\")\n            {\n                BirthPlace = \"Pennsylvania\",\n                DeathDate = new DateTime(1823, 05, 08),\n                Gender = Gender.Male,\n            };\n \n            Person emanuel = new Person(\"Emanuel\", \"Hochstedler\")\n            {\n                BirthDate = new DateTime(1855, 01, 01),\n                DeathDate = new DateTime(1900, 01, 01),\n                Gender = Gender.Male\n            };\n \n            graph.AddVerticesAndEdge(new TaggedEdge<Person, string>(jacob, john, jacob.ChildRelationshipText));\n            graph.AddVerticesAndEdge(new TaggedEdge<Person, string>(john, jonathon, john.ChildRelationshipText));\n            graph.AddVerticesAndEdge(new TaggedEdge<Person, string>(jonathon, emanuel, jonathon.ChildRelationshipText));\n \n            XmlWriterSettings settings = new XmlWriterSettings() { Indent = true, IndentChars = @\"    \" };\n            using (var writer = XmlWriter.Create(\"out.xml\", settings))\n            {\n                graph.SerializeToXml(writer,\n                    v => v.Id,\n                    AlgorithmExtensions.GetEdgeIdentity(graph),\n                    \"graph\", \"person\", \"relationship\", \"\");\n            }\n        }",
    "LastUpdatedDate": "2013-05-16T04:59:18.79-07:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "quickgraph",
    "ReportedDate": "2009-06-05T07:00:50.777-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "Unassigned"
    },
    "Summary": "XML Serialization",
    "Type": {
      "Name": "Issue",
      "Id": 3
    },
    "VoteCount": 1,
    "Id": 13428
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "I see: graphml serializer has knowledge about XmlAttribute. The SerializeToXml has no knowledge whatsover about the serialization of vertex/edge. ",
      "PostedDate": "2009-06-05T07:09:00.483-07:00",
      "Id": -2147483648
    },
    {
      "Message": "For XML Serialization, simply store the edges into a list and serialize. I don't see any easy way to enable xml serialization for graphs.",
      "PostedDate": "2009-07-21T23:25:05.487-07:00",
      "Id": -2147483648
    },
    {
      "Message": "For XML Serialization, simply store the edges into a list and serialize. I don't see any easy way to enable xml serialization for graphs.",
      "PostedDate": "2009-07-21T23:25:17.05-07:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2009-07-21T23:25:27.727-07:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2013-02-21T17:44:45.963-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2013-05-16T04:59:18.79-07:00",
      "Id": -2147483648
    }
  ]
}