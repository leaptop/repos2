[
  {
    "Id": "469854",
    "ThreadId": "220212",
    "Html": "<p>Does anyone know how to save or get the complete path for the root vertex using this dijstra algo.</p>\r\n<p>I have the following code:</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre>\r\n    <span style=\"color:blue\">class</span> NewDijkstra\r\n    {\r\n\r\n\r\n        <span style=\"color:blue\">string</span> nodeTable, edgeTable;\r\n        String[] nodes;\r\n        String[] edges;\r\n\r\n        DataSQL ds = <span style=\"color:blue\">new</span> DataSQL();\r\n        DataTable dt;\r\n        DataTable hn;\r\n        <span style=\"color:blue\">private</span> List&lt;Node&gt; nodeList;\r\n        <span style=\"color:blue\">public</span> List&lt;Node&gt; QNodeList;\r\n        <span style=\"color:blue\">private</span> List&lt;Node&gt; ListofNeighbors;\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">string</span> homeNode;\r\n        <span style=\"color:blue\">public</span> Edge&lt;<span style=\"color:blue\">string</span>&gt;[] edge = <span style=\"color:blue\">null</span>;\r\n        AdjacencyGraph&lt;<span style=\"color:blue\">string</span>, Edge&lt;<span style=\"color:blue\">string</span>&gt;&gt; graph;\r\n        Dictionary&lt;Edge&lt;<span style=\"color:blue\">string</span>&gt;, <span style=\"color:blue\">double</span>&gt; edgeCost;\r\n        DijkstraShortestPathAlgorithm&lt;<span style=\"color:blue\">string</span>, Edge&lt;<span style=\"color:blue\">string</span>&gt;&gt; dijkstra;\r\n        QuickGraph.Algorithms.Observers.VertexPredecessorRecorderObserver&lt;<span style=\"color:blue\">string</span>, Edge&lt;<span style=\"color:blue\">string</span>&gt;&gt; predecessorObserver;\r\n        VertexDistanceRecorderObserver&lt;<span style=\"color:blue\">string</span>, Edge&lt;<span style=\"color:blue\">string</span>&gt;&gt; distObserver;\r\n\r\n\r\n        <span style=\"color:blue\">public</span> NewDijkstra(String nodeTable, String edgeTable)\r\n        {\r\n            <span style=\"color:blue\">this</span>.nodeTable = nodeTable;\r\n            <span style=\"color:blue\">this</span>.edgeTable = edgeTable;\r\n            getAllNodes();\r\n            graph = <span style=\"color:blue\">new</span> AdjacencyGraph&lt;<span style=\"color:blue\">string</span>, Edge&lt;<span style=\"color:blue\">string</span>&gt;&gt;(<span style=\"color:blue\">true</span>);\r\n            setUpDikjstra();\r\n\r\n            getAllEdges();\r\n\r\n            dijkstra = <span style=\"color:blue\">new</span> DijkstraShortestPathAlgorithm&lt;<span style=\"color:blue\">string</span>, Edge&lt;<span style=\"color:blue\">string</span>&gt;&gt;(graph, AlgorithmExtensions.GetIndexer&lt;Edge&lt;<span style=\"color:blue\">string</span>&gt;, <span style=\"color:blue\">double</span>&gt;(edgeCost));\r\n\r\n            <span style=\"color:green\">// Attach a Vertex Predecessor Recorder Observer to give us the paths</span>\r\n            predecessorObserver = <span style=\"color:blue\">new</span> QuickGraph.Algorithms.Observers.VertexPredecessorRecorderObserver&lt;<span style=\"color:blue\">string</span>, Edge&lt;<span style=\"color:blue\">string</span>&gt;&gt;();\r\n            predecessorObserver.Attach(dijkstra);\r\n\r\n            <span style=\"color:green\">// attach a distance observer to give us the shortest path distances</span>\r\n            distObserver = <span style=\"color:blue\">new</span> VertexDistanceRecorderObserver&lt;<span style=\"color:blue\">string</span>, Edge&lt;<span style=\"color:blue\">string</span>&gt;&gt;(AlgorithmExtensions.GetIndexer&lt;Edge&lt;<span style=\"color:blue\">string</span>&gt;, <span style=\"color:blue\">double</span>&gt;(edgeCost));\r\n            distObserver.Attach(dijkstra);\r\n\r\n            homeNode = nodes[0];\r\n\r\n            <span style=\"color:green\">// Run the algorithm with A set to be the source</span>\r\n            dijkstra.Compute(homeNode);\r\n\r\n            <span style=\"color:blue\">foreach</span> (KeyValuePair&lt;<span style=\"color:blue\">string</span>, Edge&lt;<span style=\"color:blue\">string</span>&gt;&gt; kvp <span style=\"color:blue\">in</span> predecessorObserver.VertexPredecessors)\r\n            {\r\n                Console.WriteLine(<span style=\"color:#a31515\">&quot;If you want to get to {0} you have to enter through the in edge {1}&quot;</span>, kvp.Key, kvp.Value);\r\n\r\n\r\n            }\r\n\r\n            <span style=\"color:blue\">foreach</span> (KeyValuePair&lt;<span style=\"color:blue\">string</span>, <span style=\"color:blue\">double</span>&gt; kvp <span style=\"color:blue\">in</span> distObserver.Distances)\r\n                Console.WriteLine(<span style=\"color:#a31515\">&quot;Distance from root to node {0} is {1}&quot;</span>, kvp.Key, kvp.Value);\r\n\r\n<span style=\"color:green\">            //This is where i want to save the complete path to each node in a string of arrays </span>\r\n\r\n\r\n        }\r\n\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> setUpDikjstra()\r\n        {\r\n\r\n\r\n            <span style=\"color:blue\">foreach</span> (String str <span style=\"color:blue\">in</span> nodes)\r\n            {\r\n                graph.AddVertex(str);\r\n            }\r\n\r\n\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> setUpListOfNodes()\r\n        {\r\n            <span style=\"color:green\">//set up list of nodes  </span>\r\n            hn = ds.sqlQuery(<span style=\"color:#a31515\">&quot;SELECT nodeName FROM &quot;</span> + nodeTable + <span style=\"color:#a31515\">&quot; WHERE TYPE='home'&quot;</span>);\r\n            DataRow homeRow = hn.Rows[0];\r\n            homeNode = homeRow[0].ToString().Trim();\r\n\r\n\r\n            nodeList.Add(<span style=\"color:blue\">new</span> Node(homeNode, 0, <span style=\"color:blue\">null</span>, <span style=\"color:blue\">true</span>));\r\n\r\n            <span style=\"color:blue\">for</span> (<span style=\"color:blue\">int</span> i = 0; i &lt; nodes.Length; i++)\r\n            {\r\n                <span style=\"color:blue\">if</span> (nodes[i] == homeNode)\r\n                    <span style=\"color:blue\">continue</span>;\r\n\r\n\r\n                nodeList.Add(<span style=\"color:blue\">new</span> Node(nodes[i], 2147483647, <span style=\"color:blue\">null</span>));\r\n            }\r\n        }\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> getAllEdges()\r\n        {\r\n            dt = ds.sqlQuery(<span style=\"color:#a31515\">&quot;SELECT * FROM &quot;</span> + edgeTable + <span style=\"color:#a31515\">&quot; ORDER BY ID&quot;</span>);\r\n\r\n            <span style=\"color:blue\">int</span> k = 0;\r\n            edge = <span style=\"color:blue\">new</span> Edge&lt;<span style=\"color:blue\">string</span>&gt;[dt.Rows.Count];\r\n            <span style=\"color:blue\">foreach</span> (DataRow dr <span style=\"color:blue\">in</span> dt.Rows)\r\n            {\r\n\r\n                <span style=\"color:green\">// edge[k] = dr[&quot;id&quot;].ToString().Trim();</span>\r\n\r\n                edge[k] = <span style=\"color:blue\">new</span> Edge&lt;<span style=\"color:blue\">string</span>&gt;(dr[<span style=\"color:#a31515\">&quot;source&quot;</span>].ToString().Trim(), dr[<span style=\"color:#a31515\">&quot;target&quot;</span>].ToString().Trim());\r\n                k++;\r\n            }\r\n\r\n            <span style=\"color:blue\">foreach</span> (Edge&lt;<span style=\"color:blue\">string</span>&gt; addEdge <span style=\"color:blue\">in</span> edge)\r\n            {\r\n                graph.AddEdge(addEdge);\r\n            }\r\n\r\n            edgeCost = <span style=\"color:blue\">new</span> Dictionary&lt;Edge&lt;<span style=\"color:blue\">string</span>&gt;, <span style=\"color:blue\">double</span>&gt;(graph.EdgeCount);\r\n\r\n            <span style=\"color:blue\">foreach</span> (Edge&lt;<span style=\"color:blue\">string</span>&gt; addEdge <span style=\"color:blue\">in</span> edge)\r\n            {\r\n                edgeCost.Add(addEdge, 1);\r\n\r\n            }\r\n\r\n        }\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> getAllNodes()\r\n        {\r\n\r\n            dt = ds.sqlQuery(<span style=\"color:#a31515\">&quot;SELECT * FROM &quot;</span> + nodeTable + <span style=\"color:#a31515\">&quot; ORDER BY ID&quot;</span>);\r\n            nodes = <span style=\"color:blue\">new</span> String[dt.Rows.Count];\r\n            <span style=\"color:blue\">int</span> k = 0;\r\n            <span style=\"color:blue\">foreach</span> (DataRow dr <span style=\"color:blue\">in</span> dt.Rows)\r\n            {\r\n                <span style=\"color:green\">//Console.WriteLine(k);</span>\r\n                nodes[k] = dr[<span style=\"color:#a31515\">&quot;nodeName&quot;</span>].ToString().Trim();\r\n                Console.WriteLine(<span style=\"color:#a31515\">&quot;node# &quot;</span> +  k + <span style=\"color:#a31515\">&quot;_: &quot;</span>+nodes[k]);\r\n                k++;\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n\r\n</pre>\r\n</div>",
    "PostedDate": "2010-07-20T11:55:45.563-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]