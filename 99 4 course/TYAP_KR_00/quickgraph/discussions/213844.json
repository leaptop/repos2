[
  {
    "Id": "447358",
    "ThreadId": "213844",
    "Html": "<p>Hi there,</p>\r\n<p>I am trying to create a maze based on a bidirectional - graph. I have a grid of vertices and each vertex is connected with its neighbour.</p>\r\n<p>Example a 2x2 grid has 4 vertices and 8 edges</p>\r\n<p>I am using the CyclePoppingRandomTreeAlgorithm to generate random mazes based on a root node. The route to the root node can be traced from every vertex by traversing its successors.</p>\r\n<p>This works perfectly for the root node (0,0) and any random node from which we start to traceback to the root node. But if i select any other root node i.e (1,1) this node is somehow not connected to the graph any more. And the traceback will loop for ever.</p>\r\n<p>Maybe you can help me by implementing an random kruskal algorithm to generate randon mazes.</p>\r\n<p>Cheers and thanks in advance.</p>\r\n<p>Code-Based on this tutorial: http://blog.dotnetwiki.org/archive/2004/05/07/190.aspx</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre>        <span style=\"color:blue\">private</span> List&lt;Edge&lt;<span style=\"color:blue\">string</span>&gt;&gt; _pathToFinal;\r\n\r\n        <span style=\"color:blue\">private</span> BidirectionalGraph&lt;<span style=\"color:blue\">string</span>, Edge&lt;<span style=\"color:blue\">string</span>&gt;&gt; _graph;\r\n        <span style=\"color:blue\">private</span> IDictionary&lt;<span style=\"color:blue\">string</span>, Edge&lt;<span style=\"color:blue\">string</span>&gt;&gt; _successor;\r\n\r\n\r\n\r\n(...)\r\n\r\n\r\n<div style=\"color:black;background-color:white\"><pre>_graph = <span style=\"color:blue\">new</span> BidirectionalGraph&lt;<span style=\"color:blue\">string</span>, Edge&lt;<span style=\"color:blue\">string</span>&gt;&gt;(<span style=\"color:blue\">false</span>);\r\n            _grid = <span style=\"color:blue\">new</span> String[_row, _column];\r\n\r\n            <span style=\"color:green\">// add vertecies</span>\r\n\r\n\r\n            <span style=\"color:blue\">for</span> (<span style=\"color:blue\">int</span> i = 0; i &lt; _row; i++)\r\n            {\r\n                <span style=\"color:blue\">for</span> (<span style=\"color:blue\">int</span> j = 0; j &lt; _column; j++)\r\n                {\r\n                    _grid[i, j] = String.Format(<span style=\"color:#a31515\">&quot;{0},{1}&quot;</span>, i, j);\r\n                    _graph.AddVertex(_grid[i, j]);\r\n\r\n                }\r\n            }\r\n\r\n            <span style=\"color:green\">// add edges bidirectional</span>\r\n            <span style=\"color:blue\">for</span> (<span style=\"color:blue\">int</span> i = 0; i &lt; _row - 1; i++)\r\n            {\r\n                <span style=\"color:blue\">for</span> (<span style=\"color:blue\">int</span> j = 0; j &lt; _column - 1; j++)\r\n                {                   \r\n                    _graph.AddEdge(<span style=\"color:blue\">new</span> Edge&lt;<span style=\"color:blue\">string</span>&gt;(_grid[i, j], _grid[i, j + 1]));\r\n                    _graph.AddEdge(<span style=\"color:blue\">new</span> Edge&lt;<span style=\"color:blue\">string</span>&gt;(_grid[i, j + 1], _grid[i, j]));\r\n                    _graph.AddEdge(<span style=\"color:blue\">new</span> Edge&lt;<span style=\"color:blue\">string</span>&gt;(_grid[i, j], _grid[i + 1, j]));\r\n                    _graph.AddEdge(<span style=\"color:blue\">new</span> Edge&lt;<span style=\"color:blue\">string</span>&gt;(_grid[i + 1, j], _grid[i, j]));\r\n                    _graph.AddEdge(<span style=\"color:blue\">new</span> Edge&lt;<span style=\"color:blue\">string</span>&gt;(_grid[_row - 1, j], _grid[_row - 1, j + 1]));\r\n                    _graph.AddEdge(<span style=\"color:blue\">new</span> Edge&lt;<span style=\"color:blue\">string</span>&gt;(_grid[_row - 1, j + 1], _grid[_row - 1, j]));\r\n                    _graph.AddEdge(<span style=\"color:blue\">new</span> Edge&lt;<span style=\"color:blue\">string</span>&gt;(_grid[i, _column - 1], _grid[i + 1, _column - 1]));\r\n                    _graph.AddEdge(<span style=\"color:blue\">new</span> Edge&lt;<span style=\"color:blue\">string</span>&gt;(_grid[i + 1, _column - 1], _grid[i, _column - 1]));\r\n                }\r\n            }\r\n<br>(...)</pre>\r\n</div>\r\nCyclePoppingRandomTreeAlgorithm&lt;<span style=\"color:blue\">string</span>, Edge&lt;<span style=\"color:blue\">string</span>&gt;&gt; cprta = <span style=\"color:blue\">new</span> CyclePoppingRandomTreeAlgorithm&lt;<span style=\"color:blue\">string</span>, Edge&lt;<span style=\"color:blue\">string</span>&gt;&gt;(_graph);  <span style=\"color:green\"><br>// (0,0) works perfectly. any other root node will fail @ while loop</span> cprta.RandomTreeWithRoot(_grid[_endPoint.X, _endPoint.Y]);              <br>_successor = cprta.Successors;             <br> <span style=\"color:blue\">var</span> startEdge = _successor[_grid[_startPoint.X, _startPoint.Y]];             <br><span style=\"color:blue\">var</span> endEdge = _successor[_grid[_endPoint.X, _endPoint.Y]];              <br>_pathToFinal = <span style=\"color:blue\">new</span> List&lt;Edge&lt;<span style=\"color:blue\">string</span>&gt;&gt;();                           <span style=\"color:blue\"><br><br>while</span> (startEdge != endEdge)             <br>{                 Edge&lt;<span style=\"color:blue\">string</span>&gt; e = startEdge; <br><span style=\"color:green\">// if any other root node than (0,0) was selected it will loop 4ever or break with an memory exeeded exception</span> <br>_pathToFinal.Add(e);                <br> startEdge = _successor[e.Target];            <br> }</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2010-05-25T17:02:22.033-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]