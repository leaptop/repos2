[
  {
    "Id": "500915",
    "ThreadId": "229267",
    "Html": "<p>Hi,</p>\r\n<p>Please consider this example :</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre><span style=\"color:blue\">using</span> System.Collections.Generic;\r\n<span style=\"color:blue\">using</span> QuickGraph;\r\n<span style=\"color:blue\">using</span> QuickGraph.Algorithms;\r\n\r\n<span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> MyEdge : IEdge&lt;<span style=\"color:blue\">int</span>&gt;\r\n{\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">int</span> ID { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">int</span> Source { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">int</span> Target { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }\r\n    <span style=\"color:blue\">public</span> MyEdge(<span style=\"color:blue\">int</span> id, <span style=\"color:blue\">int</span> source, <span style=\"color:blue\">int</span> target)\r\n    {\r\n        Source = source;\r\n        Target = target;\r\n        ID = id;\r\n    }\r\n}\r\n\r\n<span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> Test\r\n{\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> test()\r\n    {\r\n        IEnumerable&lt;MyEdge&gt; resPath1 = <span style=\"color:blue\">null</span>;\r\n        IEnumerable&lt;MyEdge&gt; resPath2 = <span style=\"color:blue\">null</span>;\r\n\r\n        BidirectionalGraph&lt;<span style=\"color:blue\">int</span>, MyEdge&gt; g = <span style=\"color:blue\">new</span> BidirectionalGraph&lt;<span style=\"color:blue\">int</span>, MyEdge&gt;();\r\n        g.AddVertex(1);\r\n        g.AddVertex(2);\r\n        g.AddVertex(3);\r\n        g.AddEdge(<span style=\"color:blue\">new</span> MyEdge(89, 1, 2));\r\n        g.AddEdge(<span style=\"color:blue\">new</span> MyEdge(90, 2, 3));\r\n        <span style=\"color:blue\">int</span> vSource = 1;\r\n        <span style=\"color:blue\">int</span> vTarget = 3;\r\n\r\n        <span style=\"color:blue\">var</span> tryGetPath1 = AlgorithmExtensions.ShortestPathsDijkstra(g.ToArrayBidirectionalGraph(), e =&gt; 1, vSource);\r\n        tryGetPath1(vTarget, <span style=\"color:blue\">out</span> resPath1);\r\n\r\n        <span style=\"color:blue\">var</span> tryGetPath2 = AlgorithmExtensions.ShortestPathsDijkstra(g, e =&gt; 1, vSource);\r\n        tryGetPath2(vTarget, <span style=\"color:blue\">out</span> resPath2);\r\n\r\n        <span style=\"color:blue\">bool</span> ko = (resPath1 == <span style=\"color:blue\">null</span> &amp;&amp; resPath2 != <span style=\"color:blue\">null</span>) || (resPath1 != <span style=\"color:blue\">null</span> &amp;&amp; resPath2 == <span style=\"color:blue\">null</span>);\r\n\r\n        System.Diagnostics.Debugger.Break();\r\n    }\r\n}\r\n</pre>\r\n</div>\r\n<p>resPath1 and resPath2 should represent the same path but it's not the case : ShortestPathsDijkstra always return a null path when using ArrayBidirectionalGraph.</p>\r\n<p>Any idea ?<br>Thanks</p>",
    "PostedDate": "2010-10-01T02:58:27.28-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]