[
  {
    "Id": "197394",
    "ThreadId": "58367",
    "Html": "<p>First, I'd like to say how very useful I've found QuickGraph to be. Secondly, my question is this: Why is XmlWriter used to serialize to XML instead of XmlSerialier?</p>\r\n<p>&nbsp;</p>\r\n<p>Thanks,</p>\r\n<p>Reid</p>",
    "PostedDate": "2009-06-03T12:30:34.193-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "197465",
    "ThreadId": "58367",
    "Html": "<p>XmlSerializer is a 'general' xml-serialization framework for object types. Ultimately, it also uses a XmlWriter to produce the XML.</p>\r\n<p>QuickGraph has more efficient writers that take advantage of the structure of the graph.&nbsp;</p>",
    "PostedDate": "2009-06-03T14:58:28.84-07:00",
    "UserRole": "Owner",
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "197712",
    "ThreadId": "58367",
    "Html": "<p>Peli,</p>\r\n<p>Thanks for the prompt response, but how do I save the state of a vertex when I am serializing to XML then? Lets says that each vertex is a Person, how do I go about saving that Person's information, FirstName, LastName, BirthDate, ...? Can I pass a function to SerializeToXml() that will call a XmlSerializer on each Vertex?</p>\r\n<p>Thanks,</p>\r\n<p>Reid</p>",
    "PostedDate": "2009-06-04T05:56:35.957-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "197961",
    "ThreadId": "58367",
    "Html": "<p>XmlSerializer is not supported right now. You can annotate properties on the Vertex type with &nbsp;the XmlAttribute and they will be serialized in the xml stream. This works for simple datatypes (string, int,etc...)</p>",
    "PostedDate": "2009-06-04T14:58:57.76-07:00",
    "UserRole": "Owner",
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "198193",
    "ThreadId": "58367",
    "Html": "<p>Unfortunately this is not what appears to be happening. I have the attributes of my Person class decorated with [XmlAttribute], [XmlElement], and [XmlIgnore], but none of the Person objects are being serialized correctly.&nbsp; Sorry for the long reply, but I wanted you to have a proper repro. I am using Visual Studio 2008 with QuickGraph 3.2.40408.</p>\r\n<p>Thanks,</p>\r\n<p>Reid</p>\r\n<p>&nbsp;</p>\r\n<p>Person.cs</p>\r\n<pre>    using System;\r\n    using System.ComponentModel;\r\n    using System.Globalization;\r\n    using System.Text;\r\n    using System.Xml.Serialization;\r\n\r\n    #region Enumerations\r\n    /// \r\n    /// Enumeration of the person's gender\r\n    /// \r\n    public enum Gender\r\n    {\r\n        /// \r\n        /// Male gender.\r\n        /// \r\n        Male,\r\n\r\n        /// \r\n        /// Female gender.\r\n        /// \r\n        Female\r\n    }\r\n\r\n    /// \r\n    /// Enumeration of the person's age group\r\n    /// \r\n    public enum AgeGroup\r\n    {\r\n        /// \r\n        /// Unknown age group.\r\n        /// \r\n        Unknown,\r\n\r\n        /// \r\n        /// 0 to 20 age group.\r\n        /// \r\n        Youth,\r\n\r\n        /// \r\n        /// 20 to 40 age group.\r\n        /// \r\n        Adult,\r\n\r\n        /// \r\n        /// 40 to 65 age group.\r\n        /// \r\n        MiddleAge,\r\n\r\n        /// \r\n        /// Over 65 age group.\r\n        /// \r\n        Senior\r\n    }\r\n\r\n    #endregion\r\n\r\n    /// \r\n    /// Representation for a single serializable Person.\r\n    /// INotifyPropertyChanged allows properties of the Person class to\r\n    /// participate as source in data bindings.\r\n    /// \r\n    [Serializable]\r\n    public class Person : INotifyPropertyChanged, IEquatable, IDataErrorInfo\r\n    {\r\n        #region Fields and Constants\r\n\r\n        private const string DefaultFirstName = &quot;Unknown&quot;;\r\n        private string id;\r\n        private string firstName;\r\n        private string lastName;\r\n        private string middleName;\r\n        private string suffix;\r\n        private string nickName;\r\n        private string maidenName;\r\n        private Gender gender;\r\n        private DateTime? birthDate;\r\n        private string birthPlace;\r\n        private DateTime? deathDate;\r\n        private string deathPlace;\r\n        private bool isLiving;\r\n\r\n        #endregion\r\n\r\n        #region Constructors\r\n\r\n        /// \r\n        /// Initializes a new instance of the Person class.\r\n        /// Each new instance will be given a unique identifier.\r\n        /// This parameterless constructor is also required for serialization.\r\n        /// \r\n        public Person()\r\n        {\r\n            this.id = Guid.NewGuid().ToString();\r\n            this.firstName = DefaultFirstName;\r\n            this.isLiving = true;\r\n        }\r\n\r\n        /// \r\n        /// Initializes a new instance of the person class with the firstname and the lastname.\r\n        /// \r\n        /// &lt;param name=&quot;firstName&quot; /&gt;First name.\r\n        /// &lt;param name=&quot;lastName&quot; /&gt;Last name.\r\n        public Person(string firstName, string lastName)\r\n            : this()\r\n        {\r\n            // Use the first name if specified, if not, the default first name is used.\r\n            if (!string.IsNullOrEmpty(firstName))\r\n            {\r\n                this.firstName = firstName;\r\n            }\r\n\r\n            this.lastName = lastName;\r\n        }\r\n\r\n        /// \r\n        /// Initializes a new instance of the person class with the firstname, the lastname, and gender\r\n        /// \r\n        /// &lt;param name=&quot;firstName&quot; /&gt;First name.\r\n        /// &lt;param name=&quot;lastName&quot; /&gt;Last name.\r\n        /// &lt;param name=&quot;gender&quot; /&gt;Gender of the person.\r\n        public Person(string firstName, string lastName, Gender gender)\r\n            : this(firstName, lastName)\r\n        {\r\n            this.gender = gender;\r\n        }\r\n\r\n        #endregion\r\n\r\n        #region Properties\r\n\r\n        /// \r\n        /// Gets or sets the unique identifier for each person.\r\n        /// \r\n        [XmlAttribute]\r\n        public string Id\r\n        {\r\n            get\r\n            {\r\n                return this.id;\r\n            }\r\n\r\n            set\r\n            {\r\n                if (this.id != value)\r\n                {\r\n                    this.id = value;\r\n                    this.OnPropertyChanged(&quot;Id&quot;);\r\n                }\r\n            }\r\n        }\r\n\r\n        /// \r\n        /// Gets or sets the name that occurs first in a given name\r\n        /// \r\n        [XmlElement]\r\n        public string FirstName\r\n        {\r\n            get\r\n            {\r\n                return this.firstName;\r\n            }\r\n\r\n            set\r\n            {\r\n                if (this.firstName != value)\r\n                {\r\n                    this.firstName = value;\r\n                    this.OnPropertyChanged(&quot;FirstName&quot;);\r\n                    this.OnPropertyChanged(&quot;Name&quot;);\r\n                    this.OnPropertyChanged(&quot;FullName&quot;);\r\n                }\r\n            }\r\n        }\r\n\r\n        /// \r\n        /// Gets or sets the part of a given name that indicates what family the person belongs to. \r\n        /// \r\n        [XmlElement]\r\n        public string LastName\r\n        {\r\n            get\r\n            {\r\n                return this.lastName;\r\n            }\r\n\r\n            set\r\n            {\r\n                if (this.lastName != value)\r\n                {\r\n                    this.lastName = value;\r\n                    this.OnPropertyChanged(&quot;LastName&quot;);\r\n                    this.OnPropertyChanged(&quot;Name&quot;);\r\n                    this.OnPropertyChanged(&quot;FullName&quot;);\r\n                }\r\n            }\r\n        }\r\n\r\n        /// \r\n        /// Gets or sets the name that occurs between the first and last name.\r\n        /// \r\n        [XmlElement]\r\n        public string MiddleName\r\n        {\r\n            get\r\n            {\r\n                return this.middleName;\r\n            }\r\n\r\n            set\r\n            {\r\n                if (this.middleName != value)\r\n                {\r\n                    this.middleName = value;\r\n                    this.OnPropertyChanged(&quot;MiddleName&quot;);\r\n                    this.OnPropertyChanged(&quot;FullName&quot;);\r\n                }\r\n            }\r\n        }\r\n\r\n        /// \r\n        /// Gets the person's name in the format FirstName LastName.\r\n        /// \r\n        [XmlIgnore]\r\n        public string Name\r\n        {\r\n            get\r\n            {\r\n                string name = String.Empty;\r\n                if (!string.IsNullOrEmpty(this.firstName))\r\n                {\r\n                    name += this.firstName;\r\n                }\r\n\r\n                if (!string.IsNullOrEmpty(this.lastName))\r\n                {\r\n                    name += &quot; &quot; + this.lastName;\r\n                }\r\n\r\n                return name;\r\n            }\r\n        }\r\n\r\n        /// \r\n        /// Gets the person's fully qualified name: Firstname MiddleName LastName Suffix\r\n        /// \r\n        [XmlIgnore]\r\n        public string FullName\r\n        {\r\n            get\r\n            {\r\n                string fullName = String.Empty;\r\n                if (!string.IsNullOrEmpty(this.firstName))\r\n                {\r\n                    fullName += this.firstName;\r\n                }\r\n\r\n                if (!string.IsNullOrEmpty(this.middleName))\r\n                {\r\n                    fullName += &quot; &quot; + this.middleName;\r\n                }\r\n\r\n                if (!string.IsNullOrEmpty(this.lastName))\r\n                {\r\n                    fullName += &quot; &quot; + this.lastName;\r\n                }\r\n\r\n                if (!string.IsNullOrEmpty(this.suffix))\r\n                {\r\n                    fullName += &quot; &quot; + this.suffix;\r\n                }\r\n\r\n                return fullName;\r\n            }\r\n        }\r\n\r\n        /// \r\n        /// Gets or sets the text that appear behind the last name providing additional information about the person.\r\n        /// \r\n        [XmlElement]\r\n        public string Suffix\r\n        {\r\n\r\n            get\r\n            {\r\n                return this.suffix;\r\n            }\r\n\r\n            set\r\n            {\r\n                if (this.suffix != value)\r\n                {\r\n                    this.suffix = value;\r\n                    this.OnPropertyChanged(&quot;Suffix&quot;);\r\n                    this.OnPropertyChanged(&quot;FullName&quot;);\r\n                }\r\n            }\r\n        }\r\n\r\n        /// \r\n        /// Gets or sets the person's familiar or shortened name\r\n        /// \r\n        [XmlElement]\r\n        public string NickName\r\n        {\r\n            get\r\n            {\r\n                return this.nickName;\r\n            }\r\n\r\n            set\r\n            {\r\n                if (this.nickName != value)\r\n                {\r\n                    this.nickName = value;\r\n                    this.OnPropertyChanged(&quot;NickName&quot;);\r\n                }\r\n            }\r\n        }\r\n\r\n        /// \r\n        /// Gets or sets the person's name carried before marriage\r\n        /// \r\n        [XmlElement]\r\n        public string MaidenName\r\n        {\r\n            get\r\n            {\r\n                return this.maidenName;\r\n            }\r\n\r\n            set\r\n            {\r\n                if (this.maidenName != value)\r\n                {\r\n                    this.maidenName = value;\r\n                    this.OnPropertyChanged(&quot;MaidenName&quot;);\r\n                }\r\n            }\r\n        }\r\n\r\n        /// \r\n        /// Gets or sets the person's gender\r\n        /// \r\n        [XmlElement]\r\n        public Gender Gender\r\n        {\r\n            get\r\n            {\r\n                return this.gender;\r\n            }\r\n\r\n            set\r\n            {\r\n                if (this.gender != value)\r\n                {\r\n                    this.gender = value;\r\n                    this.OnPropertyChanged(&quot;Gender&quot;);\r\n                }\r\n            }\r\n        }\r\n\r\n        /// \r\n        /// Gets the age of the person.\r\n        /// \r\n        [XmlIgnore]\r\n        public int? Age\r\n        {\r\n            get\r\n            {\r\n                if (this.BirthDate == null)\r\n                {\r\n                    return null;\r\n                }\r\n\r\n                // Determine the age of the person based on just the year.\r\n                DateTime startDate = this.BirthDate.Value;\r\n                DateTime endDate = (this.IsLiving || this.DeathDate == null) ? DateTime.Now : this.DeathDate.Value;\r\n                int age = endDate.Year - startDate.Year;\r\n\r\n                // Compensate for the month and day of month (if they have not had a birthday this year).\r\n                if (endDate.Month &lt; startDate.Month || (endDate.Month == startDate.Month &amp;&amp; endDate.Day &lt; startDate.Day))\r\n                {\r\n                    age--;\r\n                }\r\n\r\n                return Math.Max(0, age);\r\n            }\r\n        }\r\n\r\n        /// \r\n        /// Gets the age of the person.\r\n        /// \r\n        [XmlIgnore]\r\n        public AgeGroup AgeGroup\r\n        {\r\n            get\r\n            {\r\n                AgeGroup ageGroup = AgeGroup.Unknown;\r\n\r\n                if (this.Age.HasValue)\r\n                {\r\n                    // The AgeGroup enumeration is defined later in this file. It is up to the Person\r\n                    // class to define the ages that fall into the particular age groups\r\n                    if (this.Age &gt;= 0 &amp;&amp; this.Age &lt; 20)\r\n                    {\r\n                        ageGroup = AgeGroup.Youth;\r\n                    }\r\n                    else if (this.Age &gt;= 20 &amp;&amp; this.Age &lt; 40)\r\n                    {\r\n                        ageGroup = AgeGroup.Adult;\r\n                    }\r\n                    else if (this.Age &gt;= 40 &amp;&amp; this.Age &lt; 65)\r\n                    {\r\n                        ageGroup = AgeGroup.MiddleAge;\r\n                    }\r\n                    else\r\n                    {\r\n                        ageGroup = AgeGroup.Senior;\r\n                    }\r\n                }\r\n\r\n                return ageGroup;\r\n            }\r\n        }\r\n\r\n        /// \r\n        /// Gets the year the person was born\r\n        /// \r\n        [XmlIgnore]\r\n        public string YearOfBirth\r\n        {\r\n            get\r\n            {\r\n                if (this.birthDate.HasValue)\r\n                {\r\n                    return this.birthDate.Value.Year.ToString(CultureInfo.CurrentCulture);\r\n                }\r\n                else\r\n                {\r\n                    return &quot;-&quot;;\r\n                }\r\n            }\r\n        }\r\n\r\n        /// \r\n        /// Gets the year the person died\r\n        /// \r\n        [XmlIgnore]\r\n        public string YearOfDeath\r\n        {\r\n            get\r\n            {\r\n                if (this.deathDate.HasValue &amp;&amp; !this.isLiving)\r\n                {\r\n                    return this.deathDate.Value.Year.ToString(CultureInfo.CurrentCulture);\r\n                }\r\n                else\r\n                {\r\n                    return &quot;-&quot;;\r\n                }\r\n            }\r\n        }\r\n\r\n        /// \r\n        /// Gets or sets the person's birth date.  This property can be null.\r\n        /// \r\n        [XmlElement]\r\n        public DateTime? BirthDate\r\n        {\r\n            get\r\n            {\r\n                return this.birthDate;\r\n            }\r\n\r\n            set\r\n            {\r\n                if (this.birthDate == null || this.birthDate != value)\r\n                {\r\n                    this.birthDate = value;\r\n                    this.OnPropertyChanged(&quot;BirthDate&quot;);\r\n                    this.OnPropertyChanged(&quot;Age&quot;);\r\n                    this.OnPropertyChanged(&quot;AgeGroup&quot;);\r\n                    this.OnPropertyChanged(&quot;YearOfBirth&quot;);\r\n                    this.OnPropertyChanged(&quot;BirthMonthAndDay&quot;);\r\n                    this.OnPropertyChanged(&quot;BirthDateAndPlace&quot;);\r\n                }\r\n            }\r\n        }\r\n\r\n        /// \r\n        /// Gets or sets the person's place of birth\r\n        /// \r\n        [XmlElement]\r\n        public string BirthPlace\r\n        {\r\n            get\r\n            {\r\n                return this.birthPlace;\r\n            }\r\n\r\n            set\r\n            {\r\n                if (this.birthPlace != value)\r\n                {\r\n                    this.birthPlace = value;\r\n                    this.OnPropertyChanged(&quot;BirthPlace&quot;);\r\n                    this.OnPropertyChanged(&quot;BirthDateAndPlace&quot;);\r\n                }\r\n            }\r\n        }\r\n\r\n        /// \r\n        /// Gets the month and day the person was born in. This property can be null.\r\n        /// \r\n        [XmlIgnore]\r\n        public string BirthMonthAndDay\r\n        {\r\n            get\r\n            {\r\n                if (this.birthDate == null)\r\n                {\r\n                    return null;\r\n                }\r\n                else\r\n                {\r\n                    return this.birthDate.Value.ToString(\r\n                        DateTimeFormatInfo.CurrentInfo.MonthDayPattern,\r\n                        CultureInfo.CurrentCulture);\r\n                }\r\n            }\r\n        }\r\n\r\n        /// \r\n        /// Gets a friendly string for BirthDate and Place\r\n        /// \r\n        [XmlIgnore]\r\n        public string BirthDateAndPlace\r\n        {\r\n            get\r\n            {\r\n                if (this.birthDate == null)\r\n                {\r\n                    return null;\r\n                }\r\n                else\r\n                {\r\n                    StringBuilder returnValue = new StringBuilder();\r\n                    returnValue.Append(&quot;Born &quot;);\r\n                    returnValue.Append(\r\n                        this.birthDate.Value.ToString(\r\n                            DateTimeFormatInfo.CurrentInfo.ShortDatePattern,\r\n                            CultureInfo.CurrentCulture));\r\n\r\n                    if (!string.IsNullOrEmpty(this.birthPlace))\r\n                    {\r\n                        returnValue.Append(&quot;, &quot;);\r\n                        returnValue.Append(this.birthPlace);\r\n                    }\r\n\r\n                    return returnValue.ToString();\r\n                }\r\n            }\r\n        }\r\n\r\n        /// \r\n        /// Gets or sets the person's death of death.  This property can be null.\r\n        /// \r\n        [XmlElement]\r\n        public DateTime? DeathDate\r\n        {\r\n            get\r\n            {\r\n                return this.deathDate;\r\n            }\r\n\r\n            set\r\n            {\r\n                if (this.deathDate == null || this.deathDate != value)\r\n                {\r\n                    this.IsLiving = false;\r\n                    this.deathDate = value;\r\n                    this.OnPropertyChanged(&quot;DeathDate&quot;);\r\n                    this.OnPropertyChanged(&quot;Age&quot;);\r\n                    this.OnPropertyChanged(&quot;YearOfDeath&quot;);\r\n                }\r\n            }\r\n        }\r\n\r\n        /// \r\n        /// Gets or sets the person's place of death\r\n        /// \r\n        [XmlElement]\r\n        public string DeathPlace\r\n        {\r\n            get\r\n            {\r\n                return this.deathPlace;\r\n            }\r\n\r\n            set\r\n            {\r\n                if (this.deathPlace != value)\r\n                {\r\n                    this.IsLiving = false;\r\n                    this.deathPlace = value;\r\n                    this.OnPropertyChanged(&quot;DeathPlace&quot;);\r\n                }\r\n            }\r\n        }\r\n\r\n        /// \r\n        /// Gets or sets a value indicating whether the person is still alive or deceased.\r\n        /// \r\n        [XmlElement]\r\n        public bool IsLiving\r\n        {\r\n            get\r\n            {\r\n                return this.isLiving;\r\n            }\r\n\r\n            set\r\n            {\r\n                if (this.isLiving != value)\r\n                {\r\n                    this.isLiving = value;\r\n                    this.OnPropertyChanged(&quot;IsLiving&quot;);\r\n                }\r\n            }\r\n        }\r\n\r\n        /// \r\n        /// Gets a string that describes this person to their parents.\r\n        /// \r\n        [XmlIgnore]\r\n        public string ParentRelationshipText\r\n        {\r\n            get\r\n            {\r\n                if (this.gender == Gender.Male)\r\n                {\r\n                    return &quot;Son&quot;;\r\n                }\r\n                else\r\n                {\r\n                    return &quot;Daughter&quot;;\r\n                }\r\n            }\r\n        }\r\n\r\n        /// \r\n        /// Gets a string that describes this person to their siblings.\r\n        /// \r\n        [XmlIgnore]\r\n        public string SiblingRelationshipText\r\n        {\r\n            get\r\n            {\r\n                if (this.gender == Gender.Male)\r\n                {\r\n                    return &quot;Brother&quot;;\r\n                }\r\n                else\r\n                {\r\n                    return &quot;Sister&quot;;\r\n                }\r\n            }\r\n        }\r\n\r\n        /// \r\n        /// Gets a string that describes this person to their spouses.\r\n        /// \r\n        [XmlIgnore]\r\n        public string SpouseRelationshipText\r\n        {\r\n            get\r\n            {\r\n                if (this.gender == Gender.Male)\r\n                {\r\n                    return &quot;Husband&quot;;\r\n                }\r\n                else\r\n                {\r\n                    return &quot;Wife&quot;;\r\n                }\r\n            }\r\n        }\r\n\r\n        /// \r\n        /// Gets a string that describes this person to their children.\r\n        /// \r\n        [XmlIgnore]\r\n        public string ChildRelationshipText\r\n        {\r\n            get\r\n            {\r\n                if (this.gender == Gender.Male)\r\n                {\r\n                    return &quot;Father&quot;;\r\n                }\r\n                else\r\n                {\r\n                    return &quot;Mother&quot;;\r\n                }\r\n            }\r\n        }\r\n\r\n        #endregion\r\n\r\n        #region INotifyPropertyChanged Members\r\n\r\n        /// \r\n        /// INotifyPropertyChanged requires a property called PropertyChanged.\r\n        /// \r\n        public event PropertyChangedEventHandler PropertyChanged;\r\n\r\n        /// \r\n        /// Fires the event for the property when it changes.\r\n        /// \r\n        /// &lt;param name=&quot;propertyName&quot; /&gt;Property name.\r\n        protected virtual void OnPropertyChanged(string propertyName)\r\n        {\r\n            if (this.PropertyChanged != null)\r\n            {\r\n                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));\r\n            }\r\n        }\r\n\r\n        #endregion\r\n\r\n        #region IEquatable Members\r\n\r\n        /// \r\n        /// Determine equality between two person classes\r\n        /// \r\n        /// &lt;param name=&quot;other&quot; /&gt;An object to compare with this object.\r\n        /// true if the current object is equal to the other parameter; otherwise, false. \r\n        public bool Equals(Person other)\r\n        {\r\n            return this.Id == other.Id;\r\n        }\r\n\r\n        #endregion\r\n\r\n        #region Methods\r\n\r\n        /// \r\n        /// Returns a String that represents the current Object.\r\n        /// \r\n        /// A String that represents the current Object.\r\n        public override string ToString()\r\n        {\r\n            return this.Name;\r\n        }\r\n\r\n        #endregion\r\n\r\n        #region IDataErrorInfo Members\r\n\r\n        /// \r\n        /// Gets an error message indicating what is wrong with this object.\r\n        /// \r\n        public string Error\r\n        {\r\n            get { return null; }\r\n        }\r\n\r\n        /// \r\n        /// Gets the error message for the property with the given name.\r\n        /// \r\n        /// &lt;param name=&quot;columnName&quot; /&gt;The name of the property whose error message to get.\r\n        /// The error message for the property. The default is an empty string (&quot;&quot;).\r\n        public string this[string columnName]\r\n        {\r\n            get\r\n            {\r\n                string result = String.Empty;\r\n\r\n                if (columnName == &quot;BirthDate&quot;)\r\n                {\r\n                    if (this.BirthDate == DateTime.MinValue)\r\n                    {\r\n                        result = &quot;This does not appear to be a valid date.&quot;;\r\n                    }\r\n                }\r\n\r\n                if (columnName == &quot;DeathDate&quot;)\r\n                {\r\n                    if (this.DeathDate == DateTime.MinValue)\r\n                    {\r\n                        result = &quot;This does not appear to be a valid date.&quot;;\r\n                    }\r\n                }\r\n\r\n                return result;\r\n            }\r\n        }\r\n\r\n        #endregion\r\n    }\r\n<br>Program.cs</pre>\r\n<pre>        static void Main(string[] args)\r\n        {\r\n            var graph = new AdjacencyGraph&lt;Person, TaggedEdge&lt;Person, String&gt;&gt;();\r\n\r\n            Person jacob = new Person(&quot;Jacob&quot;, &quot;Hochstetler&quot;)\r\n            {\r\n                BirthDate = new DateTime(1712, 01, 01),\r\n                BirthPlace = &quot;Alsace, France&quot;,\r\n                DeathDate = new DateTime(1776, 01, 01),\r\n                DeathPlace = &quot;Pennsylvania, USA&quot;,\r\n                Gender = Gender.Male\r\n            };\r\n\r\n            Person john = new Person(&quot;John&quot;, &quot;Hochstetler&quot;)\r\n            {\r\n                BirthDate = new DateTime(1735, 01, 01),\r\n                BirthPlace = &quot;Alsace, France&quot;,\r\n                DeathDate = new DateTime(1805, 04, 15),\r\n                DeathPlace = &quot;Summit Mills, PA&quot;,\r\n                Gender = Gender.Male\r\n            };\r\n\r\n            Person jonathon = new Person(&quot;Jonathon&quot;, &quot;Hochstetler&quot;)\r\n            {\r\n                BirthPlace = &quot;Pennsylvania&quot;,\r\n                DeathDate = new DateTime(1823, 05, 08),\r\n                Gender = Gender.Male,\r\n            };\r\n\r\n            Person emanuel = new Person(&quot;Emanuel&quot;, &quot;Hochstedler&quot;)\r\n            {\r\n                BirthDate = new DateTime(1855, 01, 01),\r\n                DeathDate = new DateTime(1900, 01, 01),\r\n                Gender = Gender.Male\r\n            };\r\n\r\n            graph.AddVerticesAndEdge(new TaggedEdge&lt;Person, string&gt;(jacob, john, jacob.ChildRelationshipText));\r\n            graph.AddVerticesAndEdge(new TaggedEdge&lt;Person, string&gt;(john, jonathon, john.ChildRelationshipText));\r\n            graph.AddVerticesAndEdge(new TaggedEdge&lt;Person, string&gt;(jonathon, emanuel, jonathon.ChildRelationshipText));\r\n\r\n            XmlWriterSettings settings = new XmlWriterSettings() { Indent = true, IndentChars = @&quot;    &quot; };\r\n            using (var writer = XmlWriter.Create(&quot;out.xml&quot;, settings))\r\n            {\r\n                graph.SerializeToXml(writer,\r\n                    v =&gt; v.Id,\r\n                    AlgorithmExtensions.GetEdgeIdentity(graph),\r\n                    &quot;graph&quot;, &quot;person&quot;, &quot;relationship&quot;, &quot;&quot;);\r\n            }\r\n        }\r\n</pre>",
    "PostedDate": "2009-06-05T06:21:31.453-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "198222",
    "ThreadId": "58367",
    "Html": "This discussion has been copied to a work item. Click <a href=\"http://quickgraph.codeplex.com/WorkItem/View.aspx?WorkItemId=13428\">here</a> to go to the work item and continue the discussion.",
    "PostedDate": "2009-06-05T07:00:51.75-07:00",
    "UserRole": "Owner",
    "MarkedAsAnswerDate": null
  }
]