[
  {
    "Id": "137939",
    "ThreadId": "41565",
    "Html": "Hi all,<br>\r\n&nbsp; I'm working on a small project to learn .NET 3.5 after transitioning from Java.&nbsp; I'm using the QuickGraph API to write a simple traveling management program.&nbsp; <br>\r\n<br>\r\nI'm using an AdjacencyGraph and a Dictionary for weighted edges for my graphs and distances.&nbsp; I can easily find the shortest path from x to y with the DijkstraShortestPathAlgorithm.&nbsp; <br>\r\n<br>\r\nI also want to give users the ability to pick a path even if its not the most efficient.&nbsp; I'm attempting to do this with the DepthFirstSearch and specifying the starting node.&nbsp; However, I'm having trouble with the callbacks and correctly determining all possible paths.&nbsp; I've taken a look at the DepthFirstSearchAlgorithmTest.cs file for some guidance, but its not helping.&nbsp; Is there an existing algorithm to do this?&nbsp; If not, any help would be greatly appreciated.<br>\r\n<br>\r\nThanks,<br>\r\nTodd<br>\r\n",
    "PostedDate": "2008-12-05T02:23:36.447-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "138202",
    "ThreadId": "41565",
    "Html": "What you want to do is to create a VertexPredecessorRecorderObserver, attach it to the DFS algorithm and 'Compute'. The recorder will store the map of precessor and provides API to extract paths.<br>\r\n<br>\r\n<span style=\"font-size:13px\">\r\n<p style=\"margin-right:0px\" dir=ltr>&nbsp;</p>\r\n</span>\r\n<p style=\"margin-right:0px\" dir=ltr><span style=\"color:#0000ff;font-size:13px\">var</span><span style=\"font-size:13px\"> predecessors = </span><span style=\"color:#0000ff;font-size:13px\">new</span><span style=\"font-size:13px\"> </span><span style=\"color:#2b91af;font-size:13px\">VertexPredecessorRecorderObserver</span><span style=\"font-size:13px\">&lt;TVertex, TEdge&gt;();<br>\r\n</span><span style=\"color:#0000ff;font-size:13px\">using</span><span style=\"font-size:13px\"> (</span><span style=\"color:#2b91af;font-size:13px\">ObserverScope</span><span style=\"font-size:13px\">.Create</span><span style=\"font-size:13px\">(dfs, predecessors))<br>\r\n    dfs.Compute();<br>\r\n<br>\r\nIEnumerable&lt;TEdge&gt; edges;<br>\r\nif(predecessors.TryGetPath(v, out edges))<br>\r\n    ...<br>\r\n</span><br>\r\nYou can also use the CyclePoppingRandomTree to efficiently cover a graph with a tree.</p>\r\n",
    "PostedDate": "2008-12-05T22:03:04.75-08:00",
    "UserRole": "Owner",
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "139320",
    "ThreadId": "41565",
    "Html": "Hi Boys,<div><br></div><div>please help me. How can I have all possible paths between two vertices using DFS algorithm?</div><div><br></div><div>How can I find them using <span style=\"font-family:'segoe ui';font-size:13px\">CyclePoppingRandomTree.</span></div><div><span style=\"font-family:'segoe ui';font-size:13px\"><br></span></div><div><span style=\"font-family:'segoe ui';font-size:13px\"><br></span></div><div><span style=\"font-family:'segoe ui';font-size:13px\">Thanks.</span></div>",
    "PostedDate": "2008-12-10T08:34:15.707-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "139418",
    "ThreadId": "41565",
    "Html": "Hi,<div><br></div><div>I need to find all shortest paths between two vertices, now to find them I iterate D<span style=\"white-space:pre;font-family:'lucida grande';font-size:12px\">ijkstra<span style=\"white-space:normal;font-family:'times new roman';font-size:16px\"> n-times deleting the prevoius path founded. </span></span></div><div><span style=\"white-space:normal;font-family:'times new roman';font-size:16px\">It' s too slow, can you say me if there'is something faster.</span></div><div><br></div><div>Thanks.</div><div><br></div><div><br></div><div>P.S.</div><div><br></div><div>Searching I found this Algo: <span style=\"font-family:'lucida grande';font-size:11px;white-space:pre\">K Shortest Paths</span></div><div><span style=\"font-family:'lucida grande';font-size:11px;white-space:pre\">Do you know?</span></div>",
    "PostedDate": "2008-12-10T12:08:59.433-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "139518",
    "ThreadId": "41565",
    "Html": "I used recursion and lists to build my paths.  If my current vertex equals my starting vertex, I push the list of verticies into my results, the remove the last vertex from my current path and return.  Eventually this covers all verticies from Vertex A to B, and it avoids duplicates.<br>\r\n<br><br><br><div>On Thu, Dec 11, 2008 at 9:09 AM, giomuti <span dir=ltr>&lt;<a href=\"mailto:notifications@codeplex.com\">notifications@codeplex.com</a>&gt;</span> wrote:<br><blockquote style=\"margin:0pt 0pt 0pt 0.8ex;padding-left:1ex\">\r\n   <div> <p>From: giomuti</p> <div>Hi,<div><br></div><div>I need to find all shortest paths between two vertices, now to find them I iterate D<span style=\"font-family:'lucida grande';font-size:12px;white-space:pre\">ijkstra<span style=\"font-family:'times new roman';font-size:16px;white-space:normal\"> n-times deleting the prevoius path founded. </span></span></div>\r\n<div><span style=\"font-family:'times new roman';font-size:16px;white-space:normal\">It' s too slow, can you say me if there'is something faster.</span></div><div><br></div><div>Thanks.</div></div><div>\r\n <div> <p>Read the <a href=\"http://www.codeplex.com/quickgraph/Thread/View.aspx?ThreadId=41565&ANCHOR#Post139418\">full discussion online</a>.</p> <p>To add a post to this discussion, reply to this email (<a href=\"mailto:quickgraph@discussions.codeplex.com?subject=[quickgraph:41565]\">quickgraph@discussions.codeplex.com</a>)</p>\r\n <p>To start a new discussion for this project, email <a href=\"mailto:quickgraph@discussions.codeplex.com\">quickgraph@discussions.codeplex.com</a></p> <p>You are receiving this email because you subscribed to this discussion on CodePlex. You can <a href=\"http://www.codeplex.com/site/discussions/thread/unsubscribe/41565\">unsubscribe</a> on codePlex.com.</p>\r\n <p>Please note: Images and attachments will be removed from emails. Any posts to this discussion will also be available online at <a href=\"http://codeplex.com\">codeplex.com</a></p> </div> </div></div> </blockquote>\r\n</div><br>",
    "PostedDate": "2008-12-10T17:48:53.807-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "139580",
    "ThreadId": "41565",
    "Html": "Can you post the code?Thanks..",
    "PostedDate": "2008-12-10T22:55:25.967-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "139591",
    "ThreadId": "41565",
    "Html": "Sorry, its code for work.  Do some searching of the forums.  You'll find an an algorithm that helped me, you'll just need to modify it to use the results from the Graph search.<br><br><div>On Thu, Dec 11, 2008 at 7:55 PM, giomuti <span dir=ltr>&lt;<a href=\"mailto:notifications@codeplex.com\">notifications@codeplex.com</a>&gt;</span> wrote:<br>\r\n<blockquote style=\"margin:0pt 0pt 0pt 0.8ex;padding-left:1ex\">   <div> <p>From: giomuti</p> <div>Can tou post the code?Thanks..</div><div> <div>\r\n <p>Read the <a href=\"http://www.codeplex.com/quickgraph/Thread/View.aspx?ThreadId=41565&ANCHOR#Post139580\">full discussion online</a>.</p> <p>To add a post to this discussion, reply to this email (<a href=\"mailto:quickgraph@discussions.codeplex.com?subject=[quickgraph:41565]\">quickgraph@discussions.codeplex.com</a>)</p>\r\n <p>To start a new discussion for this project, email <a href=\"mailto:quickgraph@discussions.codeplex.com\">quickgraph@discussions.codeplex.com</a></p> <p>You are receiving this email because you subscribed to this discussion on CodePlex. You can <a href=\"http://www.codeplex.com/site/discussions/thread/unsubscribe/41565\">unsubscribe</a> on codePlex.com.</p>\r\n <p>Please note: Images and attachments will be removed from emails. Any posts to this discussion will also be available online at <a href=\"http://codeplex.com\">codeplex.com</a></p> </div> </div></div> </blockquote>\r\n</div><br>",
    "PostedDate": "2008-12-11T00:13:23.887-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "139597",
    "ThreadId": "41565",
    "Html": "Is this the algorithm:<div><span style=\"font-family:'segoe ui';font-size:13px\"><p style=\"margin-top:1em;margin-bottom:1em\">public void FindPath(int S, int E, ArrayList Path)<br>{<br>if (S == E)<br>{<br>Path.Add(S);<br>AllPath.Add(new ArrayList(Path));<br>Path.RemoveAt(Path.Count - 1);<br>return;<br>}<br>if (Path.Contains(S))<br>return;</p><p style=\"margin-top:1em;margin-bottom:1em\">Path.Add(S);<br><br>var K = g.OutEdges(S).GetEnumerator();</p><p style=\"margin-top:1em;margin-bottom:1em\">while (K.MoveNext())<br>{<br>FindPath(K.Current.Target, E, Path);<br>}<br>Path.RemoveAt(Path.Count - 1);<br>}</p><p style=\"margin-top:1em;margin-bottom:1em\">I' ve posted that. It's too slow for my <span style=\"font-family:'lucida grande';font-size:11px;white-space:pre\">adjacency graph.</span></p><p style=\"margin-top:1em;margin-bottom:1em\">Someone knows k Shortest paths algo?</p></span></div>",
    "PostedDate": "2008-12-11T00:27:52.343-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "139599",
    "ThreadId": "41565",
    "Html": "K-shortest path are not implemented in QuickGraph. There are numerous papers describing various algorithms. All of them are non-trivial to implement.\r\n",
    "PostedDate": "2008-12-11T00:38:15.39-08:00",
    "UserRole": "Owner",
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "139922",
    "ThreadId": "41565",
    "Html": "Correct.<br><br><div>On Thu, Dec 11, 2008 at 9:27 PM, giomuti <span dir=ltr>&lt;<a href=\"mailto:notifications@codeplex.com\">notifications@codeplex.com</a>&gt;</span> wrote:<br><blockquote style=\"margin:0pt 0pt 0pt 0.8ex;padding-left:1ex\">\r\n   <div> <p>From: giomuti</p> <div>Is this the algorithm:<div><span style=\"font-family:'segoe ui';font-size:13px\"><p style=\"margin-top:1em;margin-bottom:1em\">public void FindPath(int S, int E, ArrayList Path)<br>\r\n{<br>if (S == E)<br>{<br>Path.Add(S);<br>AllPath.Add(new ArrayList(Path));<br>Path.RemoveAt(Path.Count - 1);<br>return;<br>}<br>if (Path.Contains(S))<br>return;</p><p style=\"margin-top:1em;margin-bottom:1em\">Path.Add(S);<br>\r\n<br>var K = g.OutEdges(S).GetEnumerator();</p><p style=\"margin-top:1em;margin-bottom:1em\">while (K.MoveNext())<br>{<br>FindPath(K.Current.Target, E, Path);<br>}<br>Path.RemoveAt(Path.Count - 1);<br>}</p><p style=\"margin-top:1em;margin-bottom:1em\">\r\nI' ve posted that. It's too slow for my <span style=\"font-family:'lucida grande';font-size:11px;white-space:pre\">adjacency graph.</span></p><p style=\"margin-top:1em;margin-bottom:1em\">Someone knows k Shortest paths algo?</p>\r\n</span></div></div><div> <div> <p>Read the <a href=\"http://www.codeplex.com/quickgraph/Thread/View.aspx?ThreadId=41565&ANCHOR#Post139597\">full discussion online</a>.</p> <p>To add a post to this discussion, reply to this email (<a href=\"mailto:quickgraph@discussions.codeplex.com?subject=[quickgraph:41565]\">quickgraph@discussions.codeplex.com</a>)</p>\r\n <p>To start a new discussion for this project, email <a href=\"mailto:quickgraph@discussions.codeplex.com\">quickgraph@discussions.codeplex.com</a></p> <p>You are receiving this email because you subscribed to this discussion on CodePlex. You can <a href=\"http://www.codeplex.com/site/discussions/thread/unsubscribe/41565\">unsubscribe</a> on codePlex.com.</p>\r\n <p>Please note: Images and attachments will be removed from emails. Any posts to this discussion will also be available online at <a href=\"http://codeplex.com\">codeplex.com</a></p> </div> </div></div> </blockquote>\r\n</div><br>",
    "PostedDate": "2008-12-11T19:49:53.907-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "140311",
    "ThreadId": "41565",
    "Html": "Hi,<br>\r\n<br>\r\nsomething new about k-th shortest paths?<br>\r\n<br>\r\nThanks you for your <span style=\"word-spacing:0px;font:16px -webkit-monospace;text-transform:none;color:rgb(0,0,0);text-indent:0px;letter-spacing:normal;border-collapse:separate\">patience.<br>\r\n<br>\r\nBye.</span>\r\n",
    "PostedDate": "2008-12-13T14:44:56.06-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "140321",
    "ThreadId": "41565",
    "Html": "k-th shortest path is a hard problem. It's not clear when I will have the time to implement something for it.\r\n",
    "PostedDate": "2008-12-13T17:06:22.33-08:00",
    "UserRole": "Owner",
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "140361",
    "ThreadId": "41565",
    "Html": "ok, thanks.<div><br></div><div><br></div>",
    "PostedDate": "2008-12-14T02:00:46.123-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "144523",
    "ThreadId": "41565",
    "Html": "k-shortest path have been implemented in quickgraph. See HoffmanPavley algorithm.\r\n",
    "PostedDate": "2009-01-05T13:52:59.643-08:00",
    "UserRole": "Owner",
    "MarkedAsAnswerDate": null
  }
]