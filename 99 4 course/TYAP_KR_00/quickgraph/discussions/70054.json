[
  {
    "Id": "238634",
    "ThreadId": "70054",
    "Html": "<p>Hi...&nbsp; I'm a QuickGraph newbie, so hopefully the question makes sense.</p>\r\n<p>&nbsp;</p>\r\n<p>I have a list of custom edges that I&rsquo;ve defined like this:</p>\r\n<p>&nbsp;</p>\r\n<p><span style=\"font-size:10pt\">&nbsp;&nbsp;&nbsp; <span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> <span style=\"color:#2b91af\">PluginEdge</span> : <span style=\"color:#2b91af\">IEdge</span>&lt;<span style=\"color:#2b91af\">PluginVertex</span>&gt;</span></p>\r\n<p><span style=\"font-size:10pt\">&nbsp;&nbsp;&nbsp; {</span></p>\r\n<p><span style=\"font-size:10pt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:blue\">public</span> <span style=\"color:#2b91af\">PluginVertex</span> Importer { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }</span></p>\r\n<p><span style=\"font-size:10pt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:blue\">public</span> <span style=\"color:#2b91af\">PluginVertex</span> Exporter { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }</span></p>\r\n<p><span style=\"font-size:10pt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:blue\">public</span> <span style=\"color:blue\">string</span> Contract { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }</span></p>\r\n<p><span style=\"font-size:10pt\">&nbsp;</span></p>\r\n<p><span style=\"color:blue;font-size:10pt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #region</span><span style=\"font-size:10pt\"> IEdge&lt;PluginVertex&gt; Members</span></p>\r\n<p><span style=\"font-size:10pt\">&nbsp;</span></p>\r\n<p><span style=\"font-size:10pt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:#2b91af\">PluginVertex</span> <span style=\"color:#2b91af\">IEdge</span>&lt;<span style=\"color:#2b91af\">PluginVertex</span>&gt;.Source</span></p>\r\n<p><span style=\"font-size:10pt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>\r\n<p><span style=\"font-size:10pt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> Importer; }</span></p>\r\n<p><span style=\"font-size:10pt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>\r\n<p><span style=\"font-size:10pt\">&nbsp;</span></p>\r\n<p><span style=\"font-size:10pt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:#2b91af\">PluginVertex</span> <span style=\"color:#2b91af\">IEdge</span>&lt;<span style=\"color:#2b91af\">PluginVertex</span>&gt;.Target</span></p>\r\n<p><span style=\"font-size:10pt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>\r\n<p><span style=\"font-size:10pt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> Exporter; }</span></p>\r\n<p><span style=\"font-size:10pt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>\r\n<p><span style=\"font-size:10pt\">&nbsp;</span></p>\r\n<p><span style=\"color:blue;font-size:10pt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #endregion</span></p>\r\n<p><span style=\"font-size:10pt\">&nbsp;&nbsp;&nbsp; }</span></p>\r\n<p><span style=\"font-size:10pt\">&nbsp;</span></p>\r\n<p>And I create an adjacency graph from a list of these (called _allEdges) like so:</p>\r\n<p>&nbsp;</p>\r\n<p><span style=\"font-size:10pt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:blue\">var</span> graph = _allEdges.ToAdjacencyGraph&lt;<span style=\"color:#2b91af\">PluginVertex</span>, <span style=\"color:#2b91af\">PluginEdge</span>&gt;();</span></p>\r\n<p>&nbsp;</p>\r\n<p>In my data set, it happens that all of the edges in _allEdges (there are 401) have a source and a target that are picked from a bag of 65 PluginVertex classes.&nbsp; But the resulting graph has a VertexCount of 121.&nbsp; So somehow the ToAdjacencyGraph() replicated vertices into it.</p>\r\n<p>&nbsp;</p>\r\n<p>What I did next was just make a simple graph with int-valued vertices, and SEdge&lt;int&gt; edges, and populated it with the exact same data set/connectivity.&nbsp; The resulting adjacency graph there was what I expected:&nbsp; a VertexCount of 65, not the 121 I saw above.</p>\r\n<p>&nbsp;</p>\r\n<p>Any idea what&rsquo;s going on?&nbsp; Is this because of use of classes and not structs?&nbsp; Or do I need to implement an IComparable/IEquatable/I??? somewhere on my PluginVertex or PluginEdge to somehow prevent this replication of vertices?&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>I can certainly work around the issue by going with int&rsquo;s only and maintaining lookaside tables, but it seems much cleaner for me to have the graph store my actual data structures.</p>\r\n<p>&nbsp;</p>\r\n<p>Another possible hint: my data really has a cycle in it.&nbsp; But the AdjacencyGraph I create with PluginVertex/PluginEdge says that graph.IsDirectedAcyclicGraph is true.&nbsp; With the 'int' version, this returns false, as I'd expect.&nbsp; Making me believe further that there's an IComparable thing going on here, or some object equality issue.</p>\r\n<p>Thanks!</p>\r\n<p>&nbsp;</p>\r\n<p>Greg</p>",
    "PostedDate": "2009-09-24T22:24:16.47-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "238641",
    "ThreadId": "70054",
    "Html": "<p>Nevermind :-).&nbsp; Figured it out.&nbsp; Needed to implement Object.Equals and Object.HashCode on my PluginVertex.&nbsp; I hadn't expected to do that, as I had created all the instances to PluginVertex myself and they were all unique... but somehow/somewhere they are getting cloned into separate references...&nbsp; don't understand, but I'm not worrying about it :-).</p>",
    "PostedDate": "2009-09-24T23:06:00.45-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]