[
  {
    "Id": "245946",
    "ThreadId": "72072",
    "Html": "<p>Hi !</p>\r\n<p>&nbsp;</p>\r\n<p>I'm new to FloydWarshallAllShortestPathAlgorithm...</p>\r\n<p>&nbsp;</p>\r\n<p>Could anyone please give me an example how to use FloydWarshallAllShortestPathAlgorithm?</p>\r\n<p>&nbsp;</p>\r\n<p>What I have:</p>\r\n<p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre>            <span style=\"color:Green\">/*\r\n             *     Easy creation with extension methods\r\n             *     QuickGraph provides several extension methods in QuickGraph.GraphExtensions to create graph from list of edge or vertices. For example, from an IEnumerable&lt;Edge&lt;int&gt;&gt;\r\n             */</span>\r\n            <span style=\"color:Blue\">var</span> edges = <span style=\"color:Blue\">new</span> SEdge&lt;<span style=\"color:Blue\">int</span>&gt;[] { <span style=\"color:Blue\">new</span> SEdge&lt;<span style=\"color:Blue\">int</span>&gt;(1, 2), <span style=\"color:Blue\">new</span> SEdge&lt;<span style=\"color:Blue\">int</span>&gt;(0, 1) };\r\n            <span style=\"color:Blue\">var</span> graph = edges.ToAdjacencyGraph&lt;<span style=\"color:Blue\">int</span>, SEdge&lt;<span style=\"color:Blue\">int</span>&gt;&gt;(edges);\r\n\r\n            <span style=\"color:Green\">/*\r\n             * Create a graph instance\r\n             * Let us assume we need integer vertices and edges tagged with string. Int is the vertex type and we can use the MarkedEdge generic type for the edge type:\r\n             *\r\n                * TVertex type: int\r\n                * TEdge type using TaggedEdge&lt;Vertex,Marker&gt;: TaggedEdge&lt;int, string&gt;\r\n             */</span>\r\n            <span style=\"color:Blue\">var</span> g = <span style=\"color:Blue\">new</span> AdjacencyGraph&lt;<span style=\"color:Blue\">int</span>, TaggedEdge&lt;<span style=\"color:Blue\">int</span>, <span style=\"color:Blue\">string</span>&gt;&gt;();\r\n\r\n            <span style=\"color:Green\">//Dictionary&lt;int, int[]&gt; dic = ...; // vertex -&gt; target edges</span>\r\n            <span style=\"color:Green\">/*\r\n            var graph = dic.ToVertexAndEdgeListGraph(\r\n                kv =&gt; Array.ConvertAll(kv.Value, v =&gt; new SEquatableEdge&lt;int&gt;(kv.Key, v))\r\n                );\r\n             */</span>\r\n\r\n            <span style=\"color:Green\">/*\r\n             * Adding vertices\r\n             * This snippet creates two vertices and adds them to the graph.\r\n             */</span>\r\n            <span style=\"color:Blue\">int</span> v1 = 1;\r\n            <span style=\"color:Blue\">int</span> v2 = 2;\r\n\r\n            g.AddVertex(v1);\r\n            g.AddVertex(v2);\r\n\r\n            <span style=\"color:Green\">/*\r\n             * Adding edges\r\n             * The edges (v1,v2) and (v2,v1) are created and added to the graph.\r\n            */</span>\r\n            <span style=\"color:Blue\">var</span> e1 = <span style=\"color:Blue\">new</span> TaggedEdge&lt;<span style=\"color:Blue\">int</span>,<span style=\"color:Blue\">string</span>&gt;(v1,v2,<span style=\"color:#A31515\">&quot;hello&quot;</span>);\r\n\r\n            g.AddEdge(e1);\r\n\r\n            <span style=\"color:Green\">/*\r\n             * Adding edges (and vertices)\r\n             * You can also add an edge and implicitely add the vertices if they are missing\r\n             */</span>\r\n            <span style=\"color:Green\">// v3, v4 are not added to the graph yet</span>\r\n            <span style=\"color:Blue\">int</span> v3 = 3;\r\n            <span style=\"color:Blue\">int</span> v4 = 4;\r\n            <span style=\"color:Blue\">var</span> e2 = <span style=\"color:Blue\">new</span> TaggedEdge&lt;<span style=\"color:Blue\">int</span>,<span style=\"color:Blue\">string</span>&gt;(v3,v4,<span style=\"color:#A31515\">&quot;hello&quot;</span>);\r\n\r\n            g.AddVerticesAndEdge(e2);\r\n\r\n            TaggedEdge&lt;<span style=\"color:Blue\">int</span>, <span style=\"color:Blue\">string</span>&gt;[] arr = <span style=\"color:Blue\">new</span> TaggedEdge&lt;<span style=\"color:Blue\">int</span>, <span style=\"color:Blue\">string</span>&gt;[2];\r\n            arr[0] = e1;\r\n            arr[1] = e2;\r\n<br>            <span style=\"color:Green\">// Run</span>\r\n            <span style=\"color:Blue\">var</span> weights = e  ; <span style=\"color:Green\">// a function that maps TEdge -&gt; double</span>\r\n            <span style=\"color:Blue\">var</span> fw = <span style=\"color:Blue\">new</span> FloydWarshallAllShortestPathAlgorithm&lt;<span style=\"color:Blue\">int</span>, TaggedEdge&lt;<span style=\"color:Blue\">int</span>, <span style=\"color:Blue\">string</span>&gt;&gt;(g, arr);\r\n            <span style=\"color:Green\">&nbsp;</span> \r\n            <span style=\"color:Green\">// compute</span>\r\n            fw.Compute();\r\n             \r\n            <span style=\"color:Green\">// get interresting paths,</span>\r\n            <span style=\"color:Blue\">foreach</span>(<span style=\"color:Blue\">var</span> source <span style=\"color:Blue\">in</span> g.Vertices)\r\n                <span style=\"color:Blue\">foreach</span>(<span style=\"color:Blue\">var</span> target <span style=\"color:Blue\">in</span> g.Vertices)\r\n                {\r\n                    IEnumerable&lt;TEdge&gt; path;\r\n                    <span style=\"color:Blue\">if</span>(fw.TryGetPath(source, target, <span style=\"color:Blue\">out</span> path)\r\n                        <span style=\"color:Blue\">foreach</span>(<span style=\"color:Blue\">var</span> edge <span style=\"color:Blue\">in</span> path)\r\n                            Console.WriteLine(edge);\r\n                }\r\n\r\n</pre>\r\n</div>\r\n</p>\r\n<p>But it doesn't work ! :(</p>\r\n<p>This line is the first problem:</p>\r\n<pre><span style=\"color:Blue\">var</span> graph = edges.ToAdjacencyGraph&lt;<span style=\"color:Blue\">int</span>, SEdge&lt;<span style=\"color:Blue\">int</span>&gt;&gt;(edges); <br></pre>\r\n<p>&nbsp;</p>\r\n<p>The second is:</p>\r\n<pre><span style=\"color:Blue\">var</span> fw = <span style=\"color:Blue\">new</span> FloydWarshallAllShortestPathAlgorithm&lt;<span style=\"color:Blue\">int</span>, TaggedEdge&lt;<span style=\"color:Blue\">int</span>, <span style=\"color:Blue\">string</span>&gt;&gt;(g, arr);<br><br><br>Thanks for your help! :)<br>Marco<br></pre>",
    "PostedDate": "2009-10-15T02:57:57.45-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "247278",
    "ThreadId": "72072",
    "Html": "<p>hello, im not too sure about what you try to do but if you want to use this algorith you can simply do the following:</p>\r\n<p>static void Main(string[] args)<br>{<br>&nbsp;var edges = new SEdge&lt;int&gt;[] { new SEdge&lt;int&gt;(1, 2), new SEdge&lt;int&gt;(0, 1) };<br>&nbsp;&nbsp; <br>&nbsp;var g = new AdjacencyGraph&lt;int, TaggedEdge&lt;int, string&gt;&gt;();</p>\r\n<p>&nbsp;const int v1 = 1;g.AddVertex(v1);<br>&nbsp;const int v2 = 2;g.AddVertex(v2);</p>\r\n<p>&nbsp;&nbsp; // Adding edges<br>&nbsp;var e1 = new TaggedEdge&lt;int,string&gt;(v1,v2,&quot;hello&quot;);<br>&nbsp;g.AddEdge(e1);</p>\r\n<p>&nbsp;// Run<br>&nbsp;var fw = new FloydWarshallAllShortestPathAlgorithm&lt;int, TaggedEdge&lt;int, string&gt;&gt;(g, e=&gt;1);<br>&nbsp;&nbsp; <br>&nbsp;// compute<br>&nbsp;fw.Compute();<br>&nbsp; <br>&nbsp;// get interresting paths,<br>&nbsp;foreach(var source in g.Vertices)<br>&nbsp;&nbsp;foreach(var target in g.Vertices)<br>&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;IEnumerable&lt;TaggedEdge&lt;int,string&gt;&gt; path;<br>&nbsp;&nbsp;&nbsp;if(fw.TryGetPath(source, target, out path))</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;foreach(var edge in path)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console.WriteLine(edge);<br>&nbsp;&nbsp;}<br>&nbsp;Console.WriteLine(&quot;Press &lt;ENTER&gt; to complete&quot;);<br>&nbsp;Console.ReadKey();</p>\r\n<p>}</p>\r\n<p>i hope it help</p>",
    "PostedDate": "2009-10-19T07:08:56.733-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "249315",
    "ThreadId": "72072",
    "Html": "<p>Hi graphTest!</p>\r\n<p>&nbsp;</p>\r\n<p>Thanks a lot for your reply.</p>\r\n<p>&nbsp;</p>\r\n<p>My problem is how to assign a weight to a link.</p>\r\n<p>&nbsp;</p>\r\n<p>E.g:</p>\r\n<p>Edge 1-2 : Weight 1,3</p>\r\n<p>Edge 2-3: Weight 2,1</p>\r\n<p>Edge 3-1: Weight: 3</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Green\">// Run</span>\r\n <span style=\"color:Blue\">var</span> fw = <span style=\"color:Blue\">new</span> FloydWarshallAllShortestPathAlgorithm&lt;<span style=\"color:Blue\">int</span>, TaggedEdge&lt;<span style=\"color:Blue\">int</span>, <span style=\"color:Blue\">string</span>&gt;&gt;(g, <span style=\"color:#ff0000\">e=&gt;1</span>);<br></pre>\r\n</div>\r\n<p>If I'm right this Method uses a weight of &quot;1&quot; (e =&gt; 1) for each egde.</p>\r\n<p>&nbsp;</p>\r\n<p>How can I assign the weight to the edge?</p>\r\n<p>&nbsp;</p>\r\n<p>Have I to use this method</p>\r\n<p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Green\">// Adding edges</span>\r\n<pre><span style=\"color:Blue\">var</span> e2 = <span style=\"color:Blue\">new</span> TaggedEdge&lt;<span style=\"color:Blue\">int</span>, <span style=\"color:Blue\">double</span>&gt;(v1, v2, 1.4);\r\n</pre>\r\n</pre>\r\n</div>\r\n</p>\r\n<p>&nbsp;</p>\r\n<p>Thanks,</p>\r\n<p>Marco</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-10-24T11:29:38.4-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]