import numpy as np
import pandas as pd
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
from sklearn import metrics
from sklearn.impute import SimpleImputer

dataset = pd.read_csv('heart_data.csv')  #читает файл
dataset.head() #голову ( первые штук 5 заипсей их таблицы )
X = dataset.loc[:, 'age':'thal'] #в X записываются все строки таблицы и все колонки от age до thal
y = dataset['goal'] #берёт один столбец goal (1 - болен, 0 - нет )
X = X.replace('?', np.nan) #заменяет все вопросы на np.nan
y = y.replace('?', np.nan) #заменяет все вопросы на np.nan
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3) #делит данные в таблице на 
данные на которых программа будет обучаться, и на которых будет тестироваться, обучение будет на 70% таблицы, а тест на 30
imputer = SimpleImputer() #объект для заполнения пустых значений, заполняет средним значением по всему столбцу
X_train = imputer.fit_transform(X_train) #заменяет в тренировочной выборке пустые значения на средние
clf = DecisionTreeClassifier() #создаётся дерево решений и получается
clf.fit(X_train, y_train) #тренирует дерево Хtrain - данные которые нужно анализировать, а у траин ответы которые
должны получиться
X_test = imputer.transform(X_test) #на тестовой выборке заменяются пустые значения
y_pred = clf.predict(X_test) #предсказанные значения
print(clf.score(X_train, y_train)) #сколько процентов она выдаст на этих данных, на тренировочной выборке
print(clf.score(X_test, y_test)) #тоже самое на тестовой выборке
print(y_pred) #вывод

в выводе 180 чисел - это 30% от 597 строк вводных данных. Т.е. тестовые данные.

загрузить отзыв 
встречаемость слов
анализ на тексте отзыва

проанализировать отзыв

горсков дмитрий