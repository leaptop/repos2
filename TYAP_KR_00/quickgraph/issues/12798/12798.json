{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "",
    "ClosedDate": "2009-03-17T12:27:41.947-07:00",
    "CommentCount": 0,
    "Custom": null,
    "Description": "For graphs with large amount of vertices method QuickGraph.Algorithms.RandomGraphFactory.Create works slow. I think it would be better to store indexes of created vertices to make access faster. Here the code\n        public static void Create<TVertex, TEdge>(\n            IMutableVertexAndEdgeListGraph<TVertex, TEdge> g,\n            VertexFactory<TVertex> vertexFactory,\n            EdgeFactory<TVertex, TEdge> edgeFactory,\n            Random rnd,\n            int vertexCount,\n            int edgeCount,\n            bool selfEdges\n            ) where TEdge : IEdge<TVertex>\n        {\n            if (g == null)\n                throw new ArgumentNullException(\"g\");\n            if (vertexFactory == null)\n                throw new ArgumentNullException(\"vertexFactory\");\n            if (edgeFactory == null)\n                throw new ArgumentNullException(\"edgeFactory\");\n            if (rnd == null)\n                throw new ArgumentNullException(\"random generator\");\n \n            IList<TVertex> accessor = new List<TVertex>(vertexCount);\n \n            TVertex newVertex;\n            for (int i = 0; i < vertexCount; ++i)\n            {\n                newVertex = vertexFactory();\n                g.AddVertex(newVertex);\n                accessor.Add(newVertex);\n            }\n \n \n            TVertex a;\n            TVertex b;\n            int j = 0;\n            while (j < edgeCount)\n            {\n                a = accessor[rnd.Next(g.VertexCount)];\n                do\n                {\n                    b = accessor[rnd.Next(g.VertexCount)];\n                }\n                while (selfEdges == false && a.Equals(b));\n \n                if (g.AddEdge(edgeFactory(a, b)))\n                    ++j;\n            }\n        }\nDifference rise for graphs with more than 1000 vertices.",
    "LastUpdatedDate": "2013-05-16T04:59:21.707-07:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "quickgraph",
    "ReportedDate": "2009-03-12T05:48:10.99-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "Unassigned"
    },
    "Summary": "RandomGraphFactory performance",
    "Type": {
      "Name": "Issue",
      "Id": 3
    },
    "VoteCount": 1,
    "Id": 12798
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "Resolved with changeset 32287.",
      "PostedDate": "2009-03-17T12:27:41.947-07:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2013-02-21T17:44:49.44-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2013-05-16T04:59:21.707-07:00",
      "Id": -2147483648
    }
  ]
}