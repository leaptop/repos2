{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "",
    "ClosedDate": null,
    "CommentCount": 0,
    "Custom": null,
    "Description": "QuickGraph.Algorithms.Condensation.CondensationGraphAlgorithm fails on Compute() for weaklyconnected components if input is a graph containing Vertices without edges \n \n[Test]\npublic void TestWeaklyConnectedComponents()\n{\n\tvar graph = new BidirectionalGraph<int, Edge<int>>();\n\tgraph.AddVerticesAndEdge(new Edge<int>(1, 2));\n\tgraph.AddVerticesAndEdge(new Edge<int>(2, 3));\n\tgraph.AddVerticesAndEdge(new Edge<int>(4, 5));\n\tgraph.AddVerticesAndEdge(new Edge<int>(4, 6));\n\tgraph.AddVerticesAndEdge(new Edge<int>(7, 1));\n\t//graph.AddVertex(8);  // uncomment me to reproduce error\n \n\tvar condensed = new QuickGraph.Algorithms.Condensation.CondensationGraphAlgorithm<int, Edge<int>, BidirectionalGraph<int, Edge<int>>>(graph);\n\tcondensed.StronglyConnected = false;\n\tcondensed.Compute();  // Throws KeyNotFoundException if edgeless vertex is added\n}",
    "LastUpdatedDate": "2014-10-29T15:03:44.837-07:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "quickgraph",
    "ReportedDate": "2012-09-19T02:13:22.027-07:00",
    "Status": {
      "Name": "Proposed",
      "Id": 1
    },
    "ReasonClosed": {
      "Name": "Unassigned"
    },
    "Summary": "CondensationAlgorithm throws KeyNotFoundException",
    "Type": {
      "Name": "Issue",
      "Id": 3
    },
    "VoteCount": 3,
    "Id": 23392
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "I have resolved this issue. \nWeaklyConnectedComponentsAlgorithm returns components.Values in series not in all cases. \nThe update may cause the values ​​will not in series.\n```\n            // updating component numbers\n            foreach (var v in this.VisitedGraph.Vertices)\n            {\n                int component = this.components[v];\n                int equivalent = this.GetComponentEquivalence(component);\n                if (component != equivalent)\n                    this.components[v] = equivalent;\n            }\n```\r\n\r\nReplace this code in the file CondensationGraphAlgorithm.cs\n```\n            for (int i = 0; i < componentCount; ++i)\n            {\n                TGraph v = new TGraph();\n                condensatedVertices.Add(i, v);\n                this.condensedGraph.AddVertex(v);\n            }\n```\r\n\r\nto \r\n\r\n```\n            var componentsNumbers = components.Values.Distinct();\n            foreach (var componentsNumber in componentsNumbers)\n            {\n                TGraph v = new TGraph();\n                condensatedVertices.Add(componentsNumber, v);\n                this.condensedGraph.AddVertex(v);\n            }\n```",
      "PostedDate": "2014-01-09T07:11:58.987-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2014-10-29T15:03:44.837-07:00",
      "Id": -2147483648
    }
  ]
}