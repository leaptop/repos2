{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "",
    "ClosedDate": "2009-01-26T19:37:32.177-08:00",
    "CommentCount": 0,
    "Custom": null,
    "Description": "I create two vertices and try to add a single edge, but get this error.\n \nCode:\nthis.graph = new BidirectionalGraph<Vertex<int>, Edge<Vertex<int>>>(true);\nthis.edge = new Edge<Vertex<int>>(new Vertex<int>(0, 0), new Vertex<int>(0,0));\n...\n...\nthis.graph.addEdge(edge);\n \nError:\n[01:29:01] System.Collections.Generic.KeyNotFoundException: The given key was not present in the dictionary.\n   at System.ThrowHelper.ThrowKeyNotFoundException()\n   at System.Collections.Generic.Dictionary`2.get_Item(TKey key)\n   at QuickGraph.BidirectionalGraph`2.AddEdge(TEdge e)\n \nQuickGraph v 3.2.40122",
    "LastUpdatedDate": "2013-05-16T04:59:23.01-07:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "quickgraph",
    "ReportedDate": "2009-01-26T11:35:09.41-08:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "Unassigned"
    },
    "Summary": "BidirectionalGraph addEdge() error",
    "Type": {
      "Name": "Issue",
      "Id": 3
    },
    "VoteCount": 1,
    "Id": 12474
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "You need to add the vertex *instances* to the graph before adding the edge. Or use AddVerticesAndEdge. If this still does not work, re-open the bug and attach a repro program. Thanks,\r\nPeli",
      "PostedDate": "2009-01-26T19:36:48.35-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2009-01-26T19:37:05.163-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2009-01-26T19:37:32.177-08:00",
      "Id": -2147483648
    },
    {
      "Message": "I ran into the same problem.\r\n\r\nMy question: is this a general requirement on the contents of graphs?\r\n(I.e. the invariant that all nodes that are endpoints of edges in a graph are themselves nodes in that graph.)\r\n\r\nIf it is, it can be stated in contracts on the mutators (or even on all members),\r\nand/or a specific exception can be thrown at runtime.\r\n\r\nIt's important for me to know because I frequently have graphs with \"dangling\" edges - e.g. hierarchical graphs with edges between different subgraphs (GraphML supports this).  Knowing this invariant helps me decide how to represent such situations in QuickGraph.\r\n",
      "PostedDate": "2009-09-30T02:18:50.137-07:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2013-02-21T17:44:50.97-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2013-05-16T04:59:23.01-07:00",
      "Id": -2147483648
    }
  ]
}