{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "",
    "ClosedDate": null,
    "CommentCount": 0,
    "Custom": null,
    "Description": "Hi,\n \n \n \nFirst of all I'd like to say that QuickGraph is a impressive piece of work. Congratuations!\n \nI'm looking for a way to read graphml files generated by yEd, a free graph editor. <cite>www.yworks.com/products/yed/</cite>\n \nI can't easily figure out how to customize the Deserializer to read such Nodes, I get a not very meaningful error when trying to deserialize a graph (see xml below) with this code\n \n \n \n \n \nvar g = new AdjacencyGraph<string, Edge<string>>();\nusing (var xreader = XmlReader.Create(\"z:/test.graphml\"))\n{\n    g.DeserializeFromGraphML(xreader,\n        id => id,\n        (source, target, id) => new Edge<string>(source, target)\n    );\n}\n \n \n \n \n \n \n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<graphml xmlns=\"http://graphml.graphdrawing.org/xmlns\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:y=\"http://www.yworks.com/xml/graphml\" xsi:schemaLocation=\"http://graphml.graphdrawing.org/xmlns http://www.yworks.com/xml/schema/graphml/1.0/ygraphml.xsd\">\n  <!--Created by yFiles for Java 2.7-->\n  <key for=\"graphml\" id=\"d0\" yfiles.type=\"resources\"/>\n  <key attr.name=\"url\" attr.type=\"string\" for=\"node\" id=\"d1\"/>\n  <key attr.name=\"description\" attr.type=\"string\" for=\"node\" id=\"d2\"/>\n  <key for=\"node\" id=\"d3\" yfiles.type=\"nodegraphics\"/>\n  <key attr.name=\"url\" attr.type=\"string\" for=\"edge\" id=\"d4\"/>\n  <key attr.name=\"description\" attr.type=\"string\" for=\"edge\" id=\"d5\"/>\n  <key for=\"edge\" id=\"d6\" yfiles.type=\"edgegraphics\"/>\n  <graph edgedefault=\"directed\" id=\"G\">\n    <node id=\"n0\">\n      <data key=\"d2\"/>\n      <data key=\"d3\">\n        <y:ShapeNode>\n          <y:Geometry height=\"30.0\" width=\"30.0\" x=\"365.0\" y=\"11.0\"/>\n          <y:Fill color=\"#FFCC00\" transparent=\"false\"/>\n          <y:BorderStyle color=\"#000000\" type=\"line\" width=\"1.0\"/>\n          <y:NodeLabel alignment=\"center\" autoSizePolicy=\"content\" fontFamily=\"Dialog\" fontSize=\"12\" fontStyle=\"plain\" hasBackgroundColor=\"false\" hasLineColor=\"false\" height=\"19.0\" modelName=\"internal\" modelPosition=\"c\" textColor=\"#000000\" visible=\"true\" width=\"29.0\" x=\"0.5\" y=\"5.5\">TICK</y:NodeLabel>\n          <y:Shape type=\"ellipse\"/>\n        </y:ShapeNode>\n      </data>\n    </node>\n    <node id=\"n1\">\n      <data key=\"d2\"/>\n      <data key=\"d3\">\n        <y:ShapeNode>\n          <y:Geometry height=\"30.0\" width=\"30.0\" x=\"293.0\" y=\"179.0\"/>\n          <y:Fill color=\"#FFCC00\" transparent=\"false\"/>\n          <y:BorderStyle color=\"#000000\" type=\"line\" width=\"1.0\"/>\n          <y:NodeLabel alignment=\"center\" autoSizePolicy=\"content\" fontFamily=\"Dialog\" fontSize=\"12\" fontStyle=\"plain\" hasBackgroundColor=\"false\" hasLineColor=\"false\" height=\"19.0\" modelName=\"internal\" modelPosition=\"c\" textColor=\"#000000\" visible=\"true\" width=\"30.0\" x=\"0.0\" y=\"5.5\">SMA</y:NodeLabel>\n          <y:Shape type=\"ellipse\"/>\n        </y:ShapeNode>\n      </data>\n    </node>\n    <node id=\"n2\">\n      <data key=\"d2\"/>\n      <data key=\"d3\">\n        <y:ShapeNode>\n          <y:Geometry height=\"30.0\" width=\"30.0\" x=\"652.0\" y=\"244.0\"/>\n          <y:Fill color=\"#FFCC00\" transparent=\"false\"/>\n          <y:BorderStyle color=\"#000000\" type=\"line\" width=\"1.0\"/>\n          <y:NodeLabel alignment=\"center\" autoSizePolicy=\"content\" fontFamily=\"Dialog\" fontSize=\"13\" fontStyle=\"bold\" hasBackgroundColor=\"false\" hasLineColor=\"false\" height=\"21.0\" modelName=\"internal\" modelPosition=\"t\" textColor=\"#000000\" visible=\"true\" width=\"45.0\" x=\"-7.5\" y=\"4.0\">SMA2</y:NodeLabel>\n          <y:Shape type=\"rectangle\"/>\n        </y:ShapeNode>\n      </data>\n    </node>\n    <edge id=\"e0\" source=\"n0\" target=\"n2\">\n      <data key=\"d5\"/>\n      <data key=\"d6\">\n        <y:PolyLineEdge>\n          <y:Path sx=\"0.0\" sy=\"0.0\" tx=\"0.0\" ty=\"0.0\"/>\n          <y:LineStyle color=\"#000000\" type=\"line\" width=\"1.0\"/>\n          <y:Arrows source=\"none\" target=\"standard\"/>\n          <y:BendStyle smoothed=\"false\"/>\n        </y:PolyLineEdge>\n      </data>\n    </edge>\n    <edge id=\"e1\" source=\"n0\" target=\"n1\">\n      <data key=\"d5\"/>\n      <data key=\"d6\">\n        <y:PolyLineEdge>\n          <y:Path sx=\"0.0\" sy=\"0.0\" tx=\"0.0\" ty=\"0.0\"/>\n          <y:LineStyle color=\"#000000\" type=\"line\" width=\"1.0\"/>\n          <y:Arrows source=\"none\" target=\"standard\"/>\n          <y:BendStyle smoothed=\"false\"/>\n        </y:PolyLineEdge>\n      </data>\n    </edge>\n  </graph>\n  <data key=\"d0\">\n    <y:Resources/>\n  </data>\n</graphml>\n \n \n \n \nWhat would be the minimum steps to read succesfully the graph, without data attached, and possibly with the data nodes as well?\n \nThanks for your help!\n \nAlexandre",
    "LastUpdatedDate": "2013-02-21T17:44:42.29-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "quickgraph",
    "ReportedDate": "2009-10-27T06:53:41.71-07:00",
    "Status": {
      "Name": "Proposed",
      "Id": 1
    },
    "ReasonClosed": {
      "Name": "Unassigned"
    },
    "Summary": "yEd files deserialization",
    "Type": {
      "Name": "Issue",
      "Id": 3
    },
    "VoteCount": 2,
    "Id": 14539
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "Hi, Alexandre -- I am not sure what your error is, but I solved some Namespace difficulties when reading such files with Linq-to-XML. Here is sample code that works over yEd graphml files\r\n\r\nvar graph = new AdjacencyGraph<string, Edge<string>>(true);\r\n\r\nvar file = @\". . . your file path here . . .\";\r\nvar theDoc = XDocument.Load(file);\r\n\r\n(from node in theDoc.Descendants()\r\n where node.Name.LocalName == \"node\"\r\n select graph.AddVertex(node.Attribute(\"id\").Value)).Run();\r\n\r\nvar edges = (from edge in theDoc.Descendants()\r\n\t\t\t where edge.Name.LocalName == \"edge\"\r\n\t\t\t select new Edge<string>(\r\n   \t\t\t   edge.Attribute(\"source\").Value, \r\n   \t\t\t   edge.Attribute(\"target\").Value));\r\n\t\t\t   \r\nedges.Select(graph.AddEdge).Run();\r\nvar edgeCost = new Dictionary<Edge<string>, double>();\r\ngraph.Edges.Do(e => edgeCost.Add(e, 1)).Run();\r\n\r\nvar dijkstra = new DijkstraShortestPathAlgorithm<string, Edge<string>>(\r\n\tgraph, \r\n\tAlgorithmExtensions.GetIndexer<Edge<string>, double>(\r\n\t\tedgeCost));\r\n\t\t\r\nvar predObsvr = new QuickGraph.Algorithms.Observers\r\n    .VertexPredecessorRecorderObserver<string, Edge<string>>();\r\npredObsvr.Attach(dijkstra);\r\n\r\nvar distObsvr = new VertexDistanceRecorderObserver<string, Edge<string>>(\r\n\tAlgorithmExtensions.GetIndexer<Edge<string>, double>(edgeCost));\r\ndistObsvr.Attach(dijkstra);\r\n",
      "PostedDate": "2011-02-01T07:40:26.977-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2013-02-21T17:44:42.29-08:00",
      "Id": -2147483648
    }
  ]
}