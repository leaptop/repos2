{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "",
    "ClosedDate": null,
    "CommentCount": 0,
    "Custom": null,
    "Description": "I am using an UndirectedGraph with a default TEdge of UndirectedEdge.  I set AllowParallelEdges to false.  However, I was surprised to find that I could still create an edge between two existing verticies that already had an edge between them as long as I created the edge in the opposite direction as before.  This seemed wrong to me since this is an undirected graph so direction shouldn't matter. I then looked at your source to see what the default edge equality was done.  I was surprised to see this:\n\n```\n        /// <summary>\n        /// Returns the most efficient comporer for the particular type of TEdge.\n        /// If TEdge implements IUndirectedEdge, then only the (source,target) pair\n        /// has to be compared; if not, (source, target) and (target, source) have to be compared.\n        /// </summary>\n        /// <typeparam name=\"TVertex\">type of the vertices</typeparam>\n        /// <typeparam name=\"TEdge\">type of the edges</typeparam>\n        /// <returns></returns>\n        public static EdgeEqualityComparer<TVertex, TEdge> GetUndirectedVertexEquality<TVertex, TEdge>()\n            where TEdge : IEdge<TVertex>\n        {\n            if (typeof(IUndirectedEdge<TVertex>).IsAssignableFrom(typeof(TEdge)))\n                return new EdgeEqualityComparer<TVertex, TEdge>(SortedVertexEquality<TVertex, TEdge>);\n            else\n                return new EdgeEqualityComparer<TVertex, TEdge>(UndirectedVertexEquality<TVertex, TEdge>);\n        }\n```\n\nIsn't that backwards?  If an edge is IUndirectedEdge, then we should use the UndirectedVertexEquality NOT the SortedVertexEquality?  If I manually set the equality to UndirectedVertexEquality, then I get the behavior I expected.",
    "LastUpdatedDate": "2017-02-05T06:34:15.493-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "quickgraph",
    "ReportedDate": "2017-02-05T06:34:15.493-08:00",
    "Status": {
      "Name": "Proposed",
      "Id": 1
    },
    "ReasonClosed": {
      "Name": "Unassigned"
    },
    "Summary": "Edge equality backwards?",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 1,
    "Id": 65877
  },
  "FileAttachments": [],
  "Comments": []
}