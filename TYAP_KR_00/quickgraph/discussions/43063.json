[
  {
    "Id": "143145",
    "ThreadId": "43063",
    "Html": "Hello,<br>\r\nI tried to call <strong>PrimMinimumSpanningTreeAlgorithm</strong> for simple input and I got wrong results. So this is my input:<br>\r\n&nbsp;AdjacencyGraph&lt;TVertex,TEdge&gt; adjency_graph with edges <strong>(1,2), (3,2),(3,4),(1,4)</strong> and all weights are equal to 1.<br>\r\nI use the following code to call PrimMinimumSpanningTreeAlgorithm:<br>\r\n<br>\r\n&nbsp; &nbsp;&nbsp; IDictionary&lt;TEdge, double&gt; weights = new Dictionary&lt;TEdge, double&gt;();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp; IEnumerable&lt;TEdge&gt; edges = adjency_graph.Edges;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; foreach (TEdge edge in edges)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; weights.Add(edge, 1);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; UndirectedGraph&lt;TVertex, TEdge&gt; undirectedgraph =<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new UndirectedGraph&lt;TVertex, TEdge&gt;();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; foreach (TVertex v in adjency_graph.Vertices)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; undirectedgraph.AddVertex(v);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; foreach (TEdge e1 in adjency_graph.Edges)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (!undirectedgraph.ContainsEdge(e1.Source, e1.Target))<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; undirectedgraph.AddEdge(e1);<br>\r\n<br>\r\n&nbsp;&nbsp; Then I call PrimMinimumSpanningTreeAlgorithm in debugging mode<br>\r\n<br>\r\n&nbsp; Prim_alg =<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new PrimMinimumSpanningTreeAlgorithm&lt;TVertex, TEdge&gt;(undirectedgraph, weights);<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Prim_alg.Compute(root);&nbsp; //root is 1<br>\r\n<br>\r\n<br>\r\n&nbsp;&nbsp; I see in <strong>InternalCompute</strong> method that only (1,2) and (1,4) edges give TreeEdge event and it is not sufficient because vertex 3 does&nbsp;&nbsp; not belong such tree.<br>\r\n&nbsp;&nbsp; I suppose that problem is because you process only <strong>edge.Target</strong> but not process <strong>edge.Source</strong>. I tried to improve<br>\r\n&nbsp; code of&nbsp;<strong>InternalCompute</strong>  as the following (in the cycle):<br>\r\n&nbsp; TVertex <strong>second_end</strong>;<br>\r\n&nbsp;foreach (var edge in this.VisitedGraph.AdjacentEdges(u))<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (cancelManager.IsCancelling)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; double edgeWeight = this.EdgeWeights[edge];<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //My<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong> if(edge.Target.Equals(u))<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; second_end = edge.Source;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; second_end=edge.Target;</strong><br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; queue.Contains(second_end) &amp;&amp;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; edgeWeight &lt; this.minimumWeights[<strong>second_end</strong>]<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.minimumWeights[second_end] = edgeWeight;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.queue.Update(<strong>second_end</strong>);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.OnTreeEdge(edge);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n<br>\r\n&nbsp;Am I right or I have missed something?<br>\r\n&nbsp;Thank you<br>\r\nEvgeny<br>\r\n&nbsp; <br>\r\n<br>\r\n<br>\r\n\r\n",
    "PostedDate": "2008-12-27T12:06:54.553-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "143326",
    "ThreadId": "43063",
    "Html": "This discussion has been copied to a work item. Click <a href=\"http://www.codeplex.com/quickgraph/WorkItem/View.aspx?WorkItemId=12240\">here</a> to go to the work item and continue the discussion.",
    "PostedDate": "2008-12-29T06:39:11.867-08:00",
    "UserRole": "Owner",
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "143717",
    "ThreadId": "43063",
    "Html": "There was a general issue with undirected graph algorithms. Things have been fixed and tested now.\r\n",
    "PostedDate": "2008-12-31T07:32:27.83-08:00",
    "UserRole": "Owner",
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "144028",
    "ThreadId": "43063",
    "Html": "Hello,<br>\r\n<p><span style=\"font-size:12pt\">\r\nI tried your implementation of Prim spanning tree algorithm after your changes: I downloaded release 29565 and changed my program<br>\r\naccording to <strong>MinimumSpanningTreePrim</strong> method from <strong>AlgorithmExtensions</strong> class. You just use here your <strong>UndirectedDijkstraShortestPathAlgorithm</strong> and then return tree that consists from edges that are included in shortest paths from some (default) vertex to all other vertices. IMHO that did not guarantee that the result is minimum spanning tree. I tested this algorithm with a graph from book &quot;Graph theory&quot; by N.Christofides, chapter 7 â€œTrees, paragraph 3.4 (I have Russian translation of 1975 year). The weight of minimal spanning tree is equal to 63. But your algorithm gives 88. I modified slightly&nbsp; <strong>MinimumSpanningTreePrim </strong>and tried it for all vertices being the root. The minimal weight is when the root is vertex 10 and it is equal to 72.&nbsp; But it is greater than 63. So the minimal tree could not be founded by this way. I add an XML representation of this graph so you could check it: <br>\r\n</span></p>\r\n<p><span style=\"font-size:12pt\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></p>\r\n<p><span style=\"font-size:12pt\">&nbsp; &lt;graph&gt;</span></p>\r\n<p><span style=\"font-size:12pt\">&nbsp;&nbsp;&nbsp; &lt;node id=&quot;1&quot; /&gt;</span></p>\r\n<p><span style=\"font-size:12pt\">&nbsp;&nbsp;&nbsp; &lt;node id=&quot;2&quot; /&gt;</span></p>\r\n<p><span style=\"font-size:12pt\">&nbsp;&nbsp;&nbsp; &lt;node id=&quot;3&quot; /&gt;</span></p>\r\n<p><span style=\"font-size:12pt\">&nbsp;&nbsp;&nbsp; &lt;node id=&quot;4&quot; /&gt;</span></p>\r\n<p><span style=\"font-size:12pt\">&nbsp;&nbsp;&nbsp; &lt;node id=&quot;5&quot; &nbsp;/&gt;</span></p>\r\n<p><span style=\"font-size:12pt\">&nbsp;&nbsp;&nbsp; &lt;node id=&quot;6&quot; /&gt;</span></p>\r\n<p><span style=\"font-size:12pt\">&nbsp;&nbsp;&nbsp; &lt;node id=&quot;7&quot; /&gt;</span></p>\r\n<p><span style=\"font-size:12pt\">&nbsp;&nbsp;&nbsp; &lt;node id=&quot;8&quot; /&gt;</span></p>\r\n<p><span style=\"font-size:12pt\">&nbsp;&nbsp;&nbsp; &lt;node id=&quot;9&quot; /&gt;</span></p>\r\n<p><span style=\"font-size:12pt\">&nbsp;&nbsp;&nbsp; &lt;node id=&quot;10&quot; /&gt;</span></p>\r\n<p><span style=\"font-size:12pt\">&nbsp;&nbsp;&nbsp; &lt;node id=&quot;11&quot; /&gt;</span></p>\r\n<p><span style=\"font-size:12pt\">&nbsp;&nbsp;&nbsp; &lt;node id=&quot;12&quot; /&gt;</span></p>\r\n<p><span style=\"font-size:12pt\">&nbsp;&nbsp;&nbsp; &lt;edge id=&quot;1_2&quot; source=&quot;1&quot; target=&quot;2&quot; weight=&quot;6&quot; /&gt;</span></p>\r\n<p><span style=\"font-size:12pt\">&nbsp;&nbsp;&nbsp; &lt;edge id=&quot;1_4&quot; source=&quot;1&quot; target=&quot;4&quot; weight=&quot;11&quot; /&gt;</span></p>\r\n<p><span style=\"font-size:12pt\">&nbsp;&nbsp;&nbsp; &lt;edge id=&quot;1_5&quot; source=&quot;1&quot; target=&quot;5&quot; weight=&quot;5&quot; /&gt;</span></p>\r\n<p><span style=\"font-size:12pt\">&nbsp;&nbsp;&nbsp; &lt;edge id=&quot;2_5&quot; source=&quot;2&quot; target=&quot;5&quot; weight=&quot;8&quot; /&gt;</span></p>\r\n<p><span style=\"font-size:12pt\">&nbsp;&nbsp;&nbsp; &lt;edge id=&quot;2_3&quot; source=&quot;2&quot; target=&quot;3&quot; weight=&quot;15&quot; /&gt;</span></p>\r\n<p><span style=\"font-size:12pt\">&nbsp;&nbsp;&nbsp; &lt;edge id=&quot;2_4&quot; source=&quot;2&quot; target=&quot;4&quot; weight=&quot;18&quot; /&gt;</span></p>\r\n<p><span style=\"font-size:12pt\">&nbsp;&nbsp;&nbsp; &lt;edge id=&quot;2_7&quot; source=&quot;2&quot; target=&quot;7&quot; weight=&quot;11&quot; /&gt;</span></p>\r\n<p><span style=\"font-size:12pt\">&nbsp;&nbsp;&nbsp; &lt;edge id=&quot;3_4&quot; source=&quot;3&quot; target=&quot;4&quot; weight=&quot;8&quot; /&gt;</span></p>\r\n<p><span style=\"font-size:12pt\">&nbsp;&nbsp;&nbsp; &lt;edge id=&quot;3_8&quot; source=&quot;3&quot; target=&quot;8&quot; weight=&quot;18&quot; /&gt;</span></p>\r\n<p><span style=\"font-size:12pt\">&nbsp;&nbsp;&nbsp; &lt;edge id=&quot;3_9&quot; source=&quot;3&quot; target=&quot;9&quot; weight=&quot;6&quot; /&gt;</span></p>\r\n<p><span style=\"font-size:12pt\">&nbsp;&nbsp;&nbsp; &lt;edge id=&quot;4_6&quot; source=&quot;4&quot; target=&quot;6&quot; weight=&quot;10&quot; /&gt;</span></p>\r\n<p><span style=\"font-size:12pt\">&nbsp;&nbsp;&nbsp; &lt;edge id=&quot;4_7&quot; source=&quot;4&quot; target=&quot;7&quot; weight=&quot;7&quot; /&gt;</span></p>\r\n<p><span style=\"font-size:12pt\">&nbsp;&nbsp;&nbsp; &lt;edge id=&quot;4_11&quot; source=&quot;4&quot; target=&quot;11&quot; weight=&quot;17&quot; /&gt;</span></p>\r\n<p><span style=\"font-size:12pt\">&nbsp;&nbsp;&nbsp; &lt;edge id=&quot;5_6&quot; source=&quot;5&quot; target=&quot;6&quot; weight=&quot;15&quot; /&gt;</span></p>\r\n<p><span style=\"font-size:12pt\">&nbsp;&nbsp;&nbsp; &lt;edge id=&quot;5_7&quot; source=&quot;5&quot; target=&quot;7&quot; weight=&quot;9&quot; /&gt;</span></p>\r\n<p><span style=\"font-size:12pt\">&nbsp;&nbsp;&nbsp; &lt;edge id=&quot;6_11&quot; source=&quot;6&quot; target=&quot;11&quot; weight=&quot;3&quot; /&gt;</span></p>\r\n<p><span style=\"font-size:12pt\">&nbsp;&nbsp;&nbsp; &lt;edge id=&quot;7_8&quot; source=&quot;7&quot; target=&quot;8&quot; weight=&quot;9&quot; /&gt;</span></p>\r\n<p><span style=\"font-size:12pt\">&nbsp;&nbsp;&nbsp; &lt;edge id=&quot;7_9&quot; source=&quot;7&quot; target=&quot;9&quot; weight=&quot;4&quot; /&gt;</span></p>\r\n<p><span style=\"font-size:12pt\">&nbsp;&nbsp;&nbsp; &lt;edge id=&quot;7_11&quot; source=&quot;7&quot; target=&quot;11&quot; weight=&quot;12&quot; /&gt;</span></p>\r\n<p><span style=\"font-size:12pt\">&nbsp;&nbsp;&nbsp; &lt;edge id=&quot;7_10&quot; source=&quot;7&quot; target=&quot;10&quot; weight=&quot;13&quot; /&gt;</span></p>\r\n<p><span style=\"font-size:12pt\">&nbsp;&nbsp;&nbsp; &lt;edge id=&quot;8_9&quot; source=&quot;8&quot; target=&quot;9&quot; weight=&quot;14&quot; /&gt;</span></p>\r\n<p><span style=\"font-size:12pt\">&nbsp;&nbsp;&nbsp; &lt;edge id=&quot;8_12&quot; source=&quot;8&quot; target=&quot;12&quot; weight=&quot;5&quot; /&gt;</span></p>\r\n<p><span style=\"font-size:12pt\">&nbsp;&nbsp;&nbsp; &lt;edge id=&quot;9_10&quot; source=&quot;9&quot; target=&quot;10&quot; weight=&quot;19&quot; /&gt;</span></p>\r\n<p><span style=\"font-size:12pt\">&nbsp;&nbsp;&nbsp; &lt;edge id=&quot;10_12&quot; source=&quot;10&quot; target=&quot;12&quot; weight=&quot;2&quot; /&gt;</span></p>\r\n<p><span style=\"font-size:12pt\">&nbsp;&nbsp;&nbsp; &lt;edge id=&quot;11_12&quot; source=&quot;11&quot; target=&quot;12&quot; weight=&quot;7&quot; /&gt;</span></p>\r\n<p><span style=\"font-size:12pt\">&nbsp; &lt;/graph&gt;</span></p>\r\n",
    "PostedDate": "2009-01-02T11:27:43.403-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "144044",
    "ThreadId": "43063",
    "Html": "This discussion has been copied to a work item. Click <a href=\"http://www.codeplex.com/quickgraph/WorkItem/View.aspx?WorkItemId=12273\">here</a> to go to the work item and continue the discussion.",
    "PostedDate": "2009-01-02T13:55:42.487-08:00",
    "UserRole": "Owner",
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "144053",
    "ThreadId": "43063",
    "Html": "Good catch. I was not asserting correctly the result of Kruskal and Prim. As for prim, I was not using the correct combine method for the relaxation (should be weight instead of distance + weight).\r\n",
    "PostedDate": "2009-01-02T15:23:54.66-08:00",
    "UserRole": "Owner",
    "MarkedAsAnswerDate": null
  }
]