[
  {
    "Id": "851122",
    "ThreadId": "360201",
    "Html": "\r\n<p>Hi everyone, sorry for what may be a brutally (I hope) simple question.</p>\r\n<p>I have a class called Datapoint that I am using for both the nodes and edges in my QuickGraph code.&nbsp; The class overloads the 'Source' and 'Target' fields as required by the QuickGraph IEdge interface.</p>\r\n<p>Fundamentally, however, my data is undirected, and I want to find the shortest paths between various sets of nodes.&nbsp; I am currectly using the RankedShortestPathHoffmanPavley function.&nbsp; So the 'Source' and 'Target' are making me a bit nervous because\r\n it feels very directional and the answers returned from a directed graph will be different from an undirected graph.</p>\r\n<p>So, here is my question.&nbsp; If I make a BidirectionalGraph and give it nodes and edges, do I need to double all my edges (i.e. A-&gt;B AND B-&gt;A) or is the BidirectionalGraph class smart enough to figure that out, despite the fact that my edges only\r\n represent the A-&gt;B case via the 'Source' and 'Target' fields?</p>\r\n<p>&nbsp;</p>\r\n<p>thanks!</p>\r\n<p>-denny-</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2012-06-19T13:08:25.693-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "866574",
    "ThreadId": "360201",
    "Html": "<p>as i know and have tried, BidirectionalGraph stores a directed graph, and you can get both InEdges and OutEdges of a node. that is very different from AdjacencyGraph, in which you can get only OutEdges of a node.</p>\r\n<p>so, A-&gt;B and B-&gt;A is two different edges in BidirectionalGraph</p>",
    "PostedDate": "2012-07-14T09:01:25.733-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]