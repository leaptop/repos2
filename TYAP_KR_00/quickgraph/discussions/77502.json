[
  {
    "Id": "265038",
    "ThreadId": "77502",
    "Html": "<p>1. I create an adjacency graph from reading an input shape file</p>\r\n<p>for (uint i = 0; i &lt; myLayer.DataSource.GetFeatureCount(); ++i)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FeatureDataRow feat = myLayer.DataSource.GetFeature(i);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; string to_comid = feat.ItemArray[feat.Table.Columns.IndexOf(&quot;TO_COMID&quot;)].ToString();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; string from_comid = feat.ItemArray[feat.Table.Columns.IndexOf(&quot;FROM_COMID&quot;)].ToString();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; string k = feat.ItemArray[feat.Table.Columns.IndexOf(&quot;K&quot;)].ToString();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; string x = feat.ItemArray[feat.Table.Columns.IndexOf(&quot;X&quot;)].ToString();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int v1 = Convert.ToInt32(from_comid);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int v2 = Convert.ToInt32(to_comid);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.AddVertex(v1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.AddVertex(v2);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var e1 = new TaggedEdge&lt;int, Reach&gt;(v1, v2, new Reach(Convert.ToDouble(x), Convert.ToDouble(k), Convert.ToDateTime(start), Convert.ToDouble(timestep)));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.AddEdge(e1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p>&nbsp;2. Next, I sort this list:</p>\r\n<p>var topo = QuickGraph.Algorithms.AlgorithmExtensions.TopologicalSort&lt;int, TaggedEdge&lt;int, Reach&gt;&gt;(g);</p>\r\n<p>3. Finally, I want to create a new adjacency graph, with the vertices and edges sorted.&nbsp; I've tried many different things, but none have worked.&nbsp; I'm not supplying any code here because nothing I've try seems to come close to working.&nbsp; I've searched thourhg the documentation and discussions, but there is not info about sorting an adjacency graph and creating another one from the sorted values.</p>\r\n<p>How can I do this? Can I use &quot;.ToAdjacencyGraph()&quot;?&nbsp; If so, can someone please supply an example.</p>\r\n<p>&nbsp;</p>\r\n<p>Any help is greatly appreciated!</p>\r\n<p>Thanks,</p>\r\n<p>Tony</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-12-08T10:42:43.483-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]