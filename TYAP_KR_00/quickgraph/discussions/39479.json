[
  {
    "Id": "130992",
    "ThreadId": "39479",
    "Html": "Hi guys,<div><br></div><div>I need to find all path between two vertex. Can you help me? Which is the algorithm to use?</div><div><br></div><div>Thanks.</div><div><br></div><div>Bye bye.<br><div><br></div><div><br></div></div>",
    "PostedDate": "2008-11-08T00:39:48.383-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "131164",
    "ThreadId": "39479",
    "Html": "Do you mean all shortest path between 2 vertices? This would be Floyd-Warshall which is not implemented.\r\n",
    "PostedDate": "2008-11-09T07:44:25.903-08:00",
    "UserRole": "Owner",
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "131178",
    "ThreadId": "39479",
    "Html": "Hi,<div><br></div><div>I mean &quot;All Simple Paths&quot;: <span style=\"font-family:'lucida grande';font-size:12px;white-space:pre\">http://www.nist.gov/dads/HTML/allSimplePaths.html</span></div><div><span style=\"font-family:'lucida grande';font-size:12px;white-space:pre\"><br></span></div><div><span style=\"font-family:'lucida grande';font-size:12px;white-space:pre\">Maybe I solved the problem using this:</span></div><div><span style=\"font-family:'lucida grande';font-size:12px;white-space:pre\"><br></span></div><div><span style=\"font-family:'lucida grande';font-size:12px;white-space:pre\">        public void FindPath(int S, int E, ArrayList Path){if (S == E){Path.Add(S);AllPath.Add(new ArrayList(Path));Path.RemoveAt(Path.Count - 1);return;}if (Path.Contains(S))return;Path.Add(S);var K = g.OutEdges(S).GetEnumerator();while (K.MoveNext()){FindPath(K.Current.Target, E, Path);}Path.RemoveAt(Path.Count - 1);}<br></span></div><div><span style=\"font-family:'lucida grande';font-size:12px;white-space:pre\"><br></span></div><div><span style=\"font-family:'lucida grande';font-size:12px;white-space:pre\">Where S is Start Vertex, E is End Vertex, and g is the Adjacency Graph.</span></div><div><span style=\"font-family:'lucida grande';font-size:12px;white-space:pre\"><br></span></div><div><span style=\"font-family:'lucida grande';font-size:12px;white-space:pre\">What do you think about? It's good!! It returns really all paths!</span></div><div><span style=\"font-family:'lucida grande';font-size:12px;white-space:pre\"><br></span></div><div><span style=\"font-family:'lucida grande';font-size:12px;white-space:pre\">bye.</span></div><div><span style=\"font-family:'lucida grande';font-size:12px;white-space:pre\"><br></span></div><div><span style=\"font-family:'lucida grande';font-size:12px;white-space:pre\"><br></span></div>",
    "PostedDate": "2008-11-09T08:59:57.897-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "131180",
    "ThreadId": "39479",
    "Html": "Sorry!! This is the function:<p> public void FindPath(int S, int E, ArrayList Path)<br>{<br>if (S == E)<br>{<br>Path.Add(S);<br>AllPath.Add(new ArrayList(Path));<br>Path.RemoveAt(Path.Count - 1);<br>return;<br>}<br>if (Path.Contains(S))<br>return;</p><p> Path.Add(S);<br><br>var K = g.OutEdges(S).GetEnumerator();</p><p> while (K.MoveNext())<br>{<br>FindPath(K.Current.Target, E, Path);<br>}<br>Path.RemoveAt(Path.Count - 1);<br>}</p>",
    "PostedDate": "2008-11-09T09:04:48.957-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "133726",
    "ThreadId": "39479",
    "Html": "Hi,<div><br></div><div>is it difficult to implement <span style=\"font-family:'segoe ui';font-size:13px\">Floyd-Warshall algorithm?</span></div><div><span style=\"font-family:'segoe ui';font-size:13px\"><br></span></div><div><span style=\"font-family:'segoe ui';font-size:13px\">Thanks.</span></div>",
    "PostedDate": "2008-11-19T11:38:21.91-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "133839",
    "ThreadId": "39479",
    "Html": "I've started but I need time to finish it. It's a well known and documented algorithm so it should be fairly easy to write (always easier said than done)\r\n",
    "PostedDate": "2008-11-19T21:48:53.293-08:00",
    "UserRole": "Owner",
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "136353",
    "ThreadId": "39479",
    "Html": "Hi,<br>\r\n<br>\r\nI'm also very interested in this topic. I'm trying to integrate QuickGraph in my train control program (<a href=\"http://users.telenet.be/loccommander\">http://users.telenet.be/loccommander</a>)  to determine all routes between 2 vertices.<br>\r\n<br>\r\nGreat work QuickGraph!<br>\r\n<br>\r\nBest regards,<br>\r\nFrank\r\n",
    "PostedDate": "2008-11-30T06:21:10.677-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "136668",
    "ThreadId": "39479",
    "Html": "I've implemented and checkin the Floyd-Warshall algorithm, see FloydWarshallAllShortestPathAlgorithm in the V3 branch.<br>\r\n<br>\r\nTo use it, create the algorithm, compute, then use TryGetPath, TryGetCost to extract the paths.\r\n",
    "PostedDate": "2008-12-01T09:48:40.38-08:00",
    "UserRole": "Owner",
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "138411",
    "ThreadId": "39479",
    "Html": "Hi,<br>\r\n<br>\r\nOk, many thanks.<br>\r\n<br>\r\nIs it also possible to make it available for the V2 branch?<br>\r\nI have trouble shooting with building V3 version, I'm missing the reference having the <span style=\"font-size:13px\">\r\n<p>System.Diagnostics.Contracts</p>\r\n</span><span style=\"font-size:13px\">\r\n<p>Thanks,<br>\r\nFrank</p>\r\n</span>\r\n",
    "PostedDate": "2008-12-07T10:36:02.253-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "138440",
    "ThreadId": "39479",
    "Html": "The v3 branch should build for .NET2.0, without contracts installed. To do this, use the 'Release20' configuration in the QuickGraph solution.\r\n",
    "PostedDate": "2008-12-07T14:05:23.623-08:00",
    "UserRole": "Owner",
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "140248",
    "ThreadId": "39479",
    "Html": "Hi Jonathan,<br>\r\n<br>\r\nSorry, but still complaining about Contracts... So, I have selected Release20 and target framework is .NET Framework 2.0. Rebuilt the project but still seeks for the Microsoft.contracts reference...<br>\r\nAny idea what I'm still doing wrong.<br>\r\n<br>\r\nThank you.<br>\r\n<br>\r\nBest regards,<br>\r\nFrank\r\n",
    "PostedDate": "2008-12-13T06:05:49.96-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "140261",
    "ThreadId": "39479",
    "Html": "Hi Jonathan,<br>\r\n<br>\r\nGood news, with the latest sources I can build it.<br>\r\n<br>\r\nThanks,<br>\r\nFrank\r\n",
    "PostedDate": "2008-12-13T08:43:24.593-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "140264",
    "ThreadId": "39479",
    "Html": "Yes, I've 'inlined' the contracts API in the QuickGraph library (work in progress for other assemblies).\r\n",
    "PostedDate": "2008-12-13T09:15:23.953-08:00",
    "UserRole": "Owner",
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "140271",
    "ThreadId": "39479",
    "Html": "Hi Jonathan,<br>\r\n<br>\r\nThanks for the effort!<br>\r\n<br>\r\nBTW. how can I define my weights func to use the algo?<br>\r\n<br>\r\nBest regards,<br>\r\nFrank\r\n",
    "PostedDate": "2008-12-13T09:30:16.66-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "140305",
    "ThreadId": "39479",
    "Html": "Are you using C#? Then, you can simply use lambads. If you have a dictionary, pass e =&gt; dic[e].\r\n",
    "PostedDate": "2008-12-13T13:59:37.347-08:00",
    "UserRole": "Owner",
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "141093",
    "ThreadId": "39479",
    "Html": "Hi Jonathan,<br>\r\n<br>\r\nYes I'm using C#, but I don't understand what argument can be specified for the constructor.<br>\r\n<br>\r\nWhat I have...<br>\r\n<br>\r\n<span style=\"font-size:13px;color:#2b91af\"><span style=\"font-size:13px;color:#2b91af\">\r\n<p>&nbsp;</p>\r\n</span>\r\n<p>&nbsp;</p>\r\n</span>\r\n<p><span style=\"font-size:13px;color:#2b91af\"><span style=\"font-size:13px;color:#2b91af\">\r\n<p>&nbsp;</p>\r\n<p>Dictionary</p>\r\n</span>\r\n<p>&nbsp;</p>\r\n</span></p>\r\n<p><span style=\"font-size:13px\">&lt;</span><span style=\"font-size:13px;color:#2b91af\">TaggedEdge</span><span style=\"font-size:13px\">&lt;</span><span style=\"font-size:13px;color:#0000ff\">int</span><span style=\"font-size:13px\">, </span><span style=\"font-size:13px;color:#2b91af\">MRBaseObject</span><span style=\"font-size:13px\">&gt;, </span><span style=\"font-size:13px;color:#0000ff\">double</span><span style=\"font-size:13px\">&gt; edgeCost = </span><span style=\"font-size:13px;color:#0000ff\">new</span><span style=\"font-size:13px\"> </span><span style=\"font-size:13px;color:#2b91af\">Dictionary</span><span style=\"font-size:13px\">&lt;</span><span style=\"font-size:13px;color:#2b91af\">TaggedEdge</span><span style=\"font-size:13px\">&lt;</span><span style=\"font-size:13px;color:#0000ff\">int</span><span style=\"font-size:13px\">, </span><span style=\"font-size:13px;color:#2b91af\">MRBaseObject</span><span style=\"font-size:13px\">&gt;, </span><span style=\"font-size:13px;color:#0000ff\">double</span><span style=\"font-size:13px\">&gt;(mvGraph.EdgeCount);\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n</span></p>\r\n<p><span style=\"font-size:13px;color:#2b91af\">ArrayList</span><span style=\"font-size:13px\"> staticTrackItems = activeLayout.mfGetStaticObjects().mfGetCollection();\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n</span></p>\r\n<p><span style=\"font-size:13px;color:#0000ff\">foreach</span><span style=\"font-size:13px\">(</span><span style=\"font-size:13px;color:#2b91af\">MRStaticObject</span><span style=\"font-size:13px\"> staticObject </span><span style=\"font-size:13px;color:#0000ff\">in</span><span style=\"font-size:13px\"> staticTrackItems)\r\n<p>&nbsp;</p>\r\n<p>{</p>\r\n<p>&nbsp;</p>\r\n</span></p>\r\n<p><span style=\"font-size:13px;color:#0000ff\">foreach</span><span style=\"font-size:13px\">(</span><span style=\"font-size:13px;color:#2b91af\">TaggedEdge</span><span style=\"font-size:13px\">&lt;</span><span style=\"font-size:13px;color:#0000ff\">int</span><span style=\"font-size:13px\">, </span><span style=\"font-size:13px;color:#2b91af\">MRBaseObject</span><span style=\"font-size:13px\">&gt; edge </span><span style=\"font-size:13px;color:#0000ff\">in</span><span style=\"font-size:13px\"> staticObject.mfGetEdges())\r\n<p>&nbsp;</p>\r\n<p>{</p>\r\n<p>mvGraph.AddVerticesAndEdge(edge);</p>\r\n<p>edgeCost.Add(edge, 20.0F);</p>\r\n<p>}</p>\r\n<p>} </p>\r\n<p>&nbsp;</p>\r\n</span></p>\r\n<p><span style=\"font-size:13px;color:#2b91af\">ArrayList</span><span style=\"font-size:13px\"> ctrlTrackItems = activeLayout.mfGetSwitchObjects().mfGetCollection();\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n</span></p>\r\n<p><span style=\"font-size:13px;color:#0000ff\">foreach</span><span style=\"font-size:13px\">(</span><span style=\"font-size:13px;color:#2b91af\">MRSwitchObject</span><span style=\"font-size:13px\"> ctrlObject </span><span style=\"font-size:13px;color:#0000ff\">in</span><span style=\"font-size:13px\"> ctrlTrackItems)\r\n<p>&nbsp;</p>\r\n<p>{</p>\r\n<p>&nbsp;</p>\r\n</span></p>\r\n<p><span style=\"font-size:13px;color:#0000ff\">foreach</span><span style=\"font-size:13px\">(</span><span style=\"font-size:13px;color:#2b91af\">TaggedEdge</span><span style=\"font-size:13px\">&lt;</span><span style=\"font-size:13px;color:#0000ff\">int</span><span style=\"font-size:13px\">, </span><span style=\"font-size:13px;color:#2b91af\">MRBaseObject</span><span style=\"font-size:13px\">&gt; edge </span><span style=\"font-size:13px;color:#0000ff\">in</span><span style=\"font-size:13px\"> ctrlObject.mfGetEdges())\r\n<p>&nbsp;</p>\r\n<p>{</p>\r\n<p>mvGraph.AddVerticesAndEdge(edge);</p>\r\n<p>edgeCost.Add(edge, 20.0F);</p>\r\n<p>}</p>\r\n<p>}</p>\r\n<p>&nbsp;</p>\r\n</span></p>\r\n<p><span style=\"font-size:13px;color:#0000ff\">if</span><span style=\"font-size:13px\"> (mvGraph.IsEdgesEmpty)\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n</span></p>\r\n<p><span style=\"font-size:13px;color:#0000ff\">return</span><span style=\"font-size:13px\">;\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n</span></p>\r\n<p><span style=\"font-size:13px;color:#2b91af\">Func</span><span style=\"font-size:13px\">&lt;</span><span style=\"font-size:13px;color:#2b91af\">TaggedEdge</span><span style=\"font-size:13px\">&lt;</span><span style=\"font-size:13px;color:#0000ff\">int</span><span style=\"font-size:13px\">, </span><span style=\"font-size:13px;color:#2b91af\">MRBaseObject</span><span style=\"font-size:13px\">&gt;, </span><span style=\"font-size:13px;color:#0000ff\">double</span><span style=\"font-size:13px\">&gt; weights = </span><span style=\"font-size:13px;color:#0000ff\">null</span><span style=\"font-size:13px\">;\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n</span></p>\r\n<p><span style=\"font-size:13px;color:#008000\"><span style=\"font-size:13px;color:#008000\">// We want to use Dijkstra on this graph\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n</span>\r\n<p>&nbsp;</p>\r\n</span></p>\r\n<p><span style=\"font-size:13px\">\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n</span></p>\r\n<p><span style=\"font-size:13px;color:#008000\"><span style=\"font-size:13px;color:#008000\">//DijkstraShortestPathAlgorithm&lt;int, TaggedEdge&lt;int, MRBaseObject&gt;&gt; dijkstra = new DijkstraShortestPathAlgorithm&lt;int, TaggedEdge&lt;int, MRBaseObject&gt;&gt;(mvGraph, edgeCost);\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n</span>\r\n<p>&nbsp;</p>\r\n</span></p>\r\n<p><span style=\"font-size:13px\">\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n</span></p>\r\n<p><span style=\"font-size:13px;color:#2b91af\">FloydWarshallAllShortestPathAlgorithm</span><span style=\"font-size:13px\">&lt;</span><span style=\"font-size:13px;color:#0000ff\">int</span><span style=\"font-size:13px\">, </span><span style=\"font-size:13px;color:#2b91af\">TaggedEdge</span><span style=\"font-size:13px\">&lt;</span><span style=\"font-size:13px;color:#0000ff\">int</span><span style=\"font-size:13px\">, </span><span style=\"font-size:13px;color:#2b91af\">MRBaseObject</span><span style=\"font-size:13px\">&gt;&gt; allPaths = </span><span style=\"font-size:13px;color:#0000ff\">new</span><span style=\"font-size:13px\"> </span><span style=\"font-size:13px;color:#2b91af\">FloydWarshallAllShortestPathAlgorithm</span><span style=\"font-size:13px\">&lt;</span><span style=\"font-size:13px;color:#0000ff\">int</span><span style=\"font-size:13px\">, </span><span style=\"font-size:13px;color:#2b91af\">TaggedEdge</span><span style=\"font-size:13px\">&lt;</span><span style=\"font-size:13px;color:#0000ff\">int</span><span style=\"font-size:13px\">, </span><span style=\"font-size:13px;color:#2b91af\">MRBaseObject</span><span style=\"font-size:13px\">&gt;&gt;(mvGraph, weights);\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n</span></p>\r\n<p>\r\n<p><span style=\"font-size:13px\">\r\n<p>&nbsp;</p>\r\nThis edgeCost used to work in the Dijkstra algo but no longer with this version. And it is not accepted as an argument in the constructor for <span style=\"font-size:13px;color:#2b91af\">FloydWarshallAllShortestPathAlgorithm </span>\r\n<p>&nbsp;</p>\r\n<p>I could use the dictionary edgeCost in the Dijkstra with previous version but not with this version and it can also not be used in the constructor for  <span style=\"font-size:13px;color:#2b91af\">FloydWarshallAllShortestPathAlgorithm.<br>\r\n<br>\r\n<br>\r\nAny help is much appreciated,<br>\r\nThanks.<br>\r\nFrank<br>\r\n<br>\r\n<br>\r\n<br>\r\n</span></p>\r\n</span></p>\r\n</p>\r\n",
    "PostedDate": "2008-12-16T13:13:40.433-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "141172",
    "ThreadId": "39479",
    "Html": "<p>Dijkstra now takes a delegate that maps a TEdge to a double (i.e. map from edges to their cost). Implicitely, this was done by calling the indexer of the dictionary. Simply pass the following in your case:</p>\r\n<p style=\"margin-right:0px\" dir=ltr>    e =&gt; edgeCost[e]<br>\r\n<br>\r\nIf all your edges have constant weight, you do not need a dictionary. Simply use<br>\r\n<br>\r\n    e =&gt; 1.0</p>\r\n",
    "PostedDate": "2008-12-16T17:26:35.353-08:00",
    "UserRole": "Owner",
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "142015",
    "ThreadId": "39479",
    "Html": "\r\n<div>Hi Jonathan,</div>\r\n<div> </div>\r\n<div>I don't know why but this is the way I define \r\nobject by use of a constructor.</div>\r\n<div> </div>\r\n<div>FloydWarshallAllShortestPathAlgorithm&lt;int, TaggedEdge&lt;int, \r\nMRBaseObject&gt;&gt; allPaths = new \r\nFloydWarshallAllShortestPathAlgorithm&lt;int, TaggedEdge&lt;int, \r\nMRBaseObject&gt;&gt;(mvGraph, \r\nedgeCost[0]);</div>\r\n<div>\r\n<p>But, I get compilation problems as the second \r\narguments is not of type Func... but a double. I reallly don' know how to make a \r\nFloydWarshallAllShortestPathAlgorithm \r\nobject, sorry.</p></div>\r\n<div>Error 1 The best overloaded method match \r\nfor \r\n'QuickGraph.Algorithms.ShortestPath.FloydWarshallAllShortestPathAlgorithm&lt;int,QuickGraph.TaggedEdge&lt;int,MRBaseObjects.MRBaseObject&gt;&gt;.FloydWarshallAllShortestPathAlgorithm(QuickGraph.IVertexAndEdgeListGraph&lt;int,QuickGraph.TaggedEdge&lt;int,MRBaseObjects.MRBaseObject&gt;&gt;, \r\nQuickGraph.Func&lt;QuickGraph.TaggedEdge&lt;int,MRBaseObjects.MRBaseObject&gt;,double&gt;)' \r\nhas some invalid \r\narguments E:\\Frank\\LocCommander\\ModelRoadController\\MRGraph\\MRGraphMgr.cs 78 98 MRGraph</div>\r\n<div> </div>\r\n<div> </div>\r\n<div>Any help is very welcome.</div>\r\n<div> </div>\r\n<div>Thanks.</div>\r\n<div>Frank</div>\r\n<div><br></div>\r\n<blockquote dir=ltr style=\"padding-right:0px;padding-left:5px;margin-left:5px;border-left:#000000 2px solid;margin-right:0px\">\r\n  <div style=\"font:10pt arial\">----- Original Message ----- </div>\r\n  <div style=\"background:#e4e4e4;font:10pt arial;font-color:black\"><b>From:</b> \r\n  [email removed] </div>\r\n  <div style=\"font:10pt arial\"><b>To:</b> [email removed] </div>\r\n  <div style=\"font:10pt arial\"><b>Sent:</b> Wednesday, December 17, 2008 2:26 \r\n  AM</div>\r\n  <div style=\"font:10pt arial\"><b>Subject:</b> Re: Find all path \r\n  [quickgraph:39479]</div>\r\n  <div><br></div>\r\n  \r\n\r\n  <p>From: pelikhan</p>\r\n  <div id=ThreadNotificationPostBody>\r\n  <p>Dijkstra now takes a delegate that maps a TEdge to a double (i.e. map from \r\n  edges to their cost). Implicitely, this was done by calling the indexer of the \r\n  dictionary. Simply pass the following in your case:</p>\r\n  <p dir=ltr style=\"margin-right:0px\">    e =&gt; \r\n  edgeCost[e]<br><br>If all your edges have constant weight, you do not need a \r\n  dictionary. Simply use<br><br>    e =&gt; 1.0</p></div>\r\n  </blockquote>",
    "PostedDate": "2008-12-20T02:57:18.863-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "142035",
    "ThreadId": "39479",
    "Html": "Hi Jonathan,<br>\r\n<br>\r\nI think I have found a solution to my problem.<br>\r\n<br>\r\nNevertheless, I'm wondering when more than 1 path exists between a source and destination this implementation of the algo will only return one path(the shortest?).<br>\r\nIs there some other algo already implemented to find all paths between a source and a target.<br>\r\n<br>\r\nThanks,<br>\r\nFrank\r\n",
    "PostedDate": "2008-12-20T08:03:47.387-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "142094",
    "ThreadId": "39479",
    "Html": "There's currently no algorithm in QuickGraph that implements this. This problem is called the k-shortest path - there exist algorithm but QuickGraph does not implement any.\r\n",
    "PostedDate": "2008-12-20T14:37:24.903-08:00",
    "UserRole": "Owner",
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "142122",
    "ThreadId": "39479",
    "Html": "If you need help to implement k-shortest path algorithm I'm here.<div><br></div><div>Bye.</div>",
    "PostedDate": "2008-12-21T01:05:31.497-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "142135",
    "ThreadId": "39479",
    "Html": "I need to implement this algorithm to use it in a project.<div><br></div><div>We can share here all informations about this algorithm.</div><div><br></div><div>Searching over internet I found many information about it.</div><div>Here (<span style=\"font-family:'lucida grande';font-size:12px;white-space:pre\">http://code.google.com/p/k-shortest-paths/<span style=\"font-family:'times new roman';font-size:16px;white-space:normal\">)  there' is an implementation using java language.</span></span></div><div>It's impossibile to use it because it's <span style=\"font-family:'times new roman';font-size:16px;white-space:normal\">copyrighted, so we have to implement it starting from the algorithm.</span></div><div><br></div><div>Here (<span style=\"color:rgb(111, 111, 111);font-family:verdana;font-size:13px;line-height:14px\">http://www.mat.uc.pt/~eqvm/cientificos/investigacao/Artigos/new_yen.ps.gz<span style=\"color:rgb(0, 0, 0);font-family:'times new roman';font-size:16px;line-height:normal\">) is possible to download a simple &quot;New implementation of Yen's ranking Loopless paths algorithm&quot;.</span></span></div><div>It solves the k-shortest paths problem.</div><div><br></div><div>Using this thread we can start implementing Yen's algorithm to solve the problem.</div><div><br></div><div>Thanks for you attention.</div><div><br></div><div>Bye.</div>",
    "PostedDate": "2008-12-21T03:20:27.017-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "142804",
    "ThreadId": "39479",
    "Html": "Hi giomuti,<br>\r\n<br>\r\nSorry for the late reply but very hard times in professional life...<br>\r\nYes it would be great if we could implement this algo.<br>\r\nCurrently I have not a lot of time to dick into it... and also the Graph code is pretty new to me. But I would like to use it in my control software for model railroad.<br>\r\nI will keep in touch!<br>\r\n<br>\r\nThanks,<br>\r\nFrank\r\n",
    "PostedDate": "2008-12-24T04:10:02.733-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "142999",
    "ThreadId": "39479",
    "Html": "It's hard to implement it!<div><br></div><div>I'm not understanding this algorithm.</div><div><br></div><div>Bye.</div>",
    "PostedDate": "2008-12-26T00:57:09.31-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "143006",
    "ThreadId": "39479",
    "Html": "Someone can explain this algorithm step by step?<div><br></div><div>Thanks!</div>",
    "PostedDate": "2008-12-26T01:55:39.3-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "143102",
    "ThreadId": "39479",
    "Html": "Hi guys,<div><br></div><div>I'm trying to solve the problem implementing this algorithm.</div><div><br></div><div>Once found the shortest path and removed all vertices and arcs except the terminal mode, I need to find  the shortest tree rooted at target vertex.</div><div><br></div><div>Someone knows how to do this?</div><div><br></div><div>Thanks!</div>",
    "PostedDate": "2008-12-27T00:51:03.193-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "143989",
    "ThreadId": "39479",
    "Html": "If someone needs to find k-th shrortest paths can use this simple and not fast algorithm.<br>\r\nTo test it do:<br>\r\n<span style=\"font-size:13px\">\r\n<p>IterateGraph(Graph, Weight, StartVertex, EndVertex, NumIterations);</p>\r\n<hr>\r\n<p>private List&lt;List&lt;int&gt;&gt; ListShortPaths = new List&lt;List&lt;int&gt;&gt;();<br>\r\nint FullCount = 0;<br>\r\nVertexPredecessorRecorderObserver&lt;int, Edge&lt;int&gt;&gt; Observer;<br>\r\nList&lt;int&gt; PopulatePath(int Vertex, int FirstVertex, List&lt;int&gt; ShortPath)<br>\r\n{<br>\r\nShortPath.Add(Vertex);<br>\r\nif (Observer.VertexPredecessors.ContainsKey(Vertex) &amp;&amp; Vertex != FirstVertex)<br>\r\nPopulatePath(Observer.VertexPredecessors[Vertex].Source, FirstVertex, ShortPath);</p>\r\n<p>return ShortPath;<br>\r\n}<br>\r\nprivate void IterateGraph(AdjacencyGraph&lt;int, Edge&lt;int&gt;&gt; graph, MyDictionary&lt;Edge&lt;int&gt;, double&gt; Weight, int IDStazA, int IDStazB, int NumeroMaxIterazioni)<br>\r\n{<br>\r\nint ShortPathCount = 0;</p>\r\n<p>DijkstraShortestPathAlgorithm&lt;int, Edge&lt;int&gt;&gt; Algo;<br>\r\nObserver = new VertexPredecessorRecorderObserver&lt;int, Edge&lt;int&gt;&gt;();<br>\r\nAlgo = new DijkstraShortestPathAlgorithm&lt;int, Edge&lt;int&gt;&gt;(graph, e =&gt; Weight.GetWeight(e));<br>\r\nusing (ObserverScope.Create(Algo, Observer))<br>\r\nAlgo.Compute(IDStazA);</p>\r\n<p>List&lt;int&gt; ShortPath = PopulatePath(IDStazB, IDStazA, new List&lt;int&gt;());<br>\r\nShortPath.Reverse();</p>\r\n<p>ShortPathCount = ShortPath.Count; </p>\r\n<p>int j = 0;<br>\r\n<br>\r\nint A = 0;<br>\r\nint B = 0;</p>\r\n<p>if (ShortPathCount &gt; 1)<br>\r\n{<br>\r\nListShortPaths.Add(ShortPath);</p>\r\n<p>for (int i = ShortPathCount - 2; i &gt;= 0; i--)<br>\r\n{<br>\r\nj = i + 1;<br>\r\nA = ShortPath[j];<br>\r\nB = ShortPath[i];</p>\r\n<p>var Edges = graph.Edges.Where(Ed =&gt; Ed.Source == B &amp;&amp; Ed.Target == A).ToList();</p>\r\n<p>foreach (var Edge in Edges)<br>\r\n{<br>\r\ngraph.RemoveEdge(Edge);<br>\r\n}<br>\r\n}<br>\r\nFullCount++;<br>\r\nif (FullCount &lt; NumeroMaxIterazioni)<br>\r\nIterateGraph(graph, Weight, IDStazA, IDStazB, NumeroMaxIterazioni);<br>\r\n}<br>\r\n}</p>\r\n</span>\r\n",
    "PostedDate": "2009-01-02T06:04:15.5-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "144248",
    "ThreadId": "39479",
    "Html": "I've implemented the Hoffman-Pavlet algorithm - <a href=\"http://portal.acm.org/citation.cfm?doid=320998.321004\">http://portal.acm.org/citation.cfm?doid=320998.321004</a> -. See <a href=\"http://www.codeplex.com/quickgraph/Wiki/View.aspx?title=Ranked Shortest Path&referringTitle=User Manual\">http://www.codeplex.com/quickgraph/Wiki/View.aspx?title=Ranked%20Shortest%20Path&amp;referringTitle=User%20Manual</a>\r\n",
    "PostedDate": "2009-01-04T15:10:24.95-08:00",
    "UserRole": "Owner",
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "144321",
    "ThreadId": "39479",
    "Html": "Hi, thanks for you work.<div><br></div><div>I've a question: Can I use it with a non bidirectional graph? I've seen that the extension method is active only for this type of graph.</div><div><br></div><div>bye.</div>",
    "PostedDate": "2009-01-05T01:09:53.943-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "144351",
    "ThreadId": "39479",
    "Html": "BidirectionalGraph is needed to compute the first minimum tree on the reversed graph. What other kind of graph are you looking to use?\r\n",
    "PostedDate": "2009-01-05T03:32:11.623-08:00",
    "UserRole": "Owner",
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "144359",
    "ThreadId": "39479",
    "Html": "Hi, I have a graph that not necessarily is bidirectional.<div><br></div><div>Take vertices A and B, A is connected to B but not necessarily B is connected to A.</div><div><br></div><div>Thanks.</div>",
    "PostedDate": "2009-01-05T04:11:48.433-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "144413",
    "ThreadId": "39479",
    "Html": "<p>You are confuising bi-connected graph and bi-directional graph. Your example will work perfectly fine, you simply need to use a datastructure that implement IBidirectional&lt;TVertex,TEdge&gt;.</p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2009-01-05T08:28:44.343-08:00",
    "UserRole": "Owner",
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "144458",
    "ThreadId": "39479",
    "Html": "Ok, sorry.<div><br></div><div>I've seen the extension method (To bidirectional) with the new changeset.Thanks!</div><div><br></div><div>I've a problem. Executing the code below, it returns always (KeyNotFoundException) Error: key not found in the dictionary:</div><div><br></div><div><div>            IBidirectionalGraph&lt;int, Edge&lt;int&gt;&gt; g1 = g.ToBidirectionalGraph();</div><div><br></div><div>            int Source = 1;</div><div>            int Target = 33;</div><div><br></div><div>            int pathCount = 5;</div><div><br></div><div>            foreach (IEnumerable&lt;Edge&lt;int&gt;&gt; path in g1.RankedShortestPathHoffmanPavley(E=&gt; 5, Source, Target, pathCount))</div><div>            {</div><div>            }</div><div><br></div><div>Bye.</div></div>",
    "PostedDate": "2009-01-05T10:17:40.12-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "144508",
    "ThreadId": "39479",
    "Html": "Can you please post the stacktrace of this exception? Where does it throw exactly the exception.\r\n",
    "PostedDate": "2009-01-05T13:15:48.763-08:00",
    "UserRole": "Owner",
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "144631",
    "ThreadId": "39479",
    "Html": "I've created a new Issue Tracker with attached my serialized adjacency graph.<div><br></div><div>Bye.</div>",
    "PostedDate": "2009-01-05T23:20:05.86-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "144780",
    "ThreadId": "39479",
    "Html": "Fixed.\r\n",
    "PostedDate": "2009-01-06T10:30:58.1-08:00",
    "UserRole": "Owner",
    "MarkedAsAnswerDate": null
  }
]