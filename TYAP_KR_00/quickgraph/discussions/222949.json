[
  {
    "Id": "478171",
    "ThreadId": "222949",
    "Html": "<p>Hello,</p>\r\n<p>I am having a problem with your IEdge&lt;TVertex&gt; interface because I have a graph that contains verticies of&nbsp;two types (IEntity and object).&nbsp; Let me psuedo-code this out for you...</p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre><span style=\"color:blue\">interface</span> IEntity { <span style=\"color:green\">// contents are unimportant }</span>\r\n<span style=\"color:blue\">interface</span> IEntityRelator : IEdge&lt;IEntity&gt;  <span style=\"color:green\">// this relates two entities</span>\r\n<span style=\"color:blue\">interface</span> IMetadataProvider <span style=\"color:green\">// I want this to relate an IEntity to an object.</span>\r\n</pre>\r\n</div>\r\n<p>I was wondering how you recommend I go forward?&nbsp; Instead of assuming that an edge always connects Vertices of the same type, would it be possible to make IEdge&lt;TVertex&gt; instead be IEdge&lt;TSource, TTarget&gt;?&nbsp; This would still allow an edge between vertices of one type (IEdge&lt;IEntity, IEntity&gt;), but would also allow edges between vertices of multiple types (IEdge&lt;IEntity, object&gt;).</p>\r\n<p>Thank you for any advice you can offer,</p>\r\n<p>John</p>",
    "PostedDate": "2010-08-09T08:47:20.82-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "479933",
    "ThreadId": "222949",
    "Html": "<p>I got around this problem in my project by creating an abstract class to be the TVertex type, and then I had two subclasses for the two types of vertices I needed.</p>",
    "PostedDate": "2010-08-12T15:09:44.943-07:00",
    "UserRole": "Developer",
    "MarkedAsAnswerDate": null
  }
]