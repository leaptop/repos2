[
  {
    "Id": "102409",
    "ThreadId": "30792",
    "Html": "Hi all.<br>\r\n<br>\r\nI'm using quick graph in my project and I need to know the number of paths from the start vertex to the end vertex, it doesn't matter the size of the path, just the number of paths. I searched in this API but it hasn't a way to do this. does it have?<br>\r\n<br>\r\nDoes anyone know how can I implement this? I'm studying the possibility of implement a kind of DFS algorithm, but with some changes to do this? Is it the best solution or is there a better one?<br>\r\n<br>\r\nThanks a lot.<br>\r\n<br>\r\n<br>\r\n<br>\r\n",
    "PostedDate": "2008-07-03T05:08:41.81-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "275350",
    "ThreadId": "30792",
    "Html": "<p>Although I have another task to do, I need the same problem solved.</p>\r\n<p>I have a DAG and have to get to know all possible subgraphs between a vertex source and a vertex sink, no matter how long the route is. The edges are also not weighted.</p>",
    "PostedDate": "2010-01-10T07:29:13.88-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "427831",
    "ThreadId": "30792",
    "Html": "<p>the following code will give you th enumber and routes of all paths found in a Bidirectional graph using the&nbsp; HoffmanPavley algorith.</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; BidirectionalGraph&lt;string, TaggedEdge&lt;string, string&gt;&gt; mvGraph2 = new BidirectionalGraph&lt;string, TaggedEdge&lt;string, string&gt;&gt;();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // UndirectedGraph&lt;string, TaggedEdge&lt;string, string&gt;&gt; mvGraph2 = new UndirectedGraph&lt;string, TaggedEdge&lt;string, string&gt;&gt;();</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mvGraph2.AddVerticesAndEdge(new TaggedEdge&lt;string, string&gt;(&quot;P1a&quot;, &quot;I1&quot;, &quot;P1a-I1&quot;));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mvGraph2.AddVerticesAndEdge(new TaggedEdge&lt;string, string&gt;(&quot;I1&quot;, &quot;P1a&quot;, &quot;I1-P1a&quot;));</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mvGraph2.AddVerticesAndEdge(new TaggedEdge&lt;string, string&gt;(&quot;P1a&quot;, &quot;I3&quot;, &quot;P1a-I3&quot;));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mvGraph2.AddVerticesAndEdge(new TaggedEdge&lt;string, string&gt;(&quot;I3&quot;, &quot;P1a&quot;, &quot;I3-P1a&quot;));</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mvGraph2.AddVerticesAndEdge(new TaggedEdge&lt;string, string&gt;(&quot;I1&quot;, &quot;I2&quot;, &quot;I1-I2&quot;));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mvGraph2.AddVerticesAndEdge(new TaggedEdge&lt;string, string&gt;(&quot;I2&quot;, &quot;I1&quot;, &quot;I2-I1&quot;));</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mvGraph2.AddVerticesAndEdge(new TaggedEdge&lt;string, string&gt;(&quot;I1&quot;, &quot;I3&quot;, &quot;I1-I3&quot;));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mvGraph2.AddVerticesAndEdge(new TaggedEdge&lt;string, string&gt;(&quot;I3&quot;, &quot;I1&quot;, &quot;I3-I1&quot;));</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mvGraph2.AddVerticesAndEdge(new TaggedEdge&lt;string, string&gt;(&quot;I3&quot;, &quot;I2&quot;, &quot;I3-I2&quot;));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mvGraph2.AddVerticesAndEdge(new TaggedEdge&lt;string, string&gt;(&quot;I2&quot;, &quot;I3&quot;, &quot;I2-I3&quot;));</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mvGraph2.AddVerticesAndEdge(new TaggedEdge&lt;string, string&gt;(&quot;I3&quot;, &quot;Leach&quot;, &quot;I3-Leach&quot;));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mvGraph2.AddVerticesAndEdge(new TaggedEdge&lt;string, string&gt;(&quot;Leach&quot;, &quot;I3&quot;, &quot;Leach-I3&quot;));</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mvGraph2.AddVerticesAndEdge(new TaggedEdge&lt;string, string&gt;(&quot;I2&quot;, &quot;Leach&quot;, &quot;I2-Leach&quot;));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mvGraph2.AddVerticesAndEdge(new TaggedEdge&lt;string, string&gt;(&quot;Leach&quot;, &quot;I2&quot;, &quot;Leach-I2&quot;));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; HoffmanPavleyRankedShortestPathAlgorithm&lt;string, TaggedEdge&lt;string, string&gt;&gt; test1 = new HoffmanPavleyRankedShortestPathAlgorithm&lt;string, TaggedEdge&lt;string, string&gt;&gt;(mvGraph2, E =&gt; 1.0);</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; test1.ShortestPathCount = 10;</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //int.MaxValue;</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; test1.SetRootVertex(&quot;P1a&quot;);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; test1.SetRootVertex(&quot;Leach&quot;);</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // test1.Compute();</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; test1.Compute(&quot;P1a&quot;, &quot;Leach&quot;);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.Diagnostics.Trace.WriteLine(&quot;Paths Found = &quot; + test1.ComputedShortestPathCount.ToString() );</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; foreach (IEnumerable&lt;TaggedEdge&lt;string, string&gt;&gt; path in test1.ComputedShortestPaths)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.Diagnostics.Trace.WriteLine(&quot;Path Found.....&quot;);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; foreach (var edge in path)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.Diagnostics.Trace.WriteLine(edge);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>",
    "PostedDate": "2010-04-06T06:06:33.187-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "428227",
    "ThreadId": "30792",
    "Html": "<p>Thanx a lot!</p>",
    "PostedDate": "2010-04-07T03:40:14.923-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]