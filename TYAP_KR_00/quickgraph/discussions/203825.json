[
  {
    "Id": "414240",
    "ThreadId": "203825",
    "Html": "<p>&nbsp;</p>\r\n<pre><div style=\"color:Black;background-color:White\"><pre><p>Hello</p><p>I have that code:</p>\r\n</pre>\r\n<pre>...\r\n\r\n<span style=\"color:Blue\">var</span> tryGetPaths = _graph.ShortestPathsDijkstra(_edgeCost,1640);\r\n        \r\n<span style=\"color:Blue\">int</span> target = 3562;\r\nIEnumerable&gt; path;\r\n<span style=\"color:Blue\">if</span> (tryGetPaths(target, <span style=\"color:Blue\">out</span> path))\r\n     <span style=\"color:Blue\">foreach</span> (<span style=\"color:Blue\">var</span> edge <span style=\"color:Blue\">in</span> path)\r\n           { ... }\r\n</pre>\r\n</div>\r\n</pre>\r\n<pre>I know I can get the edges cost doing that: </pre>\r\n<pre><div style=\"color:Black;background-color:White\"><pre><span style=\"color:Blue\">double</span> _value = 0;\r\n<span style=\"color:Blue\">foreach</span> (<span style=\"color:Blue\">var</span> edge <span style=\"color:Blue\">in</span> path)\r\n{       \r\n       _edgeCost.TryGetValue(edge, <span style=\"color:Blue\">out</span> _value);    \r\n       _value += value;        \r\n}\r\n</pre>\r\n</div>\r\n</pre>\r\n<pre></pre>\r\n<pre>Is there any other way to do that?</pre>\r\n<pre></pre>\r\n<pre>Thanks</pre>\r\n<p>&nbsp;</p>",
    "PostedDate": "2010-03-04T09:58:12.907-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "419245",
    "ThreadId": "203825",
    "Html": "<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:#000000\">Someone put this code in a post. There you can have the sum (Distance) from a source (root) node to all the nodes</span></pre>\r\n<pre><span style=\"color:Green\">// Define some lengths to the streets            </span>\r\n            Dictionary&lt;Edge&lt;<span style=\"color:Blue\">string</span>&gt;, <span style=\"color:Blue\">double</span>&gt; edgeCost = <span style=\"color:Blue\">new</span> Dictionary&lt;Edge&lt;<span style=\"color:Blue\">string</span>&gt;, <span style=\"color:Blue\">double</span>&gt;(graph.EdgeCount);\r\n            edgeCost.Add(a_e, 1);\r\n            edgeCost.Add(e_f, 1);\r\n            edgeCost.Add(f_g, 5);\r\n            edgeCost.Add(g_h, 1);\r\n\r\nDijkstraShortestPathAlgorithm&lt;<span style=\"color:Blue\">string</span>, Edge&lt;<span style=\"color:Blue\">string</span>&gt;&gt; dijkstra = <span style=\"color:Blue\">new</span> DijkstraShortestPathAlgorithm&lt;<span style=\"color:Blue\">string</span>, Edge&lt;<span style=\"color:Blue\">string</span>&gt;&gt;(graph, AlgorithmExtensions.GetIndexer&lt;Edge&lt;<span style=\"color:Blue\">string</span>&gt;, <span style=\"color:Blue\">double</span>&gt;(edgeCost));\r\n            \r\n            <span style=\"color:Green\">// attach a distance observer to give us the shortest path distances</span>\r\n            VertexDistanceRecorderObserver&lt;<span style=\"color:Blue\">string</span>, Edge&lt;<span style=\"color:Blue\">string</span>&gt;&gt; distObserver = <span style=\"color:Blue\">new</span> VertexDistanceRecorderObserver&lt;<span style=\"color:Blue\">string</span>, Edge&lt;<span style=\"color:Blue\">string</span>&gt;&gt;(AlgorithmExtensions.GetIndexer&lt;Edge&lt;<span style=\"color:Blue\">string</span>&gt;, <span style=\"color:Blue\">double</span>&gt;(edgeCost));\r\n            distObserver.Attach(dijkstra);\r\n\r\n            <span style=\"color:Green\">// Set the source</span>\r\n            dijkstra.Compute(<span style=\"color:#A31515\">&quot;A&quot;</span>);\r\n           \r\n            <span style=\"color:Blue\">foreach</span> (KeyValuePair&lt;<span style=\"color:Blue\">string</span>, <span style=\"color:Blue\">double</span>&gt; kvp <span style=\"color:Blue\">in</span> distObserver.Distances)\r\n                Console.WriteLine(<span style=\"color:#A31515\">&quot;Distance from root to node {0} is {1}&quot;</span>, kvp.Key, kvp.Value);\r\n</pre>\r\n</div>",
    "PostedDate": "2010-03-17T07:59:01.603-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]