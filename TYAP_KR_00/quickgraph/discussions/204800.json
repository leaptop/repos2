[
  {
    "Id": "417572",
    "ThreadId": "204800",
    "Html": "<p><span style=\"font-family:Consolas;font-size:x-small\"><span style=\"font-family:Consolas;font-size:x-small\">\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\"><strong>Consider the following code:</strong></span></pre>\r\n<pre><span style=\"color:Blue\">using</span> System;\r\n<span style=\"color:Blue\">using</span> System.Collections.Generic;\r\n<span style=\"color:Blue\">using</span> System.Linq;\r\n<span style=\"color:Blue\">using</span> System.Text;\r\n\r\n<span style=\"color:Blue\">using</span> System.Runtime.Serialization;\r\n<span style=\"color:Blue\">using</span> System.IO;\r\n\r\n<span style=\"color:Blue\">using</span> QuickGraph;\r\n<span style=\"color:Blue\">using</span> QuickGraph.Algorithms;\r\n\r\n<span style=\"color:Blue\">namespace</span> SerializationCheck\r\n{\r\n    <span style=\"color:Blue\">class</span> Program\r\n    {\r\n        <span style=\"color:Blue\">static</span> <span style=\"color:Blue\">void</span> Main(<span style=\"color:Blue\">string</span>[] args)\r\n        {\r\n            GraphNode node = PopulateNode();\r\n\r\n            <span style=\"color:Blue\">string</span> data = SerializeNode(node);\r\n\r\n            Console.WriteLine(<span style=\"color:#A31515\">&quot;Node &quot;</span> + node.NodeName + <span style=\"color:#A31515\">&quot; serialized as : &quot;</span> + data);\r\n\r\n            GraphNode deserialized = DeserializeNode&lt;GraphNode&gt;(data);\r\n\r\n            <span style=\"color:Blue\">bool</span> <span style=\"color:Blue\">equals</span> = deserialized.Equals(deserialized);\r\n        }\r\n\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">static</span> GraphNode PopulateNode()\r\n        {\r\n            <span style=\"color:Blue\">var</span> parentA = <span style=\"color:Blue\">new</span> GraphNode(<span style=\"color:#A31515\">&quot;ParentA&quot;</span>, Guid.NewGuid());\r\n            <span style=\"color:Blue\">var</span> childA1 = <span style=\"color:Blue\">new</span> GraphNode(<span style=\"color:#A31515\">&quot;ChildA1&quot;</span>, Guid.NewGuid());\r\n            <span style=\"color:Blue\">var</span> childA2 = <span style=\"color:Blue\">new</span> GraphNode(<span style=\"color:#A31515\">&quot;ChildA2&quot;</span>, Guid.NewGuid());\r\n\r\n            parentA.AddVerticesAndEdge(<span style=\"color:Blue\">new</span> SEdge&lt;GraphNode&gt;(parentA, childA1));\r\n            parentA.AddVerticesAndEdge(<span style=\"color:Blue\">new</span> SEdge&lt;GraphNode&gt;(parentA, childA2));\r\n\r\n            <span style=\"color:Blue\">return</span> parentA;\r\n        }\r\n\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">static</span> <span style=\"color:Blue\">string</span> SerializeNode(GraphNode obj)\r\n        {\r\n            <span style=\"color:Blue\">try</span>\r\n            {\r\n                DataContractSerializer dataContractSerializer = <span style=\"color:Blue\">new</span> DataContractSerializer(obj.GetType());\r\n                String text;\r\n                <span style=\"color:Blue\">using</span> (MemoryStream memoryStream = <span style=\"color:Blue\">new</span> MemoryStream())\r\n                {\r\n                    dataContractSerializer.WriteObject(memoryStream, obj);\r\n\r\n                    <span style=\"color:Blue\">byte</span>[] data = <span style=\"color:Blue\">new</span> <span style=\"color:Blue\">byte</span>[memoryStream.Length];\r\n\r\n                    Array.Copy(memoryStream.GetBuffer(), data, data.Length);\r\n\r\n                    text = Encoding.UTF8.GetString(data);\r\n                }\r\n                <span style=\"color:Blue\">return</span> text;\r\n            }\r\n            <span style=\"color:Blue\">catch</span> (Exception)\r\n            {\r\n                <span style=\"color:Blue\">throw</span>;\r\n            }\r\n        }\r\n\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">static</span> T DeserializeNode&lt;T&gt;(<span style=\"color:Blue\">string</span> xml)\r\n        {\r\n            <span style=\"color:Blue\">try</span>\r\n            {\r\n                DataContractSerializer dataContractSerializer = <span style=\"color:Blue\">new</span> DataContractSerializer(<span style=\"color:Blue\">typeof</span>(GraphNode));\r\n\r\n                UTF8Encoding enc = <span style=\"color:Blue\">new</span> UTF8Encoding();\r\n                <span style=\"color:Blue\">byte</span>[] data = enc.GetBytes(xml);\r\n\r\n                MemoryStream ms = <span style=\"color:Blue\">new</span> MemoryStream();\r\n                ms.Write(data, 0, data.Length);\r\n\r\n                ms.Position = 0;\r\n\r\n                <span style=\"color:Blue\">object</span> deserialized = dataContractSerializer.ReadObject(ms);\r\n                T obj = (T)deserialized;\r\n                <span style=\"color:Blue\">return</span> obj;\r\n            }\r\n            <span style=\"color:Blue\">catch</span> (Exception)\r\n            {\r\n                <span style=\"color:Blue\">throw</span>;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    [DataContract(IsReference = <span style=\"color:Blue\">true</span>)]\r\n    <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">class</span> GraphNode\r\n    {\r\n        [DataMember]\r\n        <span style=\"color:Blue\">private</span> BidirectionalGraph&lt;GraphNode, SEdge&lt;GraphNode&gt;&gt; _dependencyTree;\r\n\r\n        <span style=\"color:Blue\">private</span> <span style=\"color:Blue\">bool</span> _deserializing;\r\n\r\n        [DataMember]\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">string</span> NodeName { <span style=\"color:Blue\">get</span>; <span style=\"color:Blue\">set</span>; }\r\n\r\n        [DataMember]\r\n        <span style=\"color:Blue\">public</span> Guid NodeID { <span style=\"color:Blue\">get</span>; <span style=\"color:Blue\">set</span>; }\r\n\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">override</span> <span style=\"color:Blue\">int</span> GetHashCode()\r\n        {\r\n            <span style=\"color:Blue\">if</span> (_deserializing)\r\n            {\r\n                Console.WriteLine(<span style=\"color:#A31515\">&quot;Failed...&quot;</span>);\r\n            }\r\n            System.Diagnostics.Debug.Assert(_deserializing == <span style=\"color:Blue\">false</span> &amp;&amp; !Guid.Equals(Guid.Empty, NodeID), <span style=\"color:#A31515\">&quot;Object hasn't been fully deserialized yet - invalid state&quot;</span>);\r\n            <span style=\"color:Blue\">return</span> NodeID.GetHashCode();\r\n        }\r\n\r\n        <span style=\"color:Blue\">public</span> GraphNode(<span style=\"color:Blue\">string</span> name, Guid id)\r\n        {\r\n            <span style=\"color:Green\">// WCF serialization won't call constructor, so perform construction in the deserialization event handler</span>\r\n            OnDeserialized(<span style=\"color:Blue\">new</span> StreamingContext());\r\n\r\n            NodeName = name;\r\n            NodeID = id;\r\n        }\r\n\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">void</span> AddVerticesAndEdge(SEdge&lt;GraphNode&gt; edge)\r\n        {\r\n            _dependencyTree.AddVerticesAndEdge(edge);\r\n        }\r\n\r\n        [OnDeserialized]\r\n        <span style=\"color:Blue\">private</span> <span style=\"color:Blue\">void</span> OnDeserialized(StreamingContext context)\r\n        {\r\n            <span style=\"color:Blue\">if</span> (_dependencyTree == <span style=\"color:Blue\">null</span>)\r\n            {\r\n                _dependencyTree = <span style=\"color:Blue\">new</span> BidirectionalGraph&lt;GraphNode, SEdge&lt;GraphNode&gt;&gt;();\r\n            }\r\n\r\n            Console.WriteLine(<span style=\"color:#A31515\">&quot;Completed Deserialization of Node &quot;</span> + NodeName);\r\n            _deserializing = <span style=\"color:Blue\">false</span>;\r\n        }\r\n\r\n        [OnSerialized]\r\n        <span style=\"color:Blue\">private</span> <span style=\"color:Blue\">void</span> OnSerialized(StreamingContext context)\r\n        {\r\n            Console.WriteLine(<span style=\"color:#A31515\">&quot;Completed Serialization of Node &quot;</span> + NodeName);\r\n        }\r\n\r\n        [OnDeserializing]\r\n        <span style=\"color:Blue\">private</span> <span style=\"color:Blue\">void</span> OnDeserializing(StreamingContext context)\r\n        {\r\n            Console.WriteLine(<span style=\"color:#A31515\">&quot;Started Deserialization of Node &quot;</span> + NodeName);\r\n            _deserializing = <span style=\"color:Blue\">true</span>;\r\n        }\r\n\r\n        [OnSerializing]\r\n        <span style=\"color:Blue\">private</span> <span style=\"color:Blue\">void</span> OnSerializing(StreamingContext context)\r\n        {\r\n            Console.WriteLine(<span style=\"color:#A31515\">&quot;Started Serialization of Node &quot;</span> + NodeName);\r\n        }\r\n    }\r\n}\r\n\r\nThe serialization performs as expected, however deserialization calls GetHashCode() prior to the object having been completely de-serialized. My first guess is because the VertexEdgeDictionary inherits from Dictionary&lt;&gt;. </pre>\r\n<pre>Is this a bug? If not, what is an appropriate work around which preserves the potential self-referencing nature of the GraphNode?</pre>\r\n</div>\r\n</span></span></p>",
    "PostedDate": "2010-03-12T10:44:01.923-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]