[
  {
    "Id": "201717",
    "ThreadId": "59583",
    "Html": "<p>I am trying to use the&nbsp;EdmondsKarpMaximumFlowAlgorithm object but am unsure what I am supposed to pass in for the third constructor parameter of type&nbsp;<em>System.Collections.Generic.Dictionary&lt;TEdge,TEdge&gt;</em>. &nbsp;If I pass an empty dictionary I get a KeyNotFoundException. &nbsp;What am I supposed to fill the Dictionary with?</p>\r\n<p>&nbsp;</p>\r\n<p>Is there a usage example?</p>\r\n<p>&nbsp;</p>\r\n<p>Thanks!</p>",
    "PostedDate": "2009-06-15T12:48:39.847-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "228725",
    "ThreadId": "59583",
    "Html": "<p>Hi,&nbsp; a simple way to create your third argument is to used the ReversedEdgeAugmentorAlgorithm. here is a simple full example of how to use a maximum flow algorith:</p>\r\n<p>static Edge&lt;string&gt; MyEdgeFactory(string source, string target)<br>{<br>&nbsp;return new Edge&lt;string&gt;(source, target);<br>}</p>\r\n<p>static double ComputeCapacity(Edge&lt;string&gt; curEdge)<br>{<br>&nbsp;if (edgeCapacitiesDictionary.ContainsKey(curEdge) == true)<br>&nbsp;&nbsp;return edgeCapacitiesDictionary[curEdge];<br>&nbsp;else<br>&nbsp;&nbsp;return 0; //you may want to put unused reversed edge to 0<br>}</p>\r\n<p>static public Dictionary&lt;Edge&lt;string&gt;, double&gt; edgeCapacitiesDictionary = new Dictionary&lt;Edge&lt;string&gt;, double&gt;();<br>static void Main(string[] args)<br>{ <br>////////////////////////////////////////<br>// test maximum flow algorith<br>//////////////////////////////////////////<br>var g = new AdjacencyGraph&lt;string, Edge&lt;string&gt;&gt;(true);<br>string source = &quot;A&quot;;<br>string sink = &quot;G&quot;;</p>\r\n<p>//Vertices<br>//////////////<br>g.AddVertex(&quot;A&quot;);g.AddVertex(&quot;B&quot;);g.AddVertex(&quot;C&quot;);g.AddVertex(&quot;D&quot;);<br>g.AddVertex(&quot;E&quot;);g.AddVertex(&quot;F&quot;);g.AddVertex(&quot;G&quot;);</p>\r\n<p>//Edge<br>////////////<br>var edgesList = new List&lt;Edge&lt;string&gt;&gt;();<br>var ad = new Edge&lt;string&gt;(&quot;A&quot;, &quot;D&quot;); g.AddEdge(ad); edgeCapacitiesDictionary.Add(ad, 3);<br>var ab = new Edge&lt;string&gt;(&quot;A&quot;, &quot;B&quot;); g.AddEdge(ab); edgeCapacitiesDictionary.Add(ab, 3);<br>var bc = new Edge&lt;string&gt;(&quot;B&quot;, &quot;C&quot;); g.AddEdge(bc); edgeCapacitiesDictionary.Add(bc, 4);<br>var ca = new Edge&lt;string&gt;(&quot;C&quot;, &quot;A&quot;); g.AddEdge(ca); edgeCapacitiesDictionary.Add(ca, 3);<br>var cd = new Edge&lt;string&gt;(&quot;C&quot;, &quot;D&quot;); g.AddEdge(cd); edgeCapacitiesDictionary.Add(cd, 1);<br>var de = new Edge&lt;string&gt;(&quot;D&quot;, &quot;E&quot;); g.AddEdge(de); edgeCapacitiesDictionary.Add(de, 2);<br>var df = new Edge&lt;string&gt;(&quot;D&quot;, &quot;F&quot;); g.AddEdge(df); edgeCapacitiesDictionary.Add(df, 6);<br>var eb = new Edge&lt;string&gt;(&quot;E&quot;, &quot;B&quot;); g.AddEdge(eb); edgeCapacitiesDictionary.Add(eb, 1);<br>var ce = new Edge&lt;string&gt;(&quot;C&quot;, &quot;E&quot;); g.AddEdge(ce); edgeCapacitiesDictionary.Add(ce, 2);<br>var eg = new Edge&lt;string&gt;(&quot;E&quot;, &quot;G&quot;); g.AddEdge(eg); edgeCapacitiesDictionary.Add(eg, 1);<br>var fg = new Edge&lt;string&gt;(&quot;F&quot;, &quot;G&quot;); g.AddEdge(fg); edgeCapacitiesDictionary.Add(fg, 9);</p>\r\n<p>/////////////////////////////////////<br>// creating the augmentor<br>////////////////////////////////////<br>var reversedEdgeAugmentor = new ReversedEdgeAugmentorAlgorithm&lt;string, Edge&lt;string&gt;&gt;(g, MyEdgeFactory);<br>reversedEdgeAugmentor.AddReversedEdges();</p>\r\n<p>//&nbsp;(other option)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new PushRelabelMaximumFlowAlgorithm<br>MaximumFlowAlgorithm&lt;string, Edge&lt;string&gt;&gt; algo = new EdmondsKarpMaximumFlowAlgorithm&lt;string, Edge&lt;string&gt;&gt;(g, /*e =&gt; 2*/ComputeCapacity, reversedEdgeAugmentor.ReversedEdges);</p>\r\n<p>algo.Compute(source,sink);</p>\r\n<p>Console.WriteLine(&quot;MaxFlow: {0}&quot;, algo.MaxFlow);</p>\r\n<p>Console.WriteLine(&quot;Press &lt;ENTER&gt; to complete&quot;);<br>Console.ReadLine();</p>\r\n<p>}</p>\r\n<p>note: i have use the graph&nbsp;describe at&nbsp;<a href=\"http://en.wikipedia.org/wiki/Edmonds-Karp_algorithm#Example\">http://en.wikipedia.org/wiki/Edmonds-Karp_algorithm#Example</a></p>\r\n<p>have a nice day</p>\r\n<p><span style=\"font-size:x-small;color:#2b91af\">&nbsp;</span></p>",
    "PostedDate": "2009-08-28T08:01:56.93-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "228834",
    "ThreadId": "59583",
    "Html": "<p>or simpler:</p>\r\n<p><span style=\"font-size:x-small\">\r\n<div style=\"color:Black;background-color:White\">\r\n<pre>TryFunc&lt;<span style=\"color:Blue\">string</span>, Edge&lt;<span style=\"color:Blue\">string</span>&gt;&gt; flowPredecessors;\r\n<span style=\"color:Blue\">double</span> flow = g.MaximumFlowEdmondsKarp(\r\n    ComputeCapacity, \r\n    source, sink, \r\n    <span style=\"color:Blue\">out</span> flowPredecessors);\r\n\r\nAlso, in this case, you should use SEdge&lt;string&gt; instead of Edge&lt;string&gt;.</pre>\r\n</div>\r\n</span></p>",
    "PostedDate": "2009-08-28T13:14:20.727-07:00",
    "UserRole": "Owner",
    "MarkedAsAnswerDate": null
  }
]