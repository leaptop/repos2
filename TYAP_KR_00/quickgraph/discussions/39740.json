[
  {
    "Id": "131927",
    "ThreadId": "39740",
    "Html": "<em></em>Hi everyone:<br>\r\n<br>\r\nWe\r\nare working with version 2.x of Quickgraph, i am aware that you don't\r\nprovide any support for old 2.x code any more but i have a problem with\r\nDijkstra Algorithm and maybe you would be so kind to answer me a simple\r\nquestion.<br>\r\n<br>\r\nOur problem is that we have implemented an A algorithm and testing\r\nthe shortest path from our algorithm against Dijkstra result we are\r\nnoticing that sometimes the result from Dijkstra is a larger path than\r\nthe A one.<br>\r\n<br>\r\nI have to point that our A algorithm implementation doesn't use any\r\ntype of heuristic function and we are using a quite huge graph, that is\r\naround 25000 nodes and 70000 arcs.<br>\r\n<br>\r\nI've been seeking for source code changes on 3.0 and haven't seen any changes on the algorithm.<br>\r\n<br>\r\nAre you aware about any possible bugs on the Dijkstra implementation or its just my algorithm which is wrong?<br>\r\n<br>\r\nSincerely,<br>\r\n<br>\r\nMiguel Angel.<br>\r\n<br>\r\n<br>\r\nPS:\r\nhere is a sample of our results in testing, its a log from a computer\r\nwhich is iterating shortest path from random &quot;Vertice1&quot; to random\r\n&quot;Vertice2&quot; on both algorithms:<br>\r\n<br>\r\nresult is not equal: Cost: A = 7735,2; Dijkstra = 7737,7<br>\r\n<br>\r\nresult is not equal: Cost: A = 3556; Dijkstra = 3579<br>\r\n<br>\r\nresult is equal.<br>\r\n<br>\r\nresult is not equal: Cost: A = 5068,2; Dijkstra = 5072,2<br>\r\n<br>\r\nresult is not equal: Cost: A= 7768; Dijkstra = 7977<br>\r\n<br>\r\nresult is equal.<br>\r\n<br>\r\nresult is equal.<br>\r\n<br>\r\nresult is equal.<br>\r\n<br>\r\nresult is not equal: Cost: A = 5527; Dijkstra = 5410\r\n",
    "PostedDate": "2008-11-12T00:33:09.11-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "132224",
    "ThreadId": "39740",
    "Html": "I also am having some strange results.<br>\r\nI am guessing that you are using the bidirectionalGraph, as Undirected.Dijkstra does not work at this time.<br>\r\n<br>\r\nMy needs are for an undirected graph.  Using the hopefully functional Bidrectional, all edges have been added twice with swapped vertices<br>\r\nI do not care about dead end points.  So for faster run times, I remove them - saves about 30% of cpu time..<br>\r\nie: <br>\r\n    For Each Vertex As PointVertex In Graph.Vertices<br>\r\n            If Graph.InDegree(Vertex) = 1 Then<br>\r\n                If Graph.OutDegree(Vertex) = 1 Then<br>\r\n                        Dim Tag As Integer = Graph.OutEdge(Vertex, 0).Tag<br>\r\n                        DeadEdges.Add(Tag) ' do not want to kill the iterator deleting here<br>\r\n                        DeadEndsThisPass = DeadEndsThisPass + 1<br>\r\n                End If<br>\r\n            End If<br>\r\n    Next<br>\r\n    Remove the DeadEdges from the graph<br>\r\n<br>\r\nSince entering a vertice, which has only one way out (the entrance), will not get us a shorter path to ANYWHERE, <br>\r\nI feel strongly that it should not affect the results of the shortest path process.<br>\r\n<br>\r\nThis is not the case..<br>\r\nDeads Ends REMOVED<br>\r\n=================================<br>\r\nShortest path from 0 to 1: Edges = 209   Distance = 18.6871025766148<br>\r\nShortest path from 0 to 2:   No Path<br>\r\nShortest path from 0 to 3: Edges = 229   Distance = 25.1420981198549<br>\r\nShortest path from 0 to 4: Edges = 279   Distance = 30.185930068833<br>\r\nShortest path from 0 to 5: Edges = 278   Distance = 30.1852232020982<br>\r\nShortest path from 0 to 6: Edges = 279   Distance = 30.1909297394133<br>\r\nShortest path from 0 to 7: Edges = 282   Distance = 30.0787995138543<br>\r\nShortest path from 0 to 8: Edges = 281   Distance = 30.0036287763947<br>\r\nShortest path from 0 to 9: Edges = 280   Distance = 29.9563015749597<br>\r\nShortest path from 0 to 10: Edges = 285   Distance = 30.1029364471016<br>\r\nShortest path from 0 to 11: Edges = 284   Distance = 30.100420657676<br>\r\nShortest path from 0 to 12: Edges = 279   Distance = 30.0861420986841<br>\r\nShortest path from 0 to 13: Edges = 278   Distance = 30.080859530371<br>\r\nShortest path from 0 to 14: Edges = 277   Distance = 30.078852230681<br>\r\nShortest path from 0 to 15: Edges = 276   Distance = 30.0748250836192<br>\r\nShortest path from 0 to 16: Edges = 275   Distance = 30.0647169042368<br>\r\nShortest path from 0 to 17: Edges = 276   Distance = 30.066050328606<br>\r\nShortest path from 0 to 18: Edges = 276   Distance = 30.0703928405923<br>\r\nShortest path from 0 to 19: Edges = 277   Distance = 30.0762113850632<br>\r\nShortest path from 0 to 20: Edges = 278   Distance = 30.0822445408384<br>\r\nShortest path from 0 to 21: Edges = 283   Distance = 30.1869257130482<br>\r\nShortest path from 0 to 22: Edges = 283   Distance = 30.0977362529961<br>\r\nShortest path from 0 to 23: Edges = 280   Distance = 30.0916260071138<br>\r\nShortest path from 0 to 24: Edges = 281   Distance = 30.1977373594932<br>\r\nShortest path from 0 to 25: Edges = 280   Distance = 30.1967825679065<br>\r\nShortest path from 0 to 26: Edges = 281   Distance = 30.0929290774213<br>\r\nShortest path from 0 to 27: Edges = 282   Distance = 30.0941029083026<br>\r\nShortest path from 0 to 28: Edges = 230   Distance = 25.2547387461507<br>\r\nShortest path from 0 to 29: Edges = 230   Distance = 25.1470488312715<br>\r\nShortest path from 0 to 30: Edges = 229   Distance = 25.249641895234<br>\r\nShortest path from 0 to 31: Edges = 374   Distance = 31.2457734131495<br>\r\nShortest path from 0 to 32: Edges = 207   Distance = 18.9107195764928<br>\r\nShortest path from 0 to 33: Edges = 208   Distance = 18.9195743423705<br>\r\nShortest path from 0 to 34: Edges = 206   Distance = 18.8739869214042<br>\r\nShortest path from 0 to 35: Edges = 210   Distance = 18.6878648595076<br>\r\n<br>\r\n<br>\r\nDead Ends PRESENT<br>\r\n============================<br>\r\nShortest path from 0 to 1: Edges = 227   Distance = 19.0100456527529<br>\r\nShortest path from 0 to 2:   No Path<br>\r\nShortest path from 0 to 3: Edges = 261   Distance = 26.5644314427133<br>\r\nShortest path from 0 to 4: Edges = 314   Distance = 31.6082941722276<br>\r\nShortest path from 0 to 5: Edges = 313   Distance = 31.6075873054928<br>\r\nShortest path from 0 to 6: Edges = 314   Distance = 31.6132938428079<br>\r\nShortest path from 0 to 7: Edges = 318   Distance = 31.7467679565931<br>\r\nShortest path from 0 to 8: Edges = 316   Distance = 31.4259928797893<br>\r\nShortest path from 0 to 9: Edges = 315   Distance = 31.3786656783543<br>\r\nShortest path from 0 to 10: Edges = 316   Distance = 31.3790951118068<br>\r\nShortest path from 0 to 11: Edges = 314   Distance = 31.3868351149137<br>\r\nShortest path from 0 to 12: Edges = 309   Distance = 31.3725565559218<br>\r\nShortest path from 0 to 13: Edges = 308   Distance = 31.3672739876087<br>\r\nShortest path from 0 to 14: Edges = 307   Distance = 31.3652666879187<br>\r\nShortest path from 0 to 15: Edges = 306   Distance = 31.3612395408569<br>\r\nShortest path from 0 to 16: Edges = 305   Distance = 31.3511313614745<br>\r\nShortest path from 0 to 17: Edges = 305   Distance = 31.3507770247126<br>\r\nShortest path from 0 to 18: Edges = 304   Distance = 31.3449197391847<br>\r\nShortest path from 0 to 19: Edges = 305   Distance = 31.3507382836556<br>\r\nShortest path from 0 to 20: Edges = 306   Distance = 31.3567714394308<br>\r\nShortest path from 0 to 21: Edges = 317   Distance = 31.6386417573992<br>\r\nShortest path from 0 to 22: Edges = 313   Distance = 31.3841507102338<br>\r\nShortest path from 0 to 23: Edges = 310   Distance = 31.3780404643515<br>\r\nShortest path from 0 to 24: Edges = 316   Distance = 31.6201014628878<br>\r\nShortest path from 0 to 25: Edges = 315   Distance = 31.6191466713011<br>\r\nShortest path from 0 to 26: Edges = 311   Distance = 31.379343534659<br>\r\nShortest path from 0 to 27: Edges = 312   Distance = 31.3805173655403<br>\r\nShortest path from 0 to 28: Edges = 262   Distance = 26.6770720690091<br>\r\nShortest path from 0 to 29: Edges = 262   Distance = 26.5693821541298<br>\r\nShortest path from 0 to 30: Edges = 261   Distance = 26.6719752180924<br>\r\nShortest path from 0 to 31: Edges = 341   Distance = 14.0733716554419<br>\r\nShortest path from 0 to 32: Edges = 206   Distance = 20.449694441428<br>\r\nShortest path from 0 to 33: Edges = 207   Distance = 20.4585492073057<br>\r\nShortest path from 0 to 34: Edges = 205   Distance = 20.4129617863394<br>\r\nShortest path from 0 to 35: Edges = 228   Distance = 19.0108079356457<br>\r\n",
    "PostedDate": "2008-11-13T00:30:41.713-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "132474",
    "ThreadId": "39740",
    "Html": "After downloading and referencing the current stock 3.0 release (source version 17438)<br>\r\nI get identical answers with dead ends present, or not.\r\n",
    "PostedDate": "2008-11-13T20:03:16.4-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "133840",
    "ThreadId": "39740",
    "Html": "This discussion has been copied to a work item. Click <a href=\"http://www.codeplex.com/quickgraph/WorkItem/View.aspx?WorkItemId=11662\">here</a> to go to the work item and continue the discussion.",
    "PostedDate": "2008-11-19T21:49:45.34-08:00",
    "UserRole": "Owner",
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "137380",
    "ThreadId": "39740",
    "Html": "<span id=\"ctl00_ctl00_MasterContent_Content_ClosedCommentLabel\">This bug should be fixed now. There was a bug with the new fibonacci heap.<br>\r\n<br>\r\nCross-tested Dijkstra with Floyd-Warshall algorithm on many GraphML sample graphs.</span>\r\n",
    "PostedDate": "2008-12-03T11:51:50.207-08:00",
    "UserRole": "Owner",
    "MarkedAsAnswerDate": null
  }
]