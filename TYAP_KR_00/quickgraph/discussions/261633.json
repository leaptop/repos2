[
  {
    "Id": "628660",
    "ThreadId": "261633",
    "Html": "\r\n<p>I am completely new to this graph theory stuff so be gentle!</p>\r\n<p>I tried rewriting some code I have just done (for an interview test)&nbsp;to&nbsp;calculate all routes between two nodes that do not revisit a node using QuickGraph.</p>\r\n<p>I used the above algorithm but in some cases it seems to returns fewer paths than my code did (as well as writing to the Console!!).</p>\r\n<p>Am I using the wrong algorithm or misusing it?</p>\r\n<p>Here is my old code showing the edges (I'm sure you experts can picture all this in your head - me I get a pad and pencil) and the code snippet doing the calc</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>connectionAB = <span style=\"color:blue\">new</span> Connection(stationA, stationB, 3);\r\nconnectionBA = <span style=\"color:blue\">new</span> Connection(stationB, stationA, 3);\r\nconnectionAD = <span style=\"color:blue\">new</span> Connection(stationA, stationD, 6);\r\nconnectionBC = <span style=\"color:blue\">new</span> Connection(stationB, stationC, 7);\r\nconnectionCD = <span style=\"color:blue\">new</span> Connection(stationC, stationD, 8);\r\nconnectionDE = <span style=\"color:blue\">new</span> Connection(stationD, stationE, 9);\r\nconnectionED = <span style=\"color:blue\">new</span> Connection(stationE, stationD, 9);\r\nconnectionDC = <span style=\"color:blue\">new</span> Connection(stationD, stationC, 9);\r\nconnectionDB = <span style=\"color:blue\">new</span> Connection(stationD, stationB, 5);\r\nconnectionCE = <span style=\"color:blue\">new</span> Connection(stationC, stationE, 3);\r\n\r\n</pre>\r\n</div>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">var</span> a = <span style=\"color:blue\">new</span> HoffmanPavleyRankedShortestPathAlgorithm&lt;Station, Connection&gt;(graph.ToBidirectionalGraph(), GetConnectionCost);\r\na.Compute(start, end);\r\n\r\n<span style=\"color:blue\">foreach</span>(<span style=\"color:blue\">var</span> path <span style=\"color:blue\">in</span> a.ComputedShortestPaths)\r\n{\r\n\t<span style=\"color:blue\">yield</span> <span style=\"color:blue\">return</span> <span style=\"color:blue\">new</span> RouteSummary(path.ToList());\r\n}\r\n\r\n<p>&nbsp;</p><p>This is the output that is common to my old code and the new HoffmanPavley stuff above for all paths from :</p><p>(A) -&gt; 3 -&gt; (B) : 3<br>(A) -&gt; 6 -&gt; (D) -&gt; 5 -&gt; (B) : 11<br>(A) -&gt; 3 -&gt; (B) -&gt; 7 -&gt; (C) : 10<br>(A) -&gt; 6 -&gt; (D) -&gt; 9 -&gt; (C) : 15<br>(A) -&gt; 6 -&gt; (D) -&gt; 5 -&gt; (B) -&gt; 7 -&gt; (C) : 18<br>(A) -&gt; 6 -&gt; (D) : 6<br>(A) -&gt; 3 -&gt; (B) -&gt; 7 -&gt; (C) -&gt; 8 -&gt; (D) : 18<br>(A) -&gt; 3 -&gt; (B) -&gt; 7 -&gt; (C) -&gt; 3 -&gt; (E) -&gt; 9 -&gt; (D) : 22<br>(A) -&gt; 6 -&gt; (D) -&gt; 9 -&gt; (E) : 15<br>(A) -&gt; 3 -&gt; (B) -&gt; 7 -&gt; (C) -&gt; 3 -&gt; (E) : 13<br>(A) -&gt; 6 -&gt; (D) -&gt; 9 -&gt; (C) -&gt; 3 -&gt; (E) : 18</p><p>&nbsp;</p><p>But my code also returns these paths:<br>(A) -&gt; 6 -&gt; (D) -&gt; 5 -&gt; (B) -&gt; 7 -&gt; (C) -&gt; 3 -&gt; (E) : 21<br>(A) -&gt; 3 -&gt; (B) -&gt; 7 -&gt; (C) -&gt; 8 -&gt; (D) -&gt; 9 -&gt; (E) : 27</p><p>&nbsp;</p><p>which appear perfectly valid to me.</p><p>&nbsp;</p><p>Any ideas?</p></pre>\r\n</div>\r\n",
    "PostedDate": "2011-06-16T06:14:39.663-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "628854",
    "ThreadId": "261633",
    "Html": "<div style=\"color: black; background-color: white;\">\r\n<pre>The (non-QuickGraph) code I have looks like this:</pre>\r\n<pre>&nbsp;</pre>\r\n<pre>\t\t<span style=\"color: blue;\">static</span> IEnumerable&lt;IList&lt;IGraphNode&gt;&gt; FindAllNodesBetweenCore(IGraph graph, IGraphNode start, IGraphNode end, IList&lt;IGraphNode&gt; pathSoFar)\r\n\t\t{\r\n\t\t\tpathSoFar = <span style=\"color: blue;\">new</span> List&lt;IGraphNode&gt;(pathSoFar) { start };\r\n\r\n\t\t\t<span style=\"color: blue;\">if</span> (start == end)\r\n\t\t\t{\r\n\t\t\t\t<span style=\"color: blue;\">yield</span> <span style=\"color: blue;\">return</span> pathSoFar;\r\n\t\t\t}\r\n\t\t\t<span style=\"color: blue;\">else</span>\r\n\t\t\t{\r\n\t\t\t\t<span style=\"color: blue;\">foreach</span>(<span style=\"color: blue;\">var</span> childNode <span style=\"color: blue;\">in</span> graph.FindAdjacentNodesFrom(start))\r\n\t\t\t\t{\r\n\t\t\t\t\t<span style=\"color: green;\">// Prevent cycles</span>\r\n\t\t\t\t\t<span style=\"color: blue;\">if</span> (pathSoFar.Contains(childNode)) <span style=\"color: blue;\">continue</span>;\r\n\r\n\t\t\t\t\t<span style=\"color: blue;\">foreach</span>(<span style=\"color: blue;\">var</span> newPath <span style=\"color: blue;\">in</span> FindAllNodesBetweenCore(graph, childNode, end, pathSoFar))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t<span style=\"color: blue;\">yield</span> <span style=\"color: blue;\">return</span> newPath;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n</pre>\r\n<pre>How can I achieve the same in QuickGraph?</pre>\r\n</div>",
    "PostedDate": "2011-06-16T11:41:04.1-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]