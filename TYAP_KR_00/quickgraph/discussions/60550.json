[
  {
    "Id": "205100",
    "ThreadId": "60550",
    "Html": "<p>Hi,</p>\r\n<p>I'm using QuickGraph to create a graph for a critical path calculation (CPM/PERT). One thing that is not allowed in such a graph is a circular reference, where directly or indirectly nodes point to each other.</p>\r\n<p>At this moment I'm finding out that I have a circular reference by a StackOverflow, but I would like to find out more gentle. Does anyone know of an algorithm or a way to find out you have a circular reference in the graph?</p>\r\n<p>Thanks for any suggestions.</p>",
    "PostedDate": "2009-06-24T11:27:09.083-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "205177",
    "ThreadId": "60550",
    "Html": "<p>You can simply execute a depth first search over the graph. If the graph is cyclic, it will throw an exception. You should also be able to detect cycles as you go while you are computing the critical path.</p>",
    "PostedDate": "2009-06-24T15:36:44.863-07:00",
    "UserRole": "Owner",
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "205843",
    "ThreadId": "60550",
    "Html": "<p>Hi Pelikhan,</p>\r\n<p>Thanks for getting back so quickly. I search for circular and found nothing, once I started looking for cycle I found loads of posts.</p>\r\n<p>Two questions I have on DFS:</p>\r\n<ul>\r\n<li>Is the exception generated because of an active check for a cycle or because of an stack overflow?</li>\r\n<li>Is there also a way to obtain the actual list of nodes that is causing the cycle?</li>\r\n</ul>\r\n<p>I found a post that seems to do exactly what I need ( <a href=\"http://www.cs.utk.edu/~parker/Courses/CS302-fall03/Notes/GraphIntro/CycleTest2.cpp\">http://www.cs.utk.edu/~parker/Courses/CS302-fall03/Notes/GraphIntro/CycleTest2.cpp</a>&nbsp;) but I'm unsure as to how easy it would be to implement this for Quickgraph and to what extend I can reuse part of DFS to do this.</p>\r\n<p>Thanks for your help and of course for the great library!</p>",
    "PostedDate": "2009-06-26T03:54:37.15-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "205954",
    "ThreadId": "60550",
    "Html": "<p>One correction: the topological sort algorithm will throw an exception but the DFS is a better solution for you.</p>\r\n<p>The DFS will raise the ForwardOrCrossEdge event when it detects an edge that creates a loop. You can listen to that event which gives you the problematic edge. Using a vertex predecessor recorder, you can also figure the path to that edge from the root.</p>\r\n<p>See&nbsp;http://quickgraph.codeplex.com/Wiki/View.aspx?title=Depth%20First%20Search%20Example&amp;referringTitle=Home for more info on how DFS and observers work.&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-06-26T09:24:05.733-07:00",
    "UserRole": "Owner",
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "206020",
    "ThreadId": "60550",
    "Html": "<p>Thanks for your help.</p>",
    "PostedDate": "2009-06-26T11:57:05.19-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "493107",
    "ThreadId": "60550",
    "Html": "<p>Shouldn't it be the BackEdge event instead of ForwardOfCrossEdge? Here's an article that does cycle detection with boost graph using a DFS, and it uses back edges:&nbsp;<a href=\"http://www.informit.com/articles/article.aspx?p=25777&seqNum=7\">http://www.informit.com/articles/article.aspx?p=25777&amp;seqNum=7</a></p>",
    "PostedDate": "2010-09-13T19:05:32.29-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]