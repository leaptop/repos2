[
  {
    "Id": "53266",
    "ThreadId": "16424",
    "Html": "<br />// im trying to use List&lt;&gt; so it can be dynamic<br />// only way i can get this to work if i name everything individually <br />// making my graph pretty uselsess<br />////////////////////<br />using System;<br />using System.Collections.Generic;<br />using System.Text;<br /><br />using QuickGraph;<br />using QuickGraph.Glee;<br />using QuickGraph.Graphviz;<br />using QuickGraph.Algorithms.ShortestPath;<br />using QuickGraph.Serialization;<br />using QuickGraph.Collections;<br />using QuickGraph.Algorithms.Observers;<br /><br /><br />namespace DrawLine<br />{<br />    class SortGraph<br />    {<br />        AdjacencyGraph&lt;int, Edge&lt;int&gt;&gt; AdjGraph = new AdjacencyGraph&lt;int, Edge&lt;int&gt;&gt;();<br /><br />        public SortGraph()<br />        {<br /><br /><br />        }<br /><br />        public List&lt;string&gt; LoadGraph(ListLineClass myLine, int Count)<br />        {<br /><br /><br />            List&lt;Edge&lt;int&gt;&gt; EdgeList = new List&lt;Edge&lt;int&gt;&gt;();<br />            List&lt;string&gt; StringList = new List&lt;string&gt;();<br /><br />            string tmpString;<br /><br />            for (int i = 0; i &lt; Count; i++)<br />                AdjGraph.AddVertex(i);<br /><br /><br />            for (int i = 0; i &lt; myLine.ListLine.Count; i++)<br />            {<br /><br />            Edge&lt;int&gt; tmpEdge = new Edge&lt;int&gt;(myLine.ListLine<a href=\"http://www.codeplex.com/quickgraph/Wiki/View.aspx?title=i\">i</a>.NodeIndex1 + 100, myLine.ListLine<a href=\"http://www.codeplex.com/quickgraph/Wiki/View.aspx?title=i\">i</a>.NodeIndex2 + 100);<br /><br />            EdgeList.Add(tmpEdge);<br /><br />            }<br /><br />            for (int i = 0; i &lt; EdgeList.Count; i++)<br />            {<br /><br />                AdjGraph.AddEdge(EdgeList<a href=\"http://www.codeplex.com/quickgraph/Wiki/View.aspx?title=i\">i</a>);<br /><br />            }<br /><br /><br />            Dictionary&lt;Edge&lt;int&gt;, double&gt; edgeLength = new Dictionary&lt;Edge&lt;int&gt;, double&gt;(AdjGraph.EdgeCount);<br /><br />            for (int i = 0; i &lt; AdjGraph.EdgeCount; i++)<br />            {<br /><br />                edgeLength.Add(EdgeList<a href=\"http://www.codeplex.com/quickgraph/Wiki/View.aspx?title=i\">i</a>, myLine.ListLine<a href=\"http://www.codeplex.com/quickgraph/Wiki/View.aspx?title=i\">i</a>.MyLineLength);<br />            }<br /><br />            DijkstraShortestPathAlgorithm&lt;int, Edge&lt;int&gt;&gt; dijkstra =<br />                                new DijkstraShortestPathAlgorithm&lt;int, Edge&lt;int&gt;&gt;(AdjGraph, edgeLength);<br /><br /><br />            VertexDistanceRecorderObserver&lt;int, Edge&lt;int&gt;&gt; distObserver =<br />                        new VertexDistanceRecorderObserver&lt;int, Edge&lt;int&gt;&gt;();<br />            distObserver.Attach(dijkstra);<br /><br />            VertexPredecessorRecorderObserver&lt;int, Edge&lt;int&gt;&gt; predecessorObserver = <br />                new VertexPredecessorRecorderObserver&lt;int, Edge&lt;int&gt;&gt;();<br />            predecessorObserver.Attach(dijkstra);<br /><br />            dijkstra.Compute(1);<br /><br />            tmpString = \"Distance KeyLoop \";<br />            StringList.Add(tmpString);<br />            tmpString = \"Distance ValueLoop \";<br />            StringList.Add(tmpString);<br />            foreach (KeyValuePair&lt;int, int&gt; kvp in distObserver.Distances)<br />            {<br />                StringList<a href=\"http://www.codeplex.com/quickgraph/Wiki/View.aspx?title=0\">0</a> += \", \" + kvp.Key;<br />                StringList<a href=\"http://www.codeplex.com/quickgraph/Wiki/View.aspx?title=1\">1</a> += \", \" + kvp.Value;<br /><br />            }<br /><br />            tmpString = \"Predecessor KeyLoop \";<br />            StringList.Add(tmpString);<br />            tmpString = \"Predecessor ValueLoop \";<br />            StringList.Add(tmpString);<br />            foreach (KeyValuePair&lt;int, Edge&lt;int&gt;&gt; kvp in predecessorObserver.VertexPredecessors)<br />            {<br />                StringList<a href=\"http://www.codeplex.com/quickgraph/Wiki/View.aspx?title=2\">2</a> += \", \" + kvp.Key;<br />                StringList<a href=\"http://www.codeplex.com/quickgraph/Wiki/View.aspx?title=3\">3</a> += \", \" + kvp.Value;<br /><br />            }<br /><br />            distObserver.Detach(dijkstra);<br />            predecessorObserver.Detach(dijkstra);<br /><br />            return StringList;<br />        }<br /><br />    }<br />}<br />",
    "PostedDate": "2007-10-14T17:06:58.23-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "53385",
    "ThreadId": "16424",
    "Html": "\r\nI'm confused, why not use the NodeIndex as the vertices of your graph? Why are you using the edge list and not adding directly to the graph.<br /><br />Since I don't know what ListLineGraph looks like, it difficult to tell what you are trying to do.<br />",
    "PostedDate": "2007-10-15T11:58:13.02-07:00",
    "UserRole": "Owner",
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "53409",
    "ThreadId": "16424",
    "Html": "\r\nthis is the only sample I found (this is  a carbon copy, just with list&lt;&gt;)<br /><a href=\"http://www.codeplex.com/quickgraph/Thread/View.aspx?ThreadId=12668\" class=\"externalLink\">http://www.codeplex.com/quickgraph/Thread/View.aspx?ThreadId=12668<span class=\"externalLinkIcon\" style=\"font-family:Consolas, Courier New, Courier, Monospace;\"></span></a><br />if you have different samples i'd love to see them.  Im new the more info the better.<br /><br /><br />what my listLineGraph looks like<br />public class ListLineClass<br />    {<br />        public List&lt;LineClass&gt; ListLine = new List&lt;LineClass&gt;();<br />   }<br /><br />public class LineClass<br />    {<br />       public Line MyLine = new Line();<br /><br />       public bool NoColide;<br />       public bool Checked;<br />       public float MyLineLength;<br />       public int NodeIndex1;// which 2 nodes line is connected too<br />       public int NodeIndex2;<br />       public Color colour;<br />}<br /><br />",
    "PostedDate": "2007-10-15T14:20:08.647-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "53445",
    "ThreadId": "16424",
    "Html": "<ul><li>create a custom edge to hold the lineclass,</li></ul><pre style=\"background-color:#ECECEC; border:dashed .1em #3E62A6; font-family:Consolas, Courier New, Courier, Monospace; font-size:1em; margin-top:0; padding:.5em; height:auto; overflow:auto; overflow-x:auto; overflow-y:auto;\">\r\npublic class EdgeLineClass : TaggedEdge&lt;LineClass&gt;\r\n{\r\n    public EdgeLineClass(LineClass lc) : base(lc.NodeIndex1, lc.NodeIndex2, lc) \r\n    {}\r\n}\r\n</pre><br /><ul><li>fill up the graph,</li></ul><pre style=\"background-color:#ECECEC; border:dashed .1em #3E62A6; font-family:Consolas, Courier New, Courier, Monospace; font-size:1em; margin-top:0; padding:.5em; height:auto; overflow:auto; overflow-x:auto; overflow-y:auto;\">\r\nAdjacencyGraph&lt;int, EdgeLineClass&gt; g = new ...;\r\nforeach(LineClass lc in ...)\r\n{\r\n    // add vertices\r\n    if (!g.ContainsVertex(lc.NodeIndex1)) \r\n        g.AddVertex(lc.NodeIndex1);\r\n    if (!g.ContainsVertex(lc.NodeIndex2)) \r\n        g.AddVertex(lc.NodeIndex2);\r\n    // add edge\r\n    g.AddEdge(new EdgeLineClass(lc));\r\n}\r\n</pre><br />that's it :)<br />",
    "PostedDate": "2007-10-15T20:50:12.467-07:00",
    "UserRole": "Owner",
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "53493",
    "ThreadId": "16424",
    "Html": "\r\nthank you for the quick reply.  Turns out I have a talent for making everything allot more difficult then they really are. I hope you have patience because I will be asking a few more (follow up dijskstar) <br />Im having trouble adding edge cost or length to the graph? <br /><br /> public void AddWeight()<br />       {<br /><br />           Dictionary&lt;EdgeLineClass, double&gt; edgeLength = new Dictionary&lt;EdgeLineClass, double&gt;(g.EdgeCount);<br /><br />           for (int i = 0; i &lt; g.EdgeCount; i++)<br />           {<br /> // how do i get edgecost into the graph?<br />               edgeLength.Add( ????,  myLine.ListLinei.MyLineLength);<br />           }<br /><br /><br /><br />       }<br />       public string MyDijkstra()<br />       {<br />           string tmp = \"dijkstra test: \";<br /><br />          // IVertexListGraph&lt;int, EdgeLineClass&gt; MyNode = null; // a graph of cities<br />           //IDictionary&lt;EdgeLineClass, double&gt; NodeDistances = null; // a dictionary of city distances<br /><br />           int sourceNode = 1; // starting city<br />           int targetNode = 3; // ending city<br /><br />           // creating the algorithm instance<br />           DijkstraShortestPathAlgorithm&lt;int, EdgeLineClass&gt; dijkstra =<br />               new DijkstraShortestPathAlgorithm&lt;int, EdgeLineClass&gt;(g, NodeDistances);<br /><br />           // creating the observer<br />           VertexPredecessorRecorderObserver&lt;int, EdgeLineClass&gt; vis = null;<br />           try<br />           {<br />               vis = new VertexPredecessorRecorderObserver&lt;int, EdgeLineClass&gt;();<br />               vis.Attach(dijkstra);<br /><br />               // compute and record shortest paths<br />               dijkstra.Compute(sourceNode);<br /><br />               // vis can create all the shortest path in the graph<br />               foreach (EdgeLineClass e in vis.Path(targetNode))<br />               {<br />                   tmp += e.ToString();<br />               }<br />           }<br />           finally<br />           {<br />               if (vis != null)<br />                   vis.Detach(dijkstra);<br />           }<br /><br /><br /><br />            return tmp;<br />       }<br />",
    "PostedDate": "2007-10-16T04:05:45.673-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "53528",
    "ThreadId": "16424",
    "Html": "\r\nNow that the edges have been added to your graph, enumerate them and update the weight map<br /><pre style=\"background-color:#ECECEC; border:dashed .1em #3E62A6; font-family:Consolas, Courier New, Courier, Monospace; font-size:1em; margin-top:0; padding:.5em; height:auto; overflow:auto; overflow-x:auto; overflow-y:auto;\">\r\nforeach(EdgeListClass edge in g.Edges)\r\n{\r\n     edgeLength.Add(edge, edge.Tag.MyLineLength);\r\n}\r\n</pre><br />note: please use the wiki formating for the source code when posting questions<br />",
    "PostedDate": "2007-10-16T09:14:19.533-07:00",
    "UserRole": "Owner",
    "MarkedAsAnswerDate": null
  }
]