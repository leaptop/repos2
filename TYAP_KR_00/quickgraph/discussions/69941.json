[
  {
    "Id": "238150",
    "ThreadId": "69941",
    "Html": "<p>Hi</p>\r\n<p>I am really new to the field of graphs.&nbsp;&nbsp;<br><br>I need to find the shortest distance between two&nbsp;places (nodes and edges magnitude is in 1000s).<br>The graph is undirectional. I mean going from A-B, B-A is similar and acceptable. So i dont want to create two edges i.e AB and BA.<br>I need to find the shortest distnace and the path for a pair of source and target.<br><br>Please provide <strong>some code</strong> to fulfill my requirement and suggest whether to choose&nbsp;<span style=\"font-size:x-small;color:#2b91af\">AdjacencyGraph <span style=\"color:#000000\">or IVertexAndEdgeListGraph.</span></span></p>\r\n<p><span style=\"font-size:x-small;color:#2b91af\"><span style=\"color:#000000\">Please provide any additional information which you may be helpful in this regard.<br><br>Regards<br>Atul</span></span></p>\r\n<p><span style=\"font-size:x-small;color:#2b91af\"><span style=\"color:#000000\">&nbsp;</span></span></p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-09-23T23:07:25.97-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "238633",
    "ThreadId": "69941",
    "Html": "<p>Somebody help!!!!</p>",
    "PostedDate": "2009-09-24T22:20:51.443-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "238648",
    "ThreadId": "69941",
    "Html": "<p>Use UndirectedShortestPath and the method AlgorithmExtensions.ShortestPathsDijkstra. This method will return a delegate that you can query for paths.</p>",
    "PostedDate": "2009-09-24T23:57:07.853-07:00",
    "UserRole": "Owner",
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "238714",
    "ThreadId": "69941",
    "Html": "<p>Hi Sir</p>\r\n<p>Please excuse my lack of knowledge. I was able to create Adjacency Graph as a working example was available on forum and was able to find the shortest distance between two place. but this graph is a directed one. I could find distance AB but not BA. Following is the code I used:</p>\r\n<p><span style=\"font-size:x-small\">\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><div style=\"color:Black;background-color:White\"><pre>AdjacencyGraph&lt;<span style=\"color:Blue\">string</span>, Edge&lt;<span style=\"color:Blue\">string</span>&gt;&gt; graph = <span style=\"color:Blue\">new</span> AdjacencyGraph&lt;<span style=\"color:Blue\">string</span>, Edge&lt;<span style=\"color:Blue\">string</span>&gt;&gt;(<span style=\"color:Blue\">true</span>);\r\n            \r\n            <span style=\"color:Green\">// Add some cities to the graph</span>\r\n            graph.AddVertex(<span style=\"color:#A31515\">&quot;A&quot;</span>);\r\n            \r\n            <span style=\"color:Green\">// Create the streets (&lt;string&gt; -&gt; the edge is identified by a string value)</span>\r\n            \r\n            Edge&lt;<span style=\"color:Blue\">string</span>&gt; a_b = <span style=\"color:Blue\">new</span> Edge&lt;<span style=\"color:Blue\">string</span>&gt;(<span style=\"color:#A31515\">&quot;A&quot;</span>, <span style=\"color:#A31515\">&quot;B&quot;</span>);\r\n           \r\n           <span style=\"color:Green\">// Add the streets</span>\r\n           \r\n            graph.AddEdge(a_b);           \r\n\r\n            <span style=\"color:Green\">// Define some lengths to the streets</span>\r\n            Dictionary&lt;Edge&lt;<span style=\"color:Blue\">string</span>&gt;, <span style=\"color:Blue\">double</span>&gt; edgeCost = <span style=\"color:Blue\">new</span> Dictionary&lt;Edge&lt;<span style=\"color:Blue\">string</span>&gt;, <span style=\"color:Blue\">double</span>&gt;(graph.EdgeCount);           \r\n\r\n            edgeCost.Add(a_b, 4);\r\n           \r\n            DijkstraShortestPathAlgorithm&lt;<span style=\"color:Blue\">string</span>, Edge&lt;<span style=\"color:Blue\">string</span>&gt;&gt; dijkstra = <span style=\"color:Blue\">new</span> DijkstraShortestPathAlgorithm&lt;<span style=\"color:Blue\">string</span>, Edge&lt;<span style=\"color:Blue\">string</span>&gt;&gt;(graph, AlgorithmExtensions.GetIndexer&lt;Edge&lt;<span style=\"color:Blue\">string</span>&gt;, <span style=\"color:Blue\">double</span>&gt;(edgeCost));\r\n\r\n            <span style=\"color:Green\">// Attach a Vertex Predecessor Recorder Observer to give us the paths</span>\r\n            QuickGraph.Algorithms.Observers.VertexPredecessorRecorderObserver&lt;<span style=\"color:Blue\">string</span>, Edge&lt;<span style=\"color:Blue\">string</span>&gt;&gt; predecessorObserver = <span style=\"color:Blue\">new</span> QuickGraph.Algorithms.Observers.VertexPredecessorRecorderObserver&lt;<span style=\"color:Blue\">string</span>, Edge&lt;<span style=\"color:Blue\">string</span>&gt;&gt;();\r\n            predecessorObserver.Attach(dijkstra);\r\n\r\n            <span style=\"color:Green\">// attach a distance observer to give us the shortest path distances</span>\r\n            VertexDistanceRecorderObserver&lt;<span style=\"color:Blue\">string</span>, Edge&lt;<span style=\"color:Blue\">string</span>&gt;&gt; distObserver = <span style=\"color:Blue\">new</span> VertexDistanceRecorderObserver&lt;<span style=\"color:Blue\">string</span>, Edge&lt;<span style=\"color:Blue\">string</span>&gt;&gt;(AlgorithmExtensions.GetIndexer&lt;Edge&lt;<span style=\"color:Blue\">string</span>&gt;, <span style=\"color:Blue\">double</span>&gt;(edgeCost));\r\n            distObserver.Attach(dijkstra);\r\n\r\n            <span style=\"color:Green\">// Run the algorithm with A set to be the source</span>\r\n            dijkstra.Compute(<span style=\"color:#A31515\">&quot;A&quot;</span>);\r\n                   \r\n            label1.Text = <span style=\"color:#A31515\">&quot;Shortest distance: &quot;</span>;\r\n            label1.Text +=  distObserver.Distances[<span style=\"color:#A31515\">&quot;B&quot;</span>] + <span style=\"color:#A31515\">&quot;\\n&quot;</span>;\r\n            \r\n            IEnumerable&lt;Edge&lt;<span style=\"color:Blue\">string</span>&gt;&gt; path;\r\n          <span style=\"color:Blue\">if</span>(predecessorObserver.TryGetPath(<span style=\"color:#A31515\">&quot;B&quot;</span>, <span style=\"color:Blue\">out</span> path))\r\n              <span style=\"color:Blue\">foreach</span> (<span style=\"color:Blue\">var</span> u <span style=\"color:Blue\">in</span> path)\r\n                  label1.Text += u +<span style=\"color:#A31515\">&quot;\\n&quot;</span> ;\r\n</pre>\r\n</div>\r\n</pre>\r\n<pre>I guess need to use IVertexAndEdgeListGraph for creating a undirected graph, but I could not find a working code for it. Else, I can opt to create duplicate 2 edges for edge as in both AB and BA, but that affect the perofrmace as the edges will be twice.</pre>\r\n<pre>Please provide some code/pseudocode to create IVertexAndEdgeListGraph and add vertices and edges to it.<br>I really need it urgently...Please help</pre>\r\n</div>\r\n</span></p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-09-25T03:07:57.083-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "239537",
    "ThreadId": "69941",
    "Html": "<p>Hello, if you want to use undirected graph you can do as follow :</p>\r\n<p>var distances = new Dictionary&lt;Edge&lt;string&gt;, double&gt;();<br>var graphU = new UndirectedGraph&lt;string, Edge&lt;string&gt;&gt;();<br>graphU.AddVertex(&quot;1&quot;);graphU.AddVertex(&quot;2&quot;);<br>var edge12 = new Edge&lt;string&gt;(&quot;1&quot;, &quot;2&quot;);<br>graphU.AddEdge(edge12);<br>distances.Add(edge12,3);</p>\r\n<p>var dijkstra = new UndirectedDijkstraShortestPathAlgorithm&lt;string, Edge&lt;string&gt;&gt;(graphU, AlgorithmExtensions.GetIndexer&lt;Edge&lt;string&gt;, double&gt;(distances));<br>var predecessorObserver = new UndirectedVertexPredecessorRecorderObserver&lt;string, Edge&lt;string&gt;&gt;();<br>predecessorObserver.Attach(dijkstra);<br>dijkstra.Compute(&quot;1&quot;);</p>\r\n<p>foreach (var z in predecessorObserver.VertexPredecessors)<br>{<br>&nbsp;Console.WriteLine(&quot;key:{0} value:{1}&quot;,z.Key,z.Value);<br>}</p>",
    "PostedDate": "2009-09-28T07:55:45.44-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "239866",
    "ThreadId": "69941",
    "Html": "<p>Thank you very much.</p>",
    "PostedDate": "2009-09-28T23:59:44.067-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]