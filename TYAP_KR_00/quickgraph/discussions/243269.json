[
  {
    "Id": "555235",
    "ThreadId": "243269",
    "Html": "\r\n<p>I apologize in advance if this is a stupid question...</p>\r\n<p>I have the following custom vertex class:</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> PositionableGraphVertex : IPositionable\r\n{\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">int</span> Id { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">private</span> <span style=\"color:blue\">set</span>; }\r\n\r\n    [XmlAttribute(<span style=\"color:#a31515\">&quot;x&quot;</span>)]\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">double</span> X { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }\r\n    [XmlAttribute(<span style=\"color:#a31515\">&quot;y&quot;</span>)]\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">double</span> Y { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }\r\n    [XmlAttribute(<span style=\"color:#a31515\">&quot;z&quot;</span>)]\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">double</span> Z { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }\r\n\r\n    <span style=\"color:blue\">public</span> PositionableGraphVertex(<span style=\"color:blue\">int</span> id, <span style=\"color:blue\">double</span> x, <span style=\"color:blue\">double</span> y, <span style=\"color:blue\">double</span> z)\r\n    {\r\n        Id = id;\r\n        X = x;\r\n        Y = y;\r\n        Z = z;\r\n    }\r\n\r\n    <span style=\"color:blue\">public</span> PositionableGraphVertex(<span style=\"color:blue\">int</span> id)\r\n    {\r\n        Id = id;\r\n    }\r\n}\r\n</pre>\r\n</div>\r\n<p>I am able to serialize this as follows:</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>myGraph.SerializeToGraphML(writer, v =&gt; v.Id.ToString(), myGraph.GetEdgeIdentity());</pre>\r\n</div>\r\n<p>However, I am stumped as to how to deserialize it and reconstruct the vertices with the proper position information. I am doing the following, without expecting it to give me position information:</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre> myGraph1.DeserializeFromGraphML(reader, v =&gt; <span style=\"color:blue\">new</span> PositionableGraphVertex(<span style=\"color:blue\">int</span>.Parse(v)), (source, target, id) =&gt; <span style=\"color:blue\">new</span> Edge&lt;PositionableGraphVertex&gt;(source, target));\r\n</pre>\r\n</div>\r\n<p>This reconstructs the vertices with the correct Ids as expected, however, it also fills the X, Y, and Z properties incorrectly (I did not even expect it to do anything?). How should I call this to also get the position information (with correct data)?</p>\r\n<p>In addition, why am I able to call SerializeToGraphML on an UndirectedGraph, but there is no corresponding DeserializeFromGraphML?</p>\r\n",
    "PostedDate": "2011-01-25T13:35:24.307-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "555711",
    "ThreadId": "243269",
    "Html": "\r\n<p>After looking at the source code and playing with my own implementation a bit, it seems that this may be a bug (I have not yet tracked down the offending code, so I cannot be sure). When serializing the graph into the graphML document, the additional properties\r\n X, Y, and Z are appropriately added as &lt;data&gt; elements to the graphML, with the appropriate values. However, when deserializing, the values are not correctly reconstructed. For instance, with the following vertices:</p>\r\n<pre style=\"font-family:consolas\"><span style=\"color:blue\">var</span>&nbsp;vertex1&nbsp;=&nbsp;<span style=\"color:blue\">new</span>&nbsp;<span style=\"color:#2b91af\">PositionableGraphVertex</span>(5,&nbsp;0.0,&nbsp;1.0,&nbsp;0.0);<br><span style=\"color:blue\">var</span>&nbsp;vertex2&nbsp;=&nbsp;<span style=\"color:blue\">new</span>&nbsp;<span style=\"color:#2b91af\">PositionableGraphVertex</span>(6,&nbsp;1.0,&nbsp;1.0,&nbsp;0.0);<br><span style=\"color:blue\">var</span>&nbsp;vertex3&nbsp;=&nbsp;<span style=\"color:blue\">new</span>&nbsp;<span style=\"color:#2b91af\">PositionableGraphVertex</span>(7,&nbsp;0.0,&nbsp;1.0,&nbsp;1.0);<br><span style=\"color:blue\">var</span>&nbsp;vertex4&nbsp;=&nbsp;<span style=\"color:blue\">new</span>&nbsp;<span style=\"color:#2b91af\">PositionableGraphVertex</span>(8,&nbsp;1.0,&nbsp;1.0,&nbsp;1.0);</pre>\r\n<p>I add these to the graph and serialize it. The GraphML looks just as expected (sample for vertex2):</p>\r\n<p>&lt;node id=&quot;6&quot;&gt;&lt;data key=&quot;xValue&quot;&gt;1&lt;/data&gt;&lt;data key=&quot;yValue&quot;&gt;1&lt;/data&gt;&lt;data key=&quot;zValue&quot;&gt;0&lt;/data&gt;&lt;/node&gt;</p>\r\n<p>However, when I deserialize it, it has the values x=1.0, y=0.0, z=0.0.</p>\r\n<p>In fact, all of my vertices have 0.0 for the y value, even though they all clearly have 1.0 in the original objects, and &lt;data key=&quot;yValue&quot;&gt;1&lt;/data&gt; as an element in the GraphML. The X and Z values are reconstructed correctly. I have changed\r\n both the property names and the XmlAttribute names to see if there were some issue there, but the deserialization is always the same.</p>\r\n",
    "PostedDate": "2011-01-26T09:48:24.753-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "682475",
    "ThreadId": "243269",
    "Html": "<p>I have same problem, have you solved in any way?</p>",
    "PostedDate": "2011-10-11T02:23:11.827-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1229688",
    "ThreadId": "243269",
    "Html": "Hey, I realize it has been awhile since this was posted, but I was still having trouble with it. I don't have a code fix (I'm of the same opinion that this is a bug, but I couldn't quite nail it down - there's some pretty obscure code around serialization). But I do have a relatively simple work around.\r<br />\n<br />\nI noticed as I was examining the XML output by the GraphMLSerializer, that it was Deserializing properly after I would pretty-print the xml (I was using a Notepad++ plugin to make the XML easier to read).  So, presuming that your full serialization code looks something like this:<br />\n<pre><code>using (XmlWriter writer = XmlWriter.Create(filename)) {\n    myGraph.SerializeToGraphML(writer, v =&gt; v.Id.ToString(), myGraph.GetEdgeIdentity());\n}</code></pre>\n\nTry altering your XmlWriter so that it does some pretty-printing for you:<br />\n<pre><code>using (XmlWriter writer = XmlWriter.Create(filename, new XmlWriterSettings { Indent = true, WriteEndDocumentOnClose = false })) {\n    myGraph.SerializeToGraphML(writer, v =&gt; v.Id.ToString(), myGraph.GetEdgeIdentity());\n}</code></pre>\n\nDeserialization should be just as you had it before.\r<br />\nI don't have a full explanation for the WriteEndDocumentOnClose, except that it avoided an exception for me.\r<br />\n<br />\nHope that helps somebody.\r<br />\n<br />\nTwainJ<br />\n",
    "PostedDate": "2014-04-02T16:13:34.4-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]